"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LOG_VERDACCIO_ERROR = exports.LOG_VERDACCIO_BYTES = exports.LOG_STATUS_MESSAGE = void 0;
exports.allow = allow;
exports.antiLoop = antiLoop;
exports.encodeScopePackage = encodeScopePackage;
exports.errorReportingMiddleware = errorReportingMiddleware;
exports.expectJson = expectJson;
exports.final = final;
exports.log = log;
exports.match = match;
exports.media = media;
exports.serveFavicon = serveFavicon;
exports.setSecurityWebHeaders = setSecurityWebHeaders;
exports.validateName = validateName;
exports.validatePackage = validatePackage;

var _debug = _interopRequireDefault(require("debug"));

var _fs = _interopRequireDefault(require("fs"));

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _validator = _interopRequireDefault(require("validator"));

var _constants = require("../lib/constants");

var _cryptoUtils = require("../lib/crypto-utils");

var _logger = require("../lib/logger");

var _utils = require("../lib/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug.default)('verdaccio');

function match(regexp) {
  return function (req, res, next, value) {
    if (regexp.exec(value)) {
      next();
    } else {
      next('route');
    }
  };
}

function serveFavicon(config) {
  return function (req, res, next) {
    try {
      var _config$web;

      // @ts-ignore
      const logoConf = config === null || config === void 0 ? void 0 : (_config$web = config.web) === null || _config$web === void 0 ? void 0 : _config$web.favicon;

      if (logoConf === '') {
        debug('favicon disabled');
        res.status(404);
      } else if (!_lodash.default.isEmpty(logoConf)) {
        debug('custom favicon');

        if (_validator.default.isURL(logoConf, {
          require_host: true,
          require_valid_protocol: true
        })) {
          debug('redirect to %o', logoConf);
          res.redirect(logoConf);
          return;
        } else {
          const faviconPath = _path.default.normalize(logoConf);

          debug('serving favicon from %o', faviconPath);

          _fs.default.access(faviconPath, _fs.default.constants.R_OK, err => {
            if (err) {
              debug('no read permissions to read: %o, reason:', logoConf, err === null || err === void 0 ? void 0 : err.message);
              return res.status(_constants.HTTP_STATUS.NOT_FOUND).end();
            } else {
              res.setHeader('content-type', 'image/x-icon');

              _fs.default.createReadStream(faviconPath).pipe(res);

              debug('rendered custom ico');
            }
          });
        }
      } else {
        res.setHeader('content-type', 'image/x-icon');

        _fs.default.createReadStream(_path.default.posix.join(__dirname, './web/html/favicon.ico')).pipe(res);

        debug('rendered ico');
      }
    } catch (err) {
      debug('error triggered, favicon not found');
      res.status(_constants.HTTP_STATUS.NOT_FOUND).end();
    }
  };
}

function setSecurityWebHeaders(req, res, next) {
  // disable loading in frames (clickjacking, etc.)
  res.header(_constants.HEADERS.FRAMES_OPTIONS, 'deny'); // avoid stablish connections outside of domain

  res.header(_constants.HEADERS.CSP, "connect-src 'self'"); // https://stackoverflow.com/questions/18337630/what-is-x-content-type-options-nosniff

  res.header(_constants.HEADERS.CTO, 'nosniff'); // https://stackoverflow.com/questions/9090577/what-is-the-http-header-x-xss-protection

  res.header(_constants.HEADERS.XSS, '1; mode=block');
  next();
} // flow: express does not match properly
// flow info https://github.com/flowtype/flow-typed/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+express


function validateName(req, res, next, value, name) {
  if (value === '-') {
    // special case in couchdb usually
    next('route');
  } else if ((0, _utils.validateName)(value)) {
    next();
  } else {
    next(_utils.ErrorCode.getForbidden('invalid ' + name));
  }
} // flow: express does not match properly
// flow info https://github.com/flowtype/flow-typed/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+express


function validatePackage(req, res, next, value, name) {
  if (value === '-') {
    // special case in couchdb usually
    next('route');
  } else if ((0, _utils.validatePackage)(value)) {
    next();
  } else {
    next(_utils.ErrorCode.getForbidden('invalid ' + name));
  }
}

function media(expect) {
  return function (req, res, next) {
    if (req.headers[_constants.HEADER_TYPE.CONTENT_TYPE] !== expect) {
      next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.UNSUPPORTED_MEDIA, 'wrong content-type, expect: ' + expect + ', got: ' + req.get(_constants.HEADER_TYPE.CONTENT_TYPE)));
    } else {
      next();
    }
  };
}

function encodeScopePackage(req, res, next) {
  if (req.url.indexOf('@') !== -1) {
    // e.g.: /@org/pkg/1.2.3 -> /@org%2Fpkg/1.2.3, /@org%2Fpkg/1.2.3 -> /@org%2Fpkg/1.2.3
    req.url = req.url.replace(/^(\/@[^\/%]+)\/(?!$)/, '$1%2F');
  }

  next();
}

function expectJson(req, res, next) {
  if (!(0, _utils.isObject)(req.body)) {
    return next(_utils.ErrorCode.getBadRequest("can't parse incoming json"));
  }

  next();
}

function antiLoop(config) {
  return function (req, res, next) {
    var _req$headers;

    if ((req === null || req === void 0 ? void 0 : (_req$headers = req.headers) === null || _req$headers === void 0 ? void 0 : _req$headers.via) != null) {
      const arr = req.headers.via.split(',');

      for (let i = 0; i < arr.length; i++) {
        const m = arr[i].match(/\s*(\S+)\s+(\S+)/);

        if (m && m[2] === config.server_id) {
          return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.LOOP_DETECTED, 'loop detected'));
        }
      }
    }

    next();
  };
}

function allow(auth) {
  return function (action) {
    return function (req, res, next) {
      req.pause();
      const packageName = req.params.scope ? `@${req.params.scope}/${req.params.package}` : req.params.package;
      let packageVersion = undefined;

      if (req.params.filename) {
        packageVersion = (0, _utils.getVersionFromTarball)(req.params.filename) || undefined;
      } else if (typeof req.body.versions === 'object') {
        packageVersion = Object.keys(req.body.versions)[0];
      }

      const remote = req.remote_user;
      debug('[middleware/allow][%o] allow for %o', action, remote === null || remote === void 0 ? void 0 : remote.name);
      auth['allow_' + action]({
        packageName,
        packageVersion
      }, remote, function (error, allowed) {
        req.resume();

        if (error) {
          next(error);
        } else if (allowed) {
          next();
        } else {
          // last plugin (that's our built-in one) returns either
          // cb(err) or cb(null, true), so this should never happen
          throw _utils.ErrorCode.getInternalError(_constants.API_ERROR.PLUGIN_ERROR);
        }
      });
    };
  };
}

function final(body, req, res, next) {
  if (res.statusCode === _constants.HTTP_STATUS.UNAUTHORIZED && !res.getHeader(_constants.HEADERS.WWW_AUTH)) {
    // they say it's required for 401, so...
    res.header(_constants.HEADERS.WWW_AUTH, `${_constants.TOKEN_BASIC}, ${_constants.TOKEN_BEARER}`);
  }

  try {
    if (_lodash.default.isString(body) || _lodash.default.isObject(body)) {
      if (!res.getHeader(_constants.HEADERS.CONTENT_TYPE)) {
        res.header(_constants.HEADERS.CONTENT_TYPE, _constants.HEADERS.JSON);
      }

      if (typeof body === 'object' && _lodash.default.isNil(body) === false) {
        if (typeof body.error === 'string') {
          res.locals._verdaccio_error = body.error;
        }

        body = JSON.stringify(body, undefined, '  ') + '\n';
      } // don't send etags with errors


      if (!res.statusCode || res.statusCode >= _constants.HTTP_STATUS.OK && res.statusCode < _constants.HTTP_STATUS.MULTIPLE_CHOICES) {
        res.header(_constants.HEADERS.ETAG, '"' + (0, _cryptoUtils.stringToMD5)(body) + '"');
      }
    } else {// send(null), send(204), etc.
    }
  } catch (err) {
    // if verdaccio sends headers first, and then calls res.send()
    // as an error handler, we can't report error properly,
    // and should just close socket
    if (err.message.match(/set headers after they are sent/)) {
      if (_lodash.default.isNil(res.socket) === false) {
        // @ts-ignore
        res.socket.destroy();
      }

      return;
    }

    throw err;
  }

  res.send(body);
}

const LOG_STATUS_MESSAGE = "@{status}, user: @{user}(@{remoteIP}), req: '@{request.method} @{request.url}'";
exports.LOG_STATUS_MESSAGE = LOG_STATUS_MESSAGE;
const LOG_VERDACCIO_ERROR = `${LOG_STATUS_MESSAGE}, error: @{!error}`;
exports.LOG_VERDACCIO_ERROR = LOG_VERDACCIO_ERROR;
const LOG_VERDACCIO_BYTES = `${LOG_STATUS_MESSAGE}, bytes: @{bytes.in}/@{bytes.out}`;
exports.LOG_VERDACCIO_BYTES = LOG_VERDACCIO_BYTES;

function log(config) {
  return function (req, res, next) {
    var _config$experiments;

    const _auth = req.headers.authorization;

    if (_lodash.default.isNil(_auth) === false) {
      req.headers.authorization = '<Classified>';
    }

    const _cookie = req.get('cookie');

    if (_lodash.default.isNil(_cookie) === false) {
      req.headers.cookie = '<Classified>';
    }

    req.url = req.originalUrl; // avoid log noise data from static content

    if (req.originalUrl.match(/static/) === null) {
      _logger.logger.http({
        req: req,
        ip: req.ip
      }, "@{ip} requested '@{req.method} @{req.url}'");
    }

    req.originalUrl = req.url;

    if (_lodash.default.isNil(_auth) === false) {
      req.headers.authorization = _auth;
    }

    if (_lodash.default.isNil(_cookie) === false) {
      req.headers.cookie = _cookie;
    }

    let bytesin = 0;

    if ((config === null || config === void 0 ? void 0 : (_config$experiments = config.experiments) === null || _config$experiments === void 0 ? void 0 : _config$experiments.bytesin_off) !== true) {
      req.on('data', function (chunk) {
        bytesin += chunk.length;
      });
    }

    let bytesout = 0;
    const _write = res.write; // FIXME: res.write should return boolean
    // @ts-ignore

    res.write = function (buf) {
      bytesout += buf.length;
      /* eslint prefer-rest-params: "off" */
      // @ts-ignore

      _write.apply(res, arguments);
    };

    let logHasBeenCalled = false;

    const log = function () {
      if (logHasBeenCalled) {
        return;
      }

      logHasBeenCalled = true;
      const forwardedFor = req.get('x-forwarded-for');
      const remoteAddress = req.connection.remoteAddress;
      const remoteIP = forwardedFor ? `${forwardedFor} via ${remoteAddress}` : remoteAddress;
      let message;

      if (res.locals._verdaccio_error) {
        message = LOG_VERDACCIO_ERROR;
      } else {
        message = LOG_VERDACCIO_BYTES;
      }

      req.url = req.originalUrl; // avoid log noise data from static content

      if (req.url.match(/static/) === null) {
        _logger.logger.http({
          request: {
            method: req.method,
            url: req.url
          },
          user: req.remote_user && req.remote_user.name || null,
          remoteIP,
          status: res.statusCode,
          error: res.locals._verdaccio_error,
          bytes: {
            in: bytesin,
            out: bytesout
          }
        }, message);

        req.originalUrl = req.url;
      }
    };

    req.on('close', function () {
      log();
    });
    const _end = res.end;

    res.end = function (buf) {
      if (buf) {
        bytesout += buf.length;
      }
      /* eslint prefer-rest-params: "off" */
      // @ts-ignore


      _end.apply(res, arguments);

      log();
    };

    next();
  };
} // Middleware


function errorReportingMiddleware(req, res, next) {
  res.locals.report_error = res.locals.report_error || function (err) {
    if (err.status && err.status >= _constants.HTTP_STATUS.BAD_REQUEST && err.status < 600) {
      if (!res.headersSent) {
        res.status(err.status);
        next({
          error: err.message || _constants.API_ERROR.UNKNOWN_ERROR
        });
      }
    } else {
      _logger.logger.error({
        err: err
      }, 'unexpected error: @{!err.message}\n@{err.stack}');

      if (!res.status || !res.send) {
        _logger.logger.error('this is an error in express.js, please report this');

        res.destroy();
      } else if (!res.headersSent) {
        res.status(_constants.HTTP_STATUS.INTERNAL_ERROR);
        next({
          error: _constants.API_ERROR.INTERNAL_SERVER_ERROR
        });
      } else {// socket should be already closed
      }
    }
  };

  next();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,