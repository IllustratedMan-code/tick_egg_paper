{"version":3,"file":"htpasswd.js","names":["DEFAULT_SLOW_VERIFY_MS","HTPasswd","constructor","config","options","users","logger","maxUsers","max_users","Infinity","algorithm","rounds","undefined","HtpasswdHashAlgorithm","crypt","warn","Error","lastTime","file","bcrypt","DEFAULT_BCRYPT_ROUNDS","algo","hashConfig","path","Path","resolve","dirname","self_path","slowVerifyMs","slow_verify_ms","authenticate","user","password","cb","reload","err","code","passwordValid","start","Date","verifyPassword","durationMs","getTime","message","error","adduser","realCb","pathPass","sanityCheck","then","sanity","lockAndRead","res","locked","unlockFile","body","toString","parseHTPasswd","_writeFile","addUserToHTPasswd","catch","callback","fs","stat","stats","mtime","readFile","buffer","Object","assign","_stringToUt8","authentication","writeFile","changePassword","newPassword","pathPassFile","changePasswordToHTPasswd","content"],"sources":["../src/htpasswd.ts"],"sourcesContent":["import fs from 'fs';\nimport Path from 'path';\n\nimport { Callback, AuthConf, Config, Logger, IPluginAuth, PluginOptions } from '@verdaccio/types';\nimport { unlockFile } from '@verdaccio/file-locking';\n\nimport {\n  HtpasswdHashAlgorithm,\n  HtpasswdHashConfig,\n  verifyPassword,\n  lockAndRead,\n  parseHTPasswd,\n  addUserToHTPasswd,\n  changePasswordToHTPasswd,\n  sanityCheck,\n  DEFAULT_BCRYPT_ROUNDS,\n} from './utils';\n\nexport type HTPasswdConfig = {\n  file: string;\n  algorithm?: HtpasswdHashAlgorithm;\n  rounds?: number;\n  max_users?: number;\n  slow_verify_ms?: number;\n} & Config;\n\nexport const DEFAULT_SLOW_VERIFY_MS = 200;\n\n/**\n * HTPasswd - Verdaccio auth class\n */\nexport default class HTPasswd implements IPluginAuth<HTPasswdConfig> {\n  /**\n   *\n   * @param {*} config htpasswd file\n   * @param {object} stuff config.yaml in object from\n   */\n  private users: {};\n  private maxUsers: number;\n  private path: string;\n  private hashConfig: HtpasswdHashConfig;\n  private slowVerifyMs: number;\n  private logger: Logger;\n  private lastTime: any;\n  // constructor\n  public constructor(config: AuthConf, options: PluginOptions<HTPasswdConfig>) {\n    this.users = {};\n    // verdaccio logger\n    this.logger = options.logger;\n\n    // all this \"verdaccio_config\" stuff is for b/w compatibility only\n    this.maxUsers = config.max_users ? config.max_users : Infinity;\n\n    let algorithm: HtpasswdHashAlgorithm;\n    let rounds: number | undefined;\n\n    if (config.algorithm === undefined) {\n      // to avoid breaking changes we uses crypt, future version\n      // of this plugin uses bcrypt by default\n      // https://github.com/verdaccio/verdaccio/pull/2072#issuecomment-770235502\n      algorithm = HtpasswdHashAlgorithm.crypt;\n      this.logger.warn(\n        // eslint-disable-next-line max-len\n        '\"crypt\" algorithm is deprecated consider switch to \"bcrypt\". Read more: https://github.com/verdaccio/monorepo/pull/580'\n      );\n    } else if (HtpasswdHashAlgorithm[config.algorithm] !== undefined) {\n      algorithm = HtpasswdHashAlgorithm[config.algorithm];\n    } else {\n      throw new Error(`Invalid algorithm \"${config.algorithm}\"`);\n    }\n\n    this.lastTime = null;\n\n    const { file } = config;\n    if (!file) {\n      throw new Error('should specify \"file\" in config');\n    }\n\n    if (algorithm === HtpasswdHashAlgorithm.bcrypt) {\n      rounds = config.rounds || DEFAULT_BCRYPT_ROUNDS;\n    } else if (config.rounds !== undefined) {\n      this.logger.warn({ algo: algorithm }, 'Option \"rounds\" is not valid for \"@{algo}\" algorithm');\n    }\n\n    this.hashConfig = {\n      algorithm,\n      rounds,\n    };\n\n    this.path = Path.resolve(Path.dirname(options.config.self_path), file);\n    this.slowVerifyMs = config.slow_verify_ms || DEFAULT_SLOW_VERIFY_MS;\n  }\n\n  /**\n   * authenticate - Authenticate user.\n   * @param {string} user\n   * @param {string} password\n   * @param {function} cb\n   * @returns {function}\n   */\n  public authenticate(user: string, password: string, cb: Callback): void {\n    this.reload(async (err) => {\n      if (err) {\n        return cb(err.code === 'ENOENT' ? null : err);\n      }\n      if (!this.users[user]) {\n        return cb(null, false);\n      }\n\n      let passwordValid = false;\n      try {\n        const start = new Date();\n        passwordValid = await verifyPassword(password, this.users[user]);\n        const durationMs = new Date().getTime() - start.getTime();\n        if (durationMs > this.slowVerifyMs) {\n          this.logger.warn(\n            { user, durationMs },\n            'Password for user \"@{user}\" took @{durationMs}ms to verify'\n          );\n        }\n      } catch ({ message }) {\n        this.logger.error({ message }, 'Unable to verify user password: @{message}');\n      }\n      if (!passwordValid) {\n        return cb(null, false);\n      }\n\n      // authentication succeeded!\n      // return all usergroups this user has access to;\n      // (this particular package has no concept of usergroups, so just return\n      // user herself)\n      return cb(null, [user]);\n    });\n  }\n\n  /**\n   * Add user\n   * 1. lock file for writing (other processes can still read)\n   * 2. reload .htpasswd\n   * 3. write new data into .htpasswd.tmp\n   * 4. move .htpasswd.tmp to .htpasswd\n   * 5. reload .htpasswd\n   * 6. unlock file\n   *\n   * @param {string} user\n   * @param {string} password\n   * @param {function} realCb\n   * @returns {Promise<any>}\n   */\n  public adduser(user: string, password: string, realCb: Callback): void {\n    const pathPass = this.path;\n    sanityCheck(user, password, verifyPassword, this.users, this.maxUsers)\n      .then((sanity) => {\n        // preliminary checks, just to ensure that file won't be reloaded if it's\n        // not needed\n        if (sanity) {\n          return realCb(sanity, false);\n        }\n\n        lockAndRead(pathPass, async (err, res): Promise<void> => {\n          let locked = false;\n\n          // callback that cleans up lock first\n          const cb = (err): void => {\n            if (locked) {\n              unlockFile(pathPass, () => {\n                // ignore any error from the unlock\n                realCb(err, !err);\n              });\n            } else {\n              realCb(err, !err);\n            }\n          };\n\n          if (!err) {\n            locked = true;\n          }\n\n          // ignore ENOENT errors, we'll just create .htpasswd in that case\n          if (err && err.code !== 'ENOENT') {\n            return cb(err);\n          }\n          const body = (res || '').toString('utf8');\n          this.users = parseHTPasswd(body);\n\n          // real checks, to prevent race conditions\n          // parsing users after reading file.\n          sanity = await sanityCheck(user, password, verifyPassword, this.users, this.maxUsers);\n\n          if (sanity) {\n            return cb(sanity);\n          }\n\n          try {\n            this._writeFile(await addUserToHTPasswd(body, user, password, this.hashConfig), cb);\n          } catch (err) {\n            return cb(err);\n          }\n        });\n      })\n      .catch((err) => realCb(err));\n  }\n\n  /**\n   * Reload users\n   * @param {function} callback\n   */\n  public reload(callback: Callback): void {\n    fs.stat(this.path, (err, stats) => {\n      if (err) {\n        return callback(err);\n      }\n      if (this.lastTime === stats.mtime) {\n        return callback();\n      }\n\n      this.lastTime = stats.mtime;\n\n      fs.readFile(this.path, 'utf8', (err, buffer) => {\n        if (err) {\n          return callback(err);\n        }\n\n        Object.assign(this.users, parseHTPasswd(buffer));\n        callback();\n      });\n    });\n  }\n\n  private _stringToUt8(authentication: string): string {\n    return (authentication || '').toString();\n  }\n\n  private _writeFile(body: string, cb: Callback): void {\n    fs.writeFile(this.path, body, (err) => {\n      if (err) {\n        cb(err);\n      } else {\n        this.reload(() => {\n          cb(null);\n        });\n      }\n    });\n  }\n\n  /**\n   * changePassword - change password for existing user.\n   * @param {string} user\n   * @param {string} password\n   * @param {string} newPassword\n   * @param {function} realCb\n   * @returns {function}\n   */\n  public changePassword(\n    user: string,\n    password: string,\n    newPassword: string,\n    realCb: Callback\n  ): void {\n    lockAndRead(this.path, (err, res) => {\n      let locked = false;\n      const pathPassFile = this.path;\n\n      // callback that cleans up lock first\n      const cb = (err): void => {\n        if (locked) {\n          unlockFile(pathPassFile, () => {\n            // ignore any error from the unlock\n            realCb(err, !err);\n          });\n        } else {\n          realCb(err, !err);\n        }\n      };\n\n      if (!err) {\n        locked = true;\n      }\n\n      if (err && err.code !== 'ENOENT') {\n        return cb(err);\n      }\n\n      const body = this._stringToUt8(res);\n      this.users = parseHTPasswd(body);\n\n      try {\n        changePasswordToHTPasswd(body, user, password, newPassword, this.hashConfig)\n          .then((content) => {\n            this._writeFile(content, cb);\n          })\n          .catch((err) => {\n            cb(err);\n          });\n      } catch (err) {\n        return cb(err);\n      }\n    });\n  }\n}\n"],"mappings":"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"}