{"version":3,"sources":["webpack://@jupyterlab/application-top/./node_modules/lib0/mutex.js","webpack://@jupyterlab/application-top/./node_modules/lib0/broadcastchannel.js","webpack://@jupyterlab/application-top/./node_modules/y-protocols/sync.js","webpack://@jupyterlab/application-top/./node_modules/y-protocols/auth.js","webpack://@jupyterlab/application-top/./node_modules/lib0/url.js","webpack://@jupyterlab/application-top/./node_modules/y-websocket/src/y-websocket.js"],"names":["createMutex","token","f","g","undefined","channels","Map","LocalStoragePolyfill","constructor","room","this","onmessage","storage","e","key","data","buffer","newValue","postMessage","buf","BC","BroadcastChannel","getChannel","map","subs","Set","bc","forEach","sub","subscribe","add","unsubscribe","delete","publish","origin","c","messageYjsSyncStep1","messageYjsSyncStep2","messageYjsUpdate","writeSyncStep1","encoder","doc","sv","writeSyncStep2","encodedStateVector","readSyncStep1","decoder","decoding","readSyncStep2","transactionOrigin","error","console","writeUpdate","update","readUpdate","readSyncMessage","messageType","Error","messagePermissionDenied","writePermissionDenied","reason","encoding","writeVarUint","writeVarString","readAuthMessage","y","permissionDeniedHandler","decodeQueryParams","url","query","urlQuerySplit","split","pairs","length","i","item","pair","decodeURIComponent","encodeQueryParams","params","object","val","encodeURIComponent","join","messageSync","messageQueryAwareness","messageAwareness","messageAuth","messageHandlers","provider","emitSynced","syncMessageType","synced","awareness","Array","from","getStates","keys","reconnectTimeoutBase","maxReconnectTimeout","messageReconnectTimeout","warn","readMessage","messageHandler","setupWS","shouldConnect","ws","websocket","_WS","binaryType","wsconnecting","wsconnected","event","wsLastMessageReceived","time","Uint8Array","send","onclose","filter","client","clientID","emit","status","wsUnsuccessfulReconnects","setTimeout","math","onopen","getLocalState","encoderAwarenessState","broadcastMessage","bcconnected","mux","bcChannel","WebsocketProvider","serverUrl","roomname","connect","WebSocketPolyfill","WebSocket","resyncInterval","super","slice","encodedParams","mutex","_synced","_resyncInterval","setInterval","_bcSubscriber","_updateHandler","on","_awarenessUpdateHandler","added","updated","removed","changedClients","concat","_beforeUnloadHandler","window","addEventListener","process","_checkInterval","close","state","destroy","clearInterval","disconnect","removeEventListener","off","connectBc","encoderSync","encoderState","encoderAwarenessQuery","disconnectBc"],"mappings":"kKA4BO,MAAMA,EAAc,KACzB,IAAIC,EAAQ,KACZ,MAAO,CAACC,EAAGC,KACT,GAAIF,EAAO,CACTA,EAAQ,MACR,IACEC,IACA,QACAD,EAAQ,WAEL,GAAIE,IAAMC,UAAW,CAC1BD,Q,iICPN,MAAME,EAAW,IAAIC,IAErB,MAAMC,EAIJC,YAAaC,GACXC,KAAKD,KAAOA,EAIZC,KAAKC,UAAY,KACjBC,EAAA,GAAiBC,GAAKA,EAAEC,MAAQL,GAAQC,KAAKC,YAAc,MAAQD,KAAKC,UAAU,CAAEI,KAAMC,EAAA,GAAkBH,EAAEI,UAAY,QAM5HC,YAAaC,GACXP,EAAA,UAA2BF,KAAKD,KAAMO,EAAA,GAAgBA,EAAA,GAAuCG,MAKjG,MAAMC,SAAYC,mBAAqB,YAAcd,EAAuBc,iBAM5E,MAAMC,EAAab,GACjBc,EAAA,GAAmBlB,EAAUI,GAAM,KACjC,MAAMe,EAAO,IAAIC,IACjB,MAAMC,EAAK,IAAIN,EAAGX,GAIlBiB,EAAGf,UAAYE,GAAKW,EAAKG,SAAQC,GAAOA,EAAIf,EAAEE,KAAM,sBACpD,MAAO,CACLW,KAAIF,WAWH,MAAMK,EAAY,CAACpB,EAAMP,IAAMoB,EAAWb,GAAMe,KAAKM,IAAI5B,GASzD,MAAM6B,EAAc,CAACtB,EAAMP,IAAMoB,EAAWb,GAAMe,KAAKQ,OAAO9B,GAU9D,MAAM+B,EAAU,CAACxB,EAAMM,EAAMmB,EAAS,QAC3C,MAAMC,EAAIb,EAAWb,GACrB0B,EAAET,GAAGR,YAAYH,GACjBoB,EAAEX,KAAKG,SAAQC,GAAOA,EAAIb,EAAMmB,M,6CCnE3B,MAAME,EAAsB,EAC5B,MAAMC,EAAsB,EAC5B,MAAMC,EAAmB,EAQzB,MAAMC,EAAiB,CAACC,EAASC,KACtC,KAAsBD,EAASJ,GAC/B,MAAMM,EAAK,oBAAoBD,GAC/B,KAA4BD,EAASE,IAQhC,MAAMC,EAAiB,CAACH,EAASC,EAAKG,KAC3C,KAAsBJ,EAASH,GAC/B,KAA4BG,EAAS,sBAAsBC,EAAKG,KAU3D,MAAMC,EAAgB,CAACC,EAASN,EAASC,IAC9CE,EAAeH,EAASC,EAAKM,EAAA,GAA2BD,IASnD,MAAME,EAAgB,CAACF,EAASL,EAAKQ,KAC1C,IACE,cAAcR,EAAKM,EAAA,GAA2BD,GAAUG,GACxD,MAAOC,GAEPC,QAAQD,MAAM,2CAA4CA,KAQvD,MAAME,EAAc,CAACZ,EAASa,KACnC,KAAsBb,EAASF,GAC/B,KAA4BE,EAASa,IAUhC,MAAMC,EAAaN,EAQnB,MAAMO,EAAkB,CAACT,EAASN,EAASC,EAAKQ,KACrD,MAAMO,EAAcT,EAAA,GAAqBD,GACzC,OAAQU,GACN,KAAKpB,EACHS,EAAcC,EAASN,EAASC,GAChC,MACF,KAAKJ,EACHW,EAAcF,EAASL,EAAKQ,GAC5B,MACF,KAAKX,EACHgB,EAAWR,EAASL,EAAKQ,GACzB,MACF,QACE,MAAM,IAAIQ,MAAM,wBAEpB,OAAOD,GC3HF,MAAME,EAA0B,EAMhC,MAAMC,EAAwB,CAACnB,EAASoB,KAC7CC,SAASC,aAAatB,EAASkB,GAC/BG,SAASE,eAAevB,EAASoB,IAe5B,MAAMI,EAAkB,CAAClB,EAASmB,EAAGC,KAC1C,OAAQnB,EAAA,GAAqBD,IAC3B,KAAKY,EAAyBQ,EAAwBD,EAAGlB,EAAA,GAAuBD,M,0EChB7E,MAAMqB,EAAoBC,IAI/B,MAAMC,EAAQ,GACd,MAAMC,EAAgBF,EAAIG,MAAM,KAChC,MAAMC,EAAQF,EAAcA,EAAcG,OAAS,GAAGF,MAAM,KAC5D,IAAK,IAAIG,EAAI,EAAGA,EAAIF,EAAMC,OAAQC,IAAK,CACrC,MAAMC,EAAOH,EAAME,GACnB,GAAIC,EAAKF,OAAS,EAAG,CACnB,MAAMG,EAAOD,EAAKJ,MAAM,KACxBF,EAAMQ,mBAAmBD,EAAK,KAAOC,mBAAmBD,EAAK,IAAM,KAGvE,OAAOP,GAOF,MAAMS,EAAoBC,GAC/BC,EAAA,GAAWD,GAAQ,CAACE,EAAKnE,IAAQ,GAAGoE,mBAAmBpE,MAAQoE,mBAAmBD,OAAQE,KAAK,K,eCbjG,MAAMC,EAAc,EACpB,MAAMC,EAAwB,EAC9B,MAAMC,EAAmB,EACzB,MAAMC,EAAc,EAMpB,MAAMC,EAAkB,GAExBA,EAAgBJ,GAAe,CAAC5C,EAASM,EAAS2C,EAAUC,EAAYlC,KACtE,KAAsBhB,EAAS4C,GAC/B,MAAMO,EAAkB,EAA6B7C,EAASN,EAASiD,EAAShD,IAAKgD,GACrF,GAAIC,GAAcC,IAAoB,IAAqCF,EAASG,OAAQ,CAC1FH,EAASG,OAAS,OAItBJ,EAAgBH,GAAyB,CAAC7C,EAASM,EAAS2C,EAAUC,EAAYlC,KAChF,KAAsBhB,EAAS8C,GAC/B,KAA4B9C,EAAS,KAAwCiD,EAASI,UAAWC,MAAMC,KAAKN,EAASI,UAAUG,YAAYC,WAG7IT,EAAgBF,GAAoB,CAAC9C,EAASM,EAAS2C,EAAUC,EAAYlC,KAC3E,KAAuCiC,EAASI,UAAW9C,EAAA,GAA2BD,GAAU2C,IAGlGD,EAAgBD,GAAe,CAAC/C,EAASM,EAAS2C,EAAUC,EAAYlC,KACtE,EAA6BV,EAAS2C,EAAShD,IAAKyB,IAGtD,MAAMgC,EAAuB,KAC7B,MAAMC,EAAsB,KAE5B,MAAMC,EAA0B,IAMhC,MAAMlC,EAA0B,CAACuB,EAAU7B,IAAWT,QAAQkD,KAAK,+BAA+BZ,EAASrB,SAASR,KAQpH,MAAM0C,EAAc,CAACb,EAAUtE,EAAKuE,KAClC,MAAM5C,EAAUC,EAAA,GAAuB5B,GACvC,MAAMqB,EAAU,OAChB,MAAMgB,EAAcT,EAAA,GAAqBD,GACzC,MAAMyD,EAAiBd,EAASD,gBAAgBhC,GAChD,GAAuB,EAAkB,CACvC+C,EAAe/D,EAASM,EAAS2C,EAAUC,EAAYlC,OAClD,CACLL,QAAQD,MAAM,6BAEhB,OAAOV,GAMT,MAAMgE,EAAUf,IACd,GAAIA,EAASgB,eAAiBhB,EAASiB,KAAO,KAAM,CAClD,MAAMC,EAAY,IAAIlB,EAASmB,IAAInB,EAASrB,KAC5CuC,EAAUE,WAAa,cACvBpB,EAASiB,GAAKC,EACdlB,EAASqB,aAAe,KACxBrB,EAASsB,YAAc,MACvBtB,EAASG,OAAS,MAElBe,EAAUhG,UAAYqG,IACpBvB,EAASwB,sBAAwBC,EAAA,KACjC,MAAM1E,EAAU8D,EAAYb,EAAU,IAAI0B,WAAWH,EAAMjG,MAAO,MAClE,GAAI,KAAgByB,GAAW,EAAG,CAChCmE,EAAUS,KAAK,KAAsB5E,MAGzCmE,EAAUU,QAAU,KAClB5B,EAASiB,GAAK,KACdjB,EAASqB,aAAe,MACxB,GAAIrB,EAASsB,YAAa,CACxBtB,EAASsB,YAAc,MACvBtB,EAASG,OAAS,MAElB,KAAwCH,EAASI,UAAWC,MAAMC,KAAKN,EAASI,UAAUG,YAAYC,QAAQqB,QAAOC,GAAUA,IAAW9B,EAAShD,IAAI+E,WAAW/B,GAClKA,EAASgC,KAAK,SAAU,CAAC,CACvBC,OAAQ,sBAEL,CACLjC,EAASkC,2BAMXC,WAAWpB,EAASqB,EAAA,GAASA,EAAA,GAAWpC,EAASkC,yBAA2B,GAAKzB,EAAsBC,GAAsBV,IAE/HkB,EAAUmB,OAAS,KACjBrC,EAASwB,sBAAwBC,EAAA,KACjCzB,EAASqB,aAAe,MACxBrB,EAASsB,YAAc,KACvBtB,EAASkC,yBAA2B,EACpClC,EAASgC,KAAK,SAAU,CAAC,CACvBC,OAAQ,eAGV,MAAMlF,EAAU,OAChB,KAAsBA,EAAS4C,GAC/B,EAA4B5C,EAASiD,EAAShD,KAC9CkE,EAAUS,KAAK,KAAsB5E,IAErC,GAAIiD,EAASI,UAAUkC,kBAAoB,KAAM,CAC/C,MAAMC,EAAwB,OAC9B,KAAsBA,EAAuB1C,GAC7C,KAA4B0C,EAAuB,KAAwCvC,EAASI,UAAW,CAACJ,EAAShD,IAAI+E,YAC7Hb,EAAUS,KAAK,KAAsBY,MAIzCvC,EAASgC,KAAK,SAAU,CAAC,CACvBC,OAAQ,kBASd,MAAMO,EAAmB,CAACxC,EAAUtE,KAClC,GAAIsE,EAASsB,YAAa,CACEtB,EAAW,GAAE2B,KAAKjG,GAE9C,GAAIsE,EAASyC,YAAa,CACxBzC,EAAS0C,KAAI,KACX,EAAW1C,EAAS2C,UAAWjH,QAkB9B,MAAMkH,UAA0B,IAYrC7H,YAAa8H,EAAWC,EAAU9F,GAAK,QAAE+F,EAAU,KAAI,UAAE3C,EAAY,IAAI,KAA4BpD,GAAI,OAAEsC,EAAS,GAAE,kBAAE0D,EAAoBC,UAAS,eAAEC,GAAkB,GAAM,IAC7KC,QAEA,MAAON,EAAUA,EAAU7D,OAAS,KAAO,IAAK,CAC9C6D,EAAYA,EAAUO,MAAM,EAAGP,EAAU7D,OAAS,GAEpD,MAAMqE,EAAgB,EAAsB/D,GAC5CrE,KAAK0H,UAAYE,EAAY,IAAMC,EACnC7H,KAAK0D,IAAMkE,EAAY,IAAMC,GAAYO,EAAcrE,SAAW,EAAI,GAAK,IAAMqE,GACjFpI,KAAK6H,SAAWA,EAChB7H,KAAK+B,IAAMA,EACX/B,KAAKkG,IAAM6B,EACX/H,KAAKmF,UAAYA,EACjBnF,KAAKqG,YAAc,MACnBrG,KAAKoG,aAAe,MACpBpG,KAAKwH,YAAc,MACnBxH,KAAKiH,yBAA2B,EAChCjH,KAAK8E,gBAAkBA,EAAgBqD,QACvCnI,KAAKyH,IAAMY,EAAA,IAIXrI,KAAKsI,QAAU,MAIftI,KAAKgG,GAAK,KACVhG,KAAKuG,sBAAwB,EAK7BvG,KAAK+F,cAAgB+B,EAKrB9H,KAAKuI,gBAAkB,EACvB,GAAIN,EAAiB,EAAG,CACtBjI,KAAKuI,gBAAsCC,aAAY,KACrD,GAAIxI,KAAKgG,GAAI,CAEX,MAAMlE,EAAU,OAChB,KAAsBA,EAAS4C,GAC/B,EAA4B5C,EAASC,GACrC/B,KAAKgG,GAAGU,KAAK,KAAsB5E,OAEpCmG,GAMLjI,KAAKyI,cAAgBpI,IACnBL,KAAKyH,KAAI,KACP,MAAM3F,EAAU8D,EAAY5F,KAAM,IAAIyG,WAAWpG,GAAO,OACxD,GAAI,KAAgByB,GAAW,EAAG,CAChC,EAAW9B,KAAK0H,UAAW,KAAsB5F,SASvD9B,KAAK0I,eAAiB,CAAC/F,EAAQnB,KAC7B,GAAIA,IAAWxB,KAAM,CACnB,MAAM8B,EAAU,OAChB,KAAsBA,EAAS4C,GAC/B,EAAyB5C,EAASa,GAClC4E,EAAiBvH,KAAM,KAAsB8B,MAGjD9B,KAAK+B,IAAI4G,GAAG,SAAU3I,KAAK0I,gBAK3B1I,KAAK4I,wBAA0B,EAAGC,QAAOC,UAASC,WAAWvH,KAC3D,MAAMwH,EAAiBH,EAAMI,OAAOH,GAASG,OAAOF,GACpD,MAAMjH,EAAU,OAChB,KAAsBA,EAAS8C,GAC/B,KAA4B9C,EAAS,KAAwCqD,EAAW6D,IACxFzB,EAAiBvH,KAAM,KAAsB8B,KAE/C9B,KAAKkJ,qBAAuB,KAC1B,KAAwClJ,KAAKmF,UAAW,CAACpD,EAAI+E,UAAW,kBAE1E,UAAWqC,SAAW,YAAa,CACjCA,OAAOC,iBAAiB,eAAgBpJ,KAAKkJ,2BACxC,UAAWG,IAAY,YAAa,CACzCA,EAAQV,GAAG,QAAQ,IAAM3I,KAAKkJ,uBAEhC/D,EAAUwD,GAAG,SAAU3I,KAAK4I,yBAC5B5I,KAAKsJ,eAAqCd,aAAY,KACpD,GAAIxI,KAAKqG,aAAeX,EAA0Bc,EAAA,KAAqBxG,KAAKuG,sBAAuB,CAGvEvG,KAAO,GAAEuJ,WAEpC7D,EAA0B,IAC7B,GAAIoC,EAAS,CACX9H,KAAK8H,WAOT,aACE,OAAO9H,KAAKsI,QAGd,WAAYkB,GACV,GAAIxJ,KAAKsI,UAAYkB,EAAO,CAC1BxJ,KAAKsI,QAAUkB,EACfxJ,KAAK+G,KAAK,SAAU,CAACyC,IACrBxJ,KAAK+G,KAAK,OAAQ,CAACyC,KAIvBC,UACE,GAAIzJ,KAAKuI,kBAAoB,EAAG,CAC9BmB,cAAc1J,KAAKuI,iBAErBmB,cAAc1J,KAAKsJ,gBACnBtJ,KAAK2J,aACL,UAAWR,SAAW,YAAa,CACjCA,OAAOS,oBAAoB,eAAgB5J,KAAKkJ,2BAC3C,UAAWG,IAAY,YAAa,CACzCA,EAAQQ,IAAI,QAAQ,IAAM7J,KAAKkJ,uBAEjClJ,KAAKmF,UAAU0E,IAAI,SAAU7J,KAAK4I,yBAClC5I,KAAK+B,IAAI8H,IAAI,SAAU7J,KAAK0I,gBAC5BR,MAAMuB,UAGRK,YACE,IAAK9J,KAAKwH,YAAa,CACrB,EAAaxH,KAAK0H,UAAW1H,KAAKyI,eAClCzI,KAAKwH,YAAc,KAGrBxH,KAAKyH,KAAI,KAEP,MAAMsC,EAAc,OACpB,KAAsBA,EAAarF,GACnC,EAA4BqF,EAAa/J,KAAK+B,KAC9C,EAAW/B,KAAK0H,UAAW,KAAsBqC,IAEjD,MAAMC,EAAe,OACrB,KAAsBA,EAActF,GACpC,EAA4BsF,EAAchK,KAAK+B,KAC/C,EAAW/B,KAAK0H,UAAW,KAAsBsC,IAEjD,MAAMC,EAAwB,OAC9B,KAAsBA,EAAuBtF,GAC7C,EAAW3E,KAAK0H,UAAW,KAAsBuC,IAEjD,MAAM3C,EAAwB,OAC9B,KAAsBA,EAAuB1C,GAC7C,KAA4B0C,EAAuB,KAAwCtH,KAAKmF,UAAW,CAACnF,KAAK+B,IAAI+E,YACrH,EAAW9G,KAAK0H,UAAW,KAAsBJ,OAIrD4C,eAEE,MAAMpI,EAAU,OAChB,KAAsBA,EAAS8C,GAC/B,KAA4B9C,EAAS,KAAwC9B,KAAKmF,UAAW,CAACnF,KAAK+B,IAAI+E,UAAW,IAAIlH,MACtH2H,EAAiBvH,KAAM,KAAsB8B,IAC7C,GAAI9B,KAAKwH,YAAa,CACpB,EAAexH,KAAK0H,UAAW1H,KAAKyI,eACpCzI,KAAKwH,YAAc,OAIvBmC,aACE3J,KAAK+F,cAAgB,MACrB/F,KAAKkK,eACL,GAAIlK,KAAKgG,KAAO,KAAM,CACpBhG,KAAKgG,GAAGuD,SAIZzB,UACE9H,KAAK+F,cAAgB,KACrB,IAAK/F,KAAKqG,aAAerG,KAAKgG,KAAO,KAAM,CACzCF,EAAQ9F,MACRA,KAAK8J","file":"4151.e8bd2b5893531345189c.js?v=e8bd2b5893531345189c","sourcesContent":["/**\n * Mutual exclude for JavaScript.\n *\n * @module mutex\n */\n\n/**\n * @callback mutex\n * @param {function():void} cb Only executed when this mutex is not in the current stack\n * @param {function():void} [elseCb] Executed when this mutex is in the current stack\n */\n\n/**\n * Creates a mutual exclude function with the following property:\n *\n * ```js\n * const mutex = createMutex()\n * mutex(() => {\n *   // This function is immediately executed\n *   mutex(() => {\n *     // This function is not executed, as the mutex is already active.\n *   })\n * })\n * ```\n *\n * @return {mutex} A mutual exclude function\n * @public\n */\nexport const createMutex = () => {\n  let token = true\n  return (f, g) => {\n    if (token) {\n      token = false\n      try {\n        f()\n      } finally {\n        token = true\n      }\n    } else if (g !== undefined) {\n      g()\n    }\n  }\n}\n","/* eslint-env browser */\n\n/**\n * Helpers for cross-tab communication using broadcastchannel with LocalStorage fallback.\n *\n * ```js\n * // In browser window A:\n * broadcastchannel.subscribe('my events', data => console.log(data))\n * broadcastchannel.publish('my events', 'Hello world!') // => A: 'Hello world!' fires synchronously in same tab\n *\n * // In browser window B:\n * broadcastchannel.publish('my events', 'hello from tab B') // => A: 'hello from tab B'\n * ```\n *\n * @module broadcastchannel\n */\n\n// @todo before next major: use Uint8Array instead as buffer object\n\nimport * as map from './map.js'\nimport * as buffer from './buffer.js'\nimport * as storage from './storage.js'\n\n/**\n * @typedef {Object} Channel\n * @property {Set<function(any, any):any>} Channel.subs\n * @property {any} Channel.bc\n */\n\n/**\n * @type {Map<string, Channel>}\n */\nconst channels = new Map()\n\nclass LocalStoragePolyfill {\n  /**\n   * @param {string} room\n   */\n  constructor (room) {\n    this.room = room\n    /**\n     * @type {null|function({data:ArrayBuffer}):void}\n     */\n    this.onmessage = null\n    storage.onChange(e => e.key === room && this.onmessage !== null && this.onmessage({ data: buffer.fromBase64(e.newValue || '') }))\n  }\n\n  /**\n   * @param {ArrayBuffer} buf\n   */\n  postMessage (buf) {\n    storage.varStorage.setItem(this.room, buffer.toBase64(buffer.createUint8ArrayFromArrayBuffer(buf)))\n  }\n}\n\n// Use BroadcastChannel or Polyfill\nconst BC = typeof BroadcastChannel === 'undefined' ? LocalStoragePolyfill : BroadcastChannel\n\n/**\n * @param {string} room\n * @return {Channel}\n */\nconst getChannel = room =>\n  map.setIfUndefined(channels, room, () => {\n    const subs = new Set()\n    const bc = new BC(room)\n    /**\n     * @param {{data:ArrayBuffer}} e\n     */\n    bc.onmessage = e => subs.forEach(sub => sub(e.data, 'broadcastchannel'))\n    return {\n      bc, subs\n    }\n  })\n\n/**\n * Subscribe to global `publish` events.\n *\n * @function\n * @param {string} room\n * @param {function(any, any):any} f\n */\nexport const subscribe = (room, f) => getChannel(room).subs.add(f)\n\n/**\n * Unsubscribe from `publish` global events.\n *\n * @function\n * @param {string} room\n * @param {function(any, any):any} f\n */\nexport const unsubscribe = (room, f) => getChannel(room).subs.delete(f)\n\n/**\n * Publish data to all subscribers (including subscribers on this tab)\n *\n * @function\n * @param {string} room\n * @param {any} data\n * @param {any} [origin]\n */\nexport const publish = (room, data, origin = null) => {\n  const c = getChannel(room)\n  c.bc.postMessage(data)\n  c.subs.forEach(sub => sub(data, origin))\n}\n","/**\n * @module sync-protocol\n */\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as Y from 'yjs'\n\n/**\n * @typedef {Map<number, number>} StateMap\n */\n\n/**\n * Core Yjs defines two message types:\n * • YjsSyncStep1: Includes the State Set of the sending client. When received, the client should reply with YjsSyncStep2.\n * • YjsSyncStep2: Includes all missing structs and the complete delete set. When received, the client is assured that it\n *   received all information from the remote client.\n *\n * In a peer-to-peer network, you may want to introduce a SyncDone message type. Both parties should initiate the connection\n * with SyncStep1. When a client received SyncStep2, it should reply with SyncDone. When the local client received both\n * SyncStep2 and SyncDone, it is assured that it is synced to the remote client.\n *\n * In a client-server model, you want to handle this differently: The client should initiate the connection with SyncStep1.\n * When the server receives SyncStep1, it should reply with SyncStep2 immediately followed by SyncStep1. The client replies\n * with SyncStep2 when it receives SyncStep1. Optionally the server may send a SyncDone after it received SyncStep2, so the\n * client knows that the sync is finished.  There are two reasons for this more elaborated sync model: 1. This protocol can\n * easily be implemented on top of http and websockets. 2. The server shoul only reply to requests, and not initiate them.\n * Therefore it is necesarry that the client initiates the sync.\n *\n * Construction of a message:\n * [messageType : varUint, message definition..]\n *\n * Note: A message does not include information about the room name. This must to be handled by the upper layer protocol!\n *\n * stringify[messageType] stringifies a message definition (messageType is already read from the bufffer)\n */\n\nexport const messageYjsSyncStep1 = 0\nexport const messageYjsSyncStep2 = 1\nexport const messageYjsUpdate = 2\n\n/**\n * Create a sync step 1 message based on the state of the current shared document.\n *\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n */\nexport const writeSyncStep1 = (encoder, doc) => {\n  encoding.writeVarUint(encoder, messageYjsSyncStep1)\n  const sv = Y.encodeStateVector(doc)\n  encoding.writeVarUint8Array(encoder, sv)\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n * @param {Uint8Array} [encodedStateVector]\n */\nexport const writeSyncStep2 = (encoder, doc, encodedStateVector) => {\n  encoding.writeVarUint(encoder, messageYjsSyncStep2)\n  encoding.writeVarUint8Array(encoder, Y.encodeStateAsUpdate(doc, encodedStateVector))\n}\n\n/**\n * Read SyncStep1 message and reply with SyncStep2.\n *\n * @param {decoding.Decoder} decoder The reply to the received message\n * @param {encoding.Encoder} encoder The received message\n * @param {Y.Doc} doc\n */\nexport const readSyncStep1 = (decoder, encoder, doc) =>\n  writeSyncStep2(encoder, doc, decoding.readVarUint8Array(decoder))\n\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readSyncStep2 = (decoder, doc, transactionOrigin) => {\n  try {\n    Y.applyUpdate(doc, decoding.readVarUint8Array(decoder), transactionOrigin)\n  } catch (error) {\n    // This catches errors that are thrown by event handlers\n    console.error('Caught error while handling a Yjs update', error)\n  }\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Uint8Array} update\n */\nexport const writeUpdate = (encoder, update) => {\n  encoding.writeVarUint(encoder, messageYjsUpdate)\n  encoding.writeVarUint8Array(encoder, update)\n}\n\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readUpdate = readSyncStep2\n\n/**\n * @param {decoding.Decoder} decoder A message received from another client\n * @param {encoding.Encoder} encoder The reply message. Will not be sent if empty.\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readSyncMessage = (decoder, encoder, doc, transactionOrigin) => {\n  const messageType = decoding.readVarUint(decoder)\n  switch (messageType) {\n    case messageYjsSyncStep1:\n      readSyncStep1(decoder, encoder, doc)\n      break\n    case messageYjsSyncStep2:\n      readSyncStep2(decoder, doc, transactionOrigin)\n      break\n    case messageYjsUpdate:\n      readUpdate(decoder, doc, transactionOrigin)\n      break\n    default:\n      throw new Error('Unknown message type')\n  }\n  return messageType\n}\n","\nimport * as Y from 'yjs' // eslint-disable-line\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\n\nexport const messagePermissionDenied = 0\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {string} reason\n */\nexport const writePermissionDenied = (encoder, reason) => {\n  encoding.writeVarUint(encoder, messagePermissionDenied)\n  encoding.writeVarString(encoder, reason)\n}\n\n/**\n * @callback PermissionDeniedHandler\n * @param {any} y\n * @param {string} reason\n */\n\n/**\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} y\n * @param {PermissionDeniedHandler} permissionDeniedHandler\n */\nexport const readAuthMessage = (decoder, y, permissionDeniedHandler) => {\n  switch (decoding.readVarUint(decoder)) {\n    case messagePermissionDenied: permissionDeniedHandler(y, decoding.readVarString(decoder))\n  }\n}\n","/**\n * Utility module to work with urls.\n *\n * @module url\n */\n\nimport * as object from './object.js'\n\n/**\n * Parse query parameters from an url.\n *\n * @param {string} url\n * @return {Object<string,string>}\n */\nexport const decodeQueryParams = url => {\n  /**\n   * @type {Object<string,string>}\n   */\n  const query = {}\n  const urlQuerySplit = url.split('?')\n  const pairs = urlQuerySplit[urlQuerySplit.length - 1].split('&')\n  for (var i = 0; i < pairs.length; i++) {\n    const item = pairs[i]\n    if (item.length > 0) {\n      const pair = item.split('=')\n      query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '')\n    }\n  }\n  return query\n}\n\n/**\n * @param {Object<string,string>} params\n * @return {string}\n */\nexport const encodeQueryParams = params =>\n  object.map(params, (val, key) => `${encodeURIComponent(key)}=${encodeURIComponent(val)}`).join('&')\n","/*\nUnlike stated in the LICENSE file, it is not necessary to include the copyright notice and permission notice when you copy code from this file.\n*/\n\n/**\n * @module provider/websocket\n */\n\n/* eslint-env browser */\n\nimport * as Y from 'yjs' // eslint-disable-line\nimport * as bc from 'lib0/broadcastchannel'\nimport * as time from 'lib0/time'\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as syncProtocol from 'y-protocols/sync'\nimport * as authProtocol from 'y-protocols/auth'\nimport * as awarenessProtocol from 'y-protocols/awareness'\nimport * as mutex from 'lib0/mutex'\nimport { Observable } from 'lib0/observable'\nimport * as math from 'lib0/math'\nimport * as url from 'lib0/url'\n\nconst messageSync = 0\nconst messageQueryAwareness = 3\nconst messageAwareness = 1\nconst messageAuth = 2\n\n/**\n *                       encoder,          decoder,          provider,          emitSynced, messageType\n * @type {Array<function(encoding.Encoder, decoding.Decoder, WebsocketProvider, boolean,    number):void>}\n */\nconst messageHandlers = []\n\nmessageHandlers[messageSync] = (encoder, decoder, provider, emitSynced, messageType) => {\n  encoding.writeVarUint(encoder, messageSync)\n  const syncMessageType = syncProtocol.readSyncMessage(decoder, encoder, provider.doc, provider)\n  if (emitSynced && syncMessageType === syncProtocol.messageYjsSyncStep2 && !provider.synced) {\n    provider.synced = true\n  }\n}\n\nmessageHandlers[messageQueryAwareness] = (encoder, decoder, provider, emitSynced, messageType) => {\n  encoding.writeVarUint(encoder, messageAwareness)\n  encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(provider.awareness, Array.from(provider.awareness.getStates().keys())))\n}\n\nmessageHandlers[messageAwareness] = (encoder, decoder, provider, emitSynced, messageType) => {\n  awarenessProtocol.applyAwarenessUpdate(provider.awareness, decoding.readVarUint8Array(decoder), provider)\n}\n\nmessageHandlers[messageAuth] = (encoder, decoder, provider, emitSynced, messageType) => {\n  authProtocol.readAuthMessage(decoder, provider.doc, permissionDeniedHandler)\n}\n\nconst reconnectTimeoutBase = 1200\nconst maxReconnectTimeout = 2500\n// @todo - this should depend on awareness.outdatedTime\nconst messageReconnectTimeout = 30000\n\n/**\n * @param {WebsocketProvider} provider\n * @param {string} reason\n */\nconst permissionDeniedHandler = (provider, reason) => console.warn(`Permission denied to access ${provider.url}.\\n${reason}`)\n\n/**\n * @param {WebsocketProvider} provider\n * @param {Uint8Array} buf\n * @param {boolean} emitSynced\n * @return {encoding.Encoder}\n */\nconst readMessage = (provider, buf, emitSynced) => {\n  const decoder = decoding.createDecoder(buf)\n  const encoder = encoding.createEncoder()\n  const messageType = decoding.readVarUint(decoder)\n  const messageHandler = provider.messageHandlers[messageType]\n  if (/** @type {any} */ (messageHandler)) {\n    messageHandler(encoder, decoder, provider, emitSynced, messageType)\n  } else {\n    console.error('Unable to compute message')\n  }\n  return encoder\n}\n\n/**\n * @param {WebsocketProvider} provider\n */\nconst setupWS = provider => {\n  if (provider.shouldConnect && provider.ws === null) {\n    const websocket = new provider._WS(provider.url)\n    websocket.binaryType = 'arraybuffer'\n    provider.ws = websocket\n    provider.wsconnecting = true\n    provider.wsconnected = false\n    provider.synced = false\n\n    websocket.onmessage = event => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      const encoder = readMessage(provider, new Uint8Array(event.data), true)\n      if (encoding.length(encoder) > 1) {\n        websocket.send(encoding.toUint8Array(encoder))\n      }\n    }\n    websocket.onclose = () => {\n      provider.ws = null\n      provider.wsconnecting = false\n      if (provider.wsconnected) {\n        provider.wsconnected = false\n        provider.synced = false\n        // update awareness (all users except local left)\n        awarenessProtocol.removeAwarenessStates(provider.awareness, Array.from(provider.awareness.getStates().keys()).filter(client => client !== provider.doc.clientID), provider)\n        provider.emit('status', [{\n          status: 'disconnected'\n        }])\n      } else {\n        provider.wsUnsuccessfulReconnects++\n      }\n      // Start with no reconnect timeout and increase timeout by\n      // log10(wsUnsuccessfulReconnects).\n      // The idea is to increase reconnect timeout slowly and have no reconnect\n      // timeout at the beginning (log(1) = 0)\n      setTimeout(setupWS, math.min(math.log10(provider.wsUnsuccessfulReconnects + 1) * reconnectTimeoutBase, maxReconnectTimeout), provider)\n    }\n    websocket.onopen = () => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      provider.wsconnecting = false\n      provider.wsconnected = true\n      provider.wsUnsuccessfulReconnects = 0\n      provider.emit('status', [{\n        status: 'connected'\n      }])\n      // always send sync step 1 when connected\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageSync)\n      syncProtocol.writeSyncStep1(encoder, provider.doc)\n      websocket.send(encoding.toUint8Array(encoder))\n      // broadcast local awareness state\n      if (provider.awareness.getLocalState() !== null) {\n        const encoderAwarenessState = encoding.createEncoder()\n        encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n        encoding.writeVarUint8Array(encoderAwarenessState, awarenessProtocol.encodeAwarenessUpdate(provider.awareness, [provider.doc.clientID]))\n        websocket.send(encoding.toUint8Array(encoderAwarenessState))\n      }\n    }\n\n    provider.emit('status', [{\n      status: 'connecting'\n    }])\n  }\n}\n\n/**\n * @param {WebsocketProvider} provider\n * @param {ArrayBuffer} buf\n */\nconst broadcastMessage = (provider, buf) => {\n  if (provider.wsconnected) {\n    /** @type {WebSocket} */ (provider.ws).send(buf)\n  }\n  if (provider.bcconnected) {\n    provider.mux(() => {\n      bc.publish(provider.bcChannel, buf)\n    })\n  }\n}\n\n/**\n * Websocket Provider for Yjs. Creates a websocket connection to sync the shared document.\n * The document name is attached to the provided url. I.e. the following example\n * creates a websocket connection to http://localhost:1234/my-document-name\n *\n * @example\n *   import * as Y from 'yjs'\n *   import { WebsocketProvider } from 'y-websocket'\n *   const doc = new Y.Doc()\n *   const provider = new WebsocketProvider('http://localhost:1234', 'my-document-name', doc)\n *\n * @extends {Observable<string>}\n */\nexport class WebsocketProvider extends Observable {\n  /**\n   * @param {string} serverUrl\n   * @param {string} roomname\n   * @param {Y.Doc} doc\n   * @param {object} [opts]\n   * @param {boolean} [opts.connect]\n   * @param {awarenessProtocol.Awareness} [opts.awareness]\n   * @param {Object<string,string>} [opts.params]\n   * @param {typeof WebSocket} [opts.WebSocketPolyfill] Optionall provide a WebSocket polyfill\n   * @param {number} [opts.resyncInterval] Request server state every `resyncInterval` milliseconds\n   */\n  constructor (serverUrl, roomname, doc, { connect = true, awareness = new awarenessProtocol.Awareness(doc), params = {}, WebSocketPolyfill = WebSocket, resyncInterval = -1 } = {}) {\n    super()\n    // ensure that url is always ends with /\n    while (serverUrl[serverUrl.length - 1] === '/') {\n      serverUrl = serverUrl.slice(0, serverUrl.length - 1)\n    }\n    const encodedParams = url.encodeQueryParams(params)\n    this.bcChannel = serverUrl + '/' + roomname\n    this.url = serverUrl + '/' + roomname + (encodedParams.length === 0 ? '' : '?' + encodedParams)\n    this.roomname = roomname\n    this.doc = doc\n    this._WS = WebSocketPolyfill\n    this.awareness = awareness\n    this.wsconnected = false\n    this.wsconnecting = false\n    this.bcconnected = false\n    this.wsUnsuccessfulReconnects = 0\n    this.messageHandlers = messageHandlers.slice()\n    this.mux = mutex.createMutex()\n    /**\n     * @type {boolean}\n     */\n    this._synced = false\n    /**\n     * @type {WebSocket?}\n     */\n    this.ws = null\n    this.wsLastMessageReceived = 0\n    /**\n     * Whether to connect to other peers or not\n     * @type {boolean}\n     */\n    this.shouldConnect = connect\n\n    /**\n     * @type {number}\n     */\n    this._resyncInterval = 0\n    if (resyncInterval > 0) {\n      this._resyncInterval = /** @type {any} */ (setInterval(() => {\n        if (this.ws) {\n          // resend sync step 1\n          const encoder = encoding.createEncoder()\n          encoding.writeVarUint(encoder, messageSync)\n          syncProtocol.writeSyncStep1(encoder, doc)\n          this.ws.send(encoding.toUint8Array(encoder))\n        }\n      }, resyncInterval))\n    }\n\n    /**\n     * @param {ArrayBuffer} data\n     */\n    this._bcSubscriber = data => {\n      this.mux(() => {\n        const encoder = readMessage(this, new Uint8Array(data), false)\n        if (encoding.length(encoder) > 1) {\n          bc.publish(this.bcChannel, encoding.toUint8Array(encoder))\n        }\n      })\n    }\n    /**\n     * Listens to Yjs updates and sends them to remote peers (ws and broadcastchannel)\n     * @param {Uint8Array} update\n     * @param {any} origin\n     */\n    this._updateHandler = (update, origin) => {\n      if (origin !== this) {\n        const encoder = encoding.createEncoder()\n        encoding.writeVarUint(encoder, messageSync)\n        syncProtocol.writeUpdate(encoder, update)\n        broadcastMessage(this, encoding.toUint8Array(encoder))\n      }\n    }\n    this.doc.on('update', this._updateHandler)\n    /**\n     * @param {any} changed\n     * @param {any} origin\n     */\n    this._awarenessUpdateHandler = ({ added, updated, removed }, origin) => {\n      const changedClients = added.concat(updated).concat(removed)\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageAwareness)\n      encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(awareness, changedClients))\n      broadcastMessage(this, encoding.toUint8Array(encoder))\n    }\n    this._beforeUnloadHandler = () => {\n      awarenessProtocol.removeAwarenessStates(this.awareness, [doc.clientID], 'window unload')\n    }\n    if (typeof window !== 'undefined') {\n      window.addEventListener('beforeunload', this._beforeUnloadHandler)\n    } else if (typeof process !== 'undefined') {\n      process.on('exit', () => this._beforeUnloadHandler)\n    }\n    awareness.on('update', this._awarenessUpdateHandler)\n    this._checkInterval = /** @type {any} */ (setInterval(() => {\n      if (this.wsconnected && messageReconnectTimeout < time.getUnixTime() - this.wsLastMessageReceived) {\n        // no message received in a long time - not even your own awareness\n        // updates (which are updated every 15 seconds)\n        /** @type {WebSocket} */ (this.ws).close()\n      }\n    }, messageReconnectTimeout / 10))\n    if (connect) {\n      this.connect()\n    }\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get synced () {\n    return this._synced\n  }\n\n  set synced (state) {\n    if (this._synced !== state) {\n      this._synced = state\n      this.emit('synced', [state])\n      this.emit('sync', [state])\n    }\n  }\n\n  destroy () {\n    if (this._resyncInterval !== 0) {\n      clearInterval(this._resyncInterval)\n    }\n    clearInterval(this._checkInterval)\n    this.disconnect()\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('beforeunload', this._beforeUnloadHandler)\n    } else if (typeof process !== 'undefined') {\n      process.off('exit', () => this._beforeUnloadHandler)\n    }\n    this.awareness.off('update', this._awarenessUpdateHandler)\n    this.doc.off('update', this._updateHandler)\n    super.destroy()\n  }\n\n  connectBc () {\n    if (!this.bcconnected) {\n      bc.subscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = true\n    }\n    // send sync step1 to bc\n    this.mux(() => {\n      // write sync step 1\n      const encoderSync = encoding.createEncoder()\n      encoding.writeVarUint(encoderSync, messageSync)\n      syncProtocol.writeSyncStep1(encoderSync, this.doc)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderSync))\n      // broadcast local state\n      const encoderState = encoding.createEncoder()\n      encoding.writeVarUint(encoderState, messageSync)\n      syncProtocol.writeSyncStep2(encoderState, this.doc)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderState))\n      // write queryAwareness\n      const encoderAwarenessQuery = encoding.createEncoder()\n      encoding.writeVarUint(encoderAwarenessQuery, messageQueryAwareness)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderAwarenessQuery))\n      // broadcast local awareness state\n      const encoderAwarenessState = encoding.createEncoder()\n      encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n      encoding.writeVarUint8Array(encoderAwarenessState, awarenessProtocol.encodeAwarenessUpdate(this.awareness, [this.doc.clientID]))\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderAwarenessState))\n    })\n  }\n\n  disconnectBc () {\n    // broadcast message with local awareness state set to null (indicating disconnect)\n    const encoder = encoding.createEncoder()\n    encoding.writeVarUint(encoder, messageAwareness)\n    encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(this.awareness, [this.doc.clientID], new Map()))\n    broadcastMessage(this, encoding.toUint8Array(encoder))\n    if (this.bcconnected) {\n      bc.unsubscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = false\n    }\n  }\n\n  disconnect () {\n    this.shouldConnect = false\n    this.disconnectBc()\n    if (this.ws !== null) {\n      this.ws.close()\n    }\n  }\n\n  connect () {\n    this.shouldConnect = true\n    if (!this.wsconnected && this.ws === null) {\n      setupWS(this)\n      this.connectBc()\n    }\n  }\n}\n"],"sourceRoot":""}