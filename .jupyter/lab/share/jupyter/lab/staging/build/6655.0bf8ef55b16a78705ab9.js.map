{"version":3,"sources":["webpack://@jupyterlab/application-top/./node_modules/@jupyter/ydoc/lib/ymodels.js","webpack://@jupyterlab/application-top/./node_modules/@jupyter/ydoc/lib/utils.js"],"names":["YDocument","constructor","this","ydoc","ystate","getMap","undoManager","trackedOrigins","Set","doc","awareness","onStateChanged","event","stateChange","Array","keysChanged","forEach","key","change","changes","keys","get","push","name","oldValue","newValue","_changed","emit","Signal","_isDisposed","observe","JSONExt","toJSON","canUndo","undoStack","length","canRedo","redoStack","dispose","unobserve","destroy","getState","value","setState","set","undo","redo","clearUndoHistory","clear","transact","f","undoable","YFile","super","ysource","getText","_modelObserver","sourceChange","delta","addToScope","getSource","v","setSource","isDisposed","toString","ytext","delete","insert","updateSource","start","end","createCellModelFromSharedType","type","options","YCodeCell","YMarkdownCell","YRawCell","Error","createCell","cell","notebook","_a","_b","ymodel","cell_type","id","UUID","ycell","attachments","setAttachments","youtputs","cCell","execution_count","outputs","setOutputs","metadata","setMetadata","source","join","createStandaloneCell","YBaseCell","prototype","events","getChanges","_metadataChanged","_notebook","_disposed","_undoManager","_ysource","_prevSourceLength","_awareness","getArray","observeDeep","_c","getId","getMetadata","disableDocumentWideUndoRedo","setUndoManager","unobserveDeep","deleteMetadata","allMetadata","jupyter","outputs_hidden","Object","collapsed","undefined","TypeError","clone","sourceEvent","find","target","modelEvent","has","metadataChange","oldKeys","newKeys","concat","includes","createStandalone","_youtputs","count","getOutputs","toArray","updateOutputs","fin","outputEvent","outputsChange","executionCountChange","YAttachmentCell","getAttachments","YNotebook","ymeta","_onMetaChanged","nbformatChanged","nbformat","nbformat_minor","_onYCellsChanged","added","item","content","_ycellMapping","c","deleted","model","index","cellsChange","d","insertedCells","map","cells","splice","retain","_ycells","WeakMap","_disableDocumentWideUndoRedo","getCell","addCell","insertCell","insertCells","yCells","moveCell","fromIndex","toIndex","moveCells","n","clones","fill","_","idx","deleteCell","deleteCellRange","from","to","meta","update","updateMetadata","fromJSON","useId","ycells","pruneCellId","raw","convertYMapEventToMapChange","Map","action","createMutex","token"],"mappings":"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","file":"6655.0bf8ef55b16a78705ab9.js?v=0bf8ef55b16a78705ab9","sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { JSONExt, UUID } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { Awareness } from 'y-protocols/awareness';\nimport * as Y from 'yjs';\n/**\n * Generic shareable document.\n */\nexport class YDocument {\n    constructor() {\n        /**\n         * YJS document\n         */\n        this.ydoc = new Y.Doc();\n        /**\n         * Shared state\n         */\n        this.ystate = this.ydoc.getMap('state');\n        /**\n         * YJS document undo manager\n         */\n        this.undoManager = new Y.UndoManager([], {\n            trackedOrigins: new Set([this]),\n            doc: this.ydoc\n        });\n        /**\n         * Shared awareness\n         */\n        this.awareness = new Awareness(this.ydoc);\n        /**\n         * Handle a change to the ystate.\n         */\n        this.onStateChanged = (event) => {\n            const stateChange = new Array();\n            event.keysChanged.forEach(key => {\n                const change = event.changes.keys.get(key);\n                if (change) {\n                    stateChange.push({\n                        name: key,\n                        oldValue: change.oldValue,\n                        newValue: this.ystate.get(key)\n                    });\n                }\n            });\n            this._changed.emit({ stateChange });\n        };\n        this._changed = new Signal(this);\n        this._isDisposed = false;\n        this.ystate.observe(this.onStateChanged);\n    }\n    /**\n     * The changed signal.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Whether the document is disposed or not.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Document state\n     */\n    get state() {\n        return JSONExt.deepCopy(this.ystate.toJSON());\n    }\n    /**\n     * Whether the object can undo changes.\n     */\n    canUndo() {\n        return this.undoManager.undoStack.length > 0;\n    }\n    /**\n     * Whether the object can redo changes.\n     */\n    canRedo() {\n        return this.undoManager.redoStack.length > 0;\n    }\n    /**\n     * Dispose of the resources.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this.ystate.unobserve(this.onStateChanged);\n        this.awareness.destroy();\n        this.undoManager.destroy();\n        this.ydoc.destroy();\n        Signal.clearData(this);\n    }\n    /**\n     * Get the value for a state attribute\n     *\n     * @param key Key to get\n     */\n    getState(key) {\n        const value = this.ystate.get(key);\n        return typeof value === 'undefined'\n            ? value\n            : JSONExt.deepCopy(value);\n    }\n    /**\n     * Set the value of a state attribute\n     *\n     * @param key Key to set\n     * @param value New attribute value\n     */\n    setState(key, value) {\n        if (!JSONExt.deepEqual(this.ystate.get(key), value)) {\n            this.ystate.set(key, value);\n        }\n    }\n    /**\n     * Undo an operation.\n     */\n    undo() {\n        this.undoManager.undo();\n    }\n    /**\n     * Redo an operation.\n     */\n    redo() {\n        this.undoManager.redo();\n    }\n    /**\n     * Clear the change stack.\n     */\n    clearUndoHistory() {\n        this.undoManager.clear();\n    }\n    /**\n     * Perform a transaction. While the function f is called, all changes to the shared\n     * document are bundled into a single event.\n     */\n    transact(f, undoable = true) {\n        this.ydoc.transact(f, undoable ? this : null);\n    }\n}\n/**\n * Shareable text file.\n */\nexport class YFile extends YDocument {\n    /**\n     * Create a new file\n     *\n     * #### Notes\n     * The document is empty and must be populated\n     */\n    constructor() {\n        super();\n        /**\n         * YJS file text.\n         */\n        this.ysource = this.ydoc.getText('source');\n        /**\n         * Handle a change to the ymodel.\n         */\n        this._modelObserver = (event) => {\n            this._changed.emit({ sourceChange: event.changes.delta });\n        };\n        this.undoManager.addToScope(this.ysource);\n        this.ysource.observe(this._modelObserver);\n    }\n    /**\n     * File text\n     */\n    get source() {\n        return this.getSource();\n    }\n    set source(v) {\n        this.setSource(v);\n    }\n    /**\n     * Dispose of the resources.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this.ysource.unobserve(this._modelObserver);\n        super.dispose();\n    }\n    /**\n     * Get the file text.\n     *\n     * @returns File text.\n     */\n    getSource() {\n        return this.ysource.toString();\n    }\n    /**\n     * Set the file text.\n     *\n     * @param value New text\n     */\n    setSource(value) {\n        this.transact(() => {\n            const ytext = this.ysource;\n            ytext.delete(0, ytext.length);\n            ytext.insert(0, value);\n        });\n    }\n    /**\n     * Replace content from `start' to `end` with `value`.\n     *\n     * @param start: The start index of the range to replace (inclusive).\n     * @param end: The end index of the range to replace (exclusive).\n     * @param value: New source (optional).\n     */\n    updateSource(start, end, value = '') {\n        this.transact(() => {\n            const ysource = this.ysource;\n            // insert and then delete.\n            // This ensures that the cursor position is adjusted after the replaced content.\n            ysource.insert(start, value);\n            ysource.delete(start + value.length, end - start);\n        });\n    }\n}\n/**\n * Create a new shared cell model given the YJS shared type.\n */\nconst createCellModelFromSharedType = (type, options = {}) => {\n    switch (type.get('cell_type')) {\n        case 'code':\n            return new YCodeCell(type, type.get('source'), type.get('outputs'), options);\n        case 'markdown':\n            return new YMarkdownCell(type, type.get('source'), options);\n        case 'raw':\n            return new YRawCell(type, type.get('source'), options);\n        default:\n            throw new Error('Found unknown cell type');\n    }\n};\n/**\n * Create a new cell that can be inserted in an existing shared model.\n *\n * If no notebook is specified the cell will be standalone.\n *\n * @param cell Cell JSON representation\n * @param notebook Notebook to which the cell will be added\n */\nconst createCell = (cell, notebook) => {\n    var _a, _b;\n    const ymodel = new Y.Map();\n    const ysource = new Y.Text();\n    ymodel.set('source', ysource);\n    ymodel.set('metadata', {});\n    ymodel.set('cell_type', cell.cell_type);\n    ymodel.set('id', (_a = cell.id) !== null && _a !== void 0 ? _a : UUID.uuid4());\n    let ycell;\n    switch (cell.cell_type) {\n        case 'markdown': {\n            ycell = new YMarkdownCell(ymodel, ysource, { notebook });\n            if (cell.attachments != null) {\n                ycell.setAttachments(cell.attachments);\n            }\n            break;\n        }\n        case 'code': {\n            const youtputs = new Y.Array();\n            ymodel.set('outputs', youtputs);\n            ycell = new YCodeCell(ymodel, ysource, youtputs, {\n                notebook\n            });\n            const cCell = cell;\n            ycell.execution_count = (_b = cCell.execution_count) !== null && _b !== void 0 ? _b : null;\n            if (cCell.outputs) {\n                ycell.setOutputs(cCell.outputs);\n            }\n            break;\n        }\n        default: {\n            // raw\n            ycell = new YRawCell(ymodel, ysource, { notebook });\n            if (cell.attachments) {\n                ycell.setAttachments(cell.attachments);\n            }\n            break;\n        }\n    }\n    if (cell.metadata != null) {\n        ycell.setMetadata(cell.metadata);\n    }\n    if (cell.source != null) {\n        ycell.setSource(typeof cell.source === 'string' ? cell.source : cell.source.join('\\n'));\n    }\n    return ycell;\n};\n/**\n * Create a new cell that cannot be inserted in an existing shared model.\n *\n * @param cell Cell JSON representation\n */\nexport const createStandaloneCell = (cell) => createCell(cell);\nexport class YBaseCell {\n    /**\n     * Create a new YCell that works standalone. It cannot be\n     * inserted into a YNotebook because the Yjs model is already\n     * attached to an anonymous Y.Doc instance.\n     */\n    static createStandalone(id) {\n        return createCell({ id, cell_type: this.prototype.cell_type });\n    }\n    /**\n     * Base cell constructor\n     *\n     * ### Notes\n     * Don't use the constructor directly - prefer using ``YNotebook.insertCell``\n     *\n     * The ``ysource`` is needed because ``ymodel.get('source')`` will\n     * not return the real source if the model is not yet attached to\n     * a document. Requesting it explicitly allows to introspect a non-empty\n     * source before the cell is attached to the document.\n     *\n     * @param ymodel Cell map\n     * @param ysource Cell source\n     * @param options { notebook?: The notebook the cell is attached to }\n     */\n    constructor(ymodel, ysource, options = {}) {\n        /**\n         * Handle a change to the ymodel.\n         */\n        this._modelObserver = (events) => {\n            this._changed.emit(this.getChanges(events));\n        };\n        this._metadataChanged = new Signal(this);\n        /**\n         * The notebook that this cell belongs to.\n         */\n        this._notebook = null;\n        this._changed = new Signal(this);\n        this._disposed = new Signal(this);\n        this._isDisposed = false;\n        this._undoManager = null;\n        this.ymodel = ymodel;\n        this._ysource = ysource;\n        this._prevSourceLength = ysource ? ysource.length : 0;\n        this._notebook = null;\n        this._awareness = null;\n        this._undoManager = null;\n        if (options.notebook) {\n            this._notebook = options.notebook;\n            // We cannot create a undo manager with the cell not yet attached in the notebook\n            // so we defer that to the notebook insertCell method\n        }\n        else {\n            // Standalone cell\n            const doc = new Y.Doc();\n            doc.getArray().insert(0, [this.ymodel]);\n            this._awareness = new Awareness(doc);\n            this._undoManager = new Y.UndoManager([this.ymodel], {\n                trackedOrigins: new Set([this])\n            });\n        }\n        this.ymodel.observeDeep(this._modelObserver);\n    }\n    /**\n     * Cell notebook awareness or null if the cell is standalone.\n     */\n    get awareness() {\n        var _a, _b, _c;\n        return (_c = (_a = this._awareness) !== null && _a !== void 0 ? _a : (_b = this.notebook) === null || _b === void 0 ? void 0 : _b.awareness) !== null && _c !== void 0 ? _c : null;\n    }\n    /**\n     * The type of the cell.\n     */\n    get cell_type() {\n        throw new Error('A YBaseCell must not be constructed');\n    }\n    /**\n     * The changed signal.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Signal emitted when the cell is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Cell id\n     */\n    get id() {\n        return this.getId();\n    }\n    /**\n     * Whether the model has been disposed or not.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Whether the cell is standalone or not.\n     *\n     * If the cell is standalone. It cannot be\n     * inserted into a YNotebook because the Yjs model is already\n     * attached to an anonymous Y.Doc instance.\n     */\n    get isStandalone() {\n        return this._notebook !== null;\n    }\n    /**\n     * Cell metadata.\n     */\n    get metadata() {\n        return this.getMetadata();\n    }\n    set metadata(v) {\n        this.setMetadata(v);\n    }\n    /**\n     * Signal triggered when the cell metadata changes.\n     */\n    get metadataChanged() {\n        return this._metadataChanged;\n    }\n    /**\n     * The notebook that this cell belongs to.\n     */\n    get notebook() {\n        return this._notebook;\n    }\n    /**\n     * Cell input content.\n     */\n    get source() {\n        return this.getSource();\n    }\n    set source(v) {\n        this.setSource(v);\n    }\n    /**\n     * The cell undo manager.\n     */\n    get undoManager() {\n        var _a;\n        if (!this.notebook) {\n            return this._undoManager;\n        }\n        return ((_a = this.notebook) === null || _a === void 0 ? void 0 : _a.disableDocumentWideUndoRedo)\n            ? this._undoManager\n            : this.notebook.undoManager;\n    }\n    /**\n     * Defer setting the undo manager as it requires the\n     * cell to be attached to the notebook Y document.\n     */\n    setUndoManager() {\n        if (this._undoManager) {\n            throw new Error('The cell undo manager is already set.');\n        }\n        if (this._notebook && this._notebook.disableDocumentWideUndoRedo) {\n            this._undoManager = new Y.UndoManager([this.ymodel], {\n                trackedOrigins: new Set([this])\n            });\n        }\n    }\n    get ysource() {\n        return this._ysource;\n    }\n    /**\n     * Whether the object can undo changes.\n     */\n    canUndo() {\n        return !!this.undoManager && this.undoManager.undoStack.length > 0;\n    }\n    /**\n     * Whether the object can redo changes.\n     */\n    canRedo() {\n        return !!this.undoManager && this.undoManager.redoStack.length > 0;\n    }\n    /**\n     * Clear the change stack.\n     */\n    clearUndoHistory() {\n        var _a;\n        (_a = this.undoManager) === null || _a === void 0 ? void 0 : _a.clear();\n    }\n    /**\n     * Undo an operation.\n     */\n    undo() {\n        var _a;\n        (_a = this.undoManager) === null || _a === void 0 ? void 0 : _a.undo();\n    }\n    /**\n     * Redo an operation.\n     */\n    redo() {\n        var _a;\n        (_a = this.undoManager) === null || _a === void 0 ? void 0 : _a.redo();\n    }\n    /**\n     * Dispose of the resources.\n     */\n    dispose() {\n        var _a;\n        if (this._isDisposed)\n            return;\n        this._isDisposed = true;\n        this.ymodel.unobserveDeep(this._modelObserver);\n        if (this._awareness) {\n            // A new document is created for standalone cell.\n            const doc = this._awareness.doc;\n            this._awareness.destroy();\n            doc.destroy();\n        }\n        if (this._undoManager) {\n            // Be sure to not destroy the document undo manager.\n            if (this._undoManager === ((_a = this.notebook) === null || _a === void 0 ? void 0 : _a.undoManager)) {\n                this._undoManager = null;\n            }\n            else {\n                this._undoManager.destroy();\n            }\n        }\n        this._disposed.emit();\n        Signal.clearData(this);\n    }\n    /**\n     * Get cell id.\n     *\n     * @returns Cell id\n     */\n    getId() {\n        return this.ymodel.get('id');\n    }\n    /**\n     * Gets cell's source.\n     *\n     * @returns Cell's source.\n     */\n    getSource() {\n        return this.ysource.toString();\n    }\n    /**\n     * Sets cell's source.\n     *\n     * @param value: New source.\n     */\n    setSource(value) {\n        this.transact(() => {\n            this.ysource.delete(0, this.ysource.length);\n            this.ysource.insert(0, value);\n        });\n        // @todo Do we need proper replace semantic? This leads to issues in editor bindings because they don't switch source.\n        // this.ymodel.set('source', new Y.Text(value));\n    }\n    /**\n     * Replace content from `start' to `end` with `value`.\n     *\n     * @param start: The start index of the range to replace (inclusive).\n     *\n     * @param end: The end index of the range to replace (exclusive).\n     *\n     * @param value: New source (optional).\n     */\n    updateSource(start, end, value = '') {\n        this.transact(() => {\n            const ysource = this.ysource;\n            // insert and then delete.\n            // This ensures that the cursor position is adjusted after the replaced content.\n            ysource.insert(start, value);\n            ysource.delete(start + value.length, end - start);\n        });\n    }\n    /**\n     * Delete a metadata cell.\n     *\n     * @param key The key to delete\n     */\n    deleteMetadata(key) {\n        if (typeof this.getMetadata(key) === 'undefined') {\n            return;\n        }\n        const allMetadata = JSONExt.deepCopy(this.ymodel.get('metadata'));\n        delete allMetadata[key];\n        if (key === 'collapsed' && allMetadata.jupyter) {\n            delete allMetadata.jupyter.outputs_hidden;\n            if (Object.keys(allMetadata.jupyter).length === 0) {\n                delete allMetadata.jupyter;\n            }\n        }\n        else if (key === 'jupyter') {\n            delete allMetadata.collapsed;\n        }\n        this.setMetadata(allMetadata);\n    }\n    getMetadata(key) {\n        var _a;\n        // Transiently the metadata can be missing - like during destruction\n        const metadata = (_a = this.ymodel.get('metadata')) !== null && _a !== void 0 ? _a : {};\n        if (typeof key === 'string') {\n            const value = metadata[key];\n            return typeof value === 'undefined'\n                ? undefined // undefined is converted to `{}` by `JSONExt.deepCopy`\n                : JSONExt.deepCopy(metadata[key]);\n        }\n        else {\n            return JSONExt.deepCopy(metadata);\n        }\n    }\n    setMetadata(metadata, value) {\n        var _a, _b, _c;\n        if (typeof metadata === 'string') {\n            if (typeof value === 'undefined') {\n                throw new TypeError(`Metadata value for ${metadata} cannot be 'undefined'; use deleteMetadata.`);\n            }\n            const key = metadata;\n            // Only set metadata if we change something to avoid infinite\n            // loop of signal changes.\n            if (JSONExt.deepEqual((_a = this.getMetadata(key)) !== null && _a !== void 0 ? _a : null, value)) {\n                return;\n            }\n            const clone = this.getMetadata();\n            clone[key] = value;\n            if (key === 'collapsed' && ((_b = clone.jupyter) === null || _b === void 0 ? void 0 : _b.outputs_hidden) !== value) {\n                clone.jupyter = {\n                    ...clone.jupyter,\n                    outputs_hidden: value\n                };\n            }\n            else if (key === 'jupyter') {\n                if (typeof value['outputs_hidden'] !== 'undefined') {\n                    if (clone.collapsed !== value['outputs_hidden']) {\n                        clone.collapsed = value['outputs_hidden'];\n                    }\n                }\n                else {\n                    delete clone.collapsed;\n                }\n            }\n            this.transact(() => {\n                this.ymodel.set('metadata', clone);\n            });\n        }\n        else {\n            const clone = JSONExt.deepCopy(metadata);\n            if (clone.collapsed != null) {\n                clone.jupyter = clone.jupyter || {};\n                clone.jupyter.outputs_hidden = clone.collapsed;\n            }\n            else if (((_c = clone === null || clone === void 0 ? void 0 : clone.jupyter) === null || _c === void 0 ? void 0 : _c.outputs_hidden) != null) {\n                clone.collapsed = clone.jupyter.outputs_hidden;\n            }\n            if (!JSONExt.deepEqual(clone, this.getMetadata())) {\n                this.transact(() => {\n                    this.ymodel.set('metadata', clone);\n                });\n            }\n        }\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return {\n            id: this.getId(),\n            cell_type: this.cell_type,\n            source: this.getSource(),\n            metadata: this.getMetadata()\n        };\n    }\n    /**\n     * Perform a transaction. While the function f is called, all changes to the shared\n     * document are bundled into a single event.\n     */\n    transact(f, undoable = true) {\n        this.notebook && undoable\n            ? this.notebook.transact(f)\n            : this.ymodel.doc == null\n                ? f()\n                : this.ymodel.doc.transact(f, this);\n    }\n    /**\n     * Extract changes from YJS events\n     *\n     * @param events YJS events\n     * @returns Cell changes\n     */\n    getChanges(events) {\n        var _a;\n        const changes = {};\n        const sourceEvent = events.find(event => event.target === this.ymodel.get('source'));\n        if (sourceEvent) {\n            changes.sourceChange = sourceEvent.changes.delta;\n        }\n        const modelEvent = events.find(event => event.target === this.ymodel);\n        if (modelEvent && modelEvent.keysChanged.has('metadata')) {\n            const change = modelEvent.changes.keys.get('metadata');\n            const metadataChange = (changes.metadataChange = {\n                oldValue: (change === null || change === void 0 ? void 0 : change.oldValue) ? change.oldValue : undefined,\n                newValue: this.getMetadata()\n            });\n            const oldValue = (_a = metadataChange.oldValue) !== null && _a !== void 0 ? _a : {};\n            const oldKeys = Object.keys(oldValue);\n            const newKeys = Object.keys(metadataChange.newValue);\n            for (let key of new Set(oldKeys.concat(newKeys))) {\n                if (!oldKeys.includes(key)) {\n                    this._metadataChanged.emit({\n                        key,\n                        newValue: metadataChange.newValue[key],\n                        type: 'add'\n                    });\n                }\n                else if (!newKeys.includes(key)) {\n                    this._metadataChanged.emit({\n                        key,\n                        oldValue: metadataChange.oldValue[key],\n                        type: 'remove'\n                    });\n                }\n                else if (!JSONExt.deepEqual(oldValue[key], metadataChange.newValue[key])) {\n                    this._metadataChanged.emit({\n                        key,\n                        newValue: metadataChange.newValue[key],\n                        oldValue: metadataChange.oldValue[key],\n                        type: 'change'\n                    });\n                }\n            }\n        }\n        // The model allows us to replace the complete source with a new string. We express this in the Delta format\n        // as a replace of the complete string.\n        const ysource = this.ymodel.get('source');\n        if (modelEvent && modelEvent.keysChanged.has('source')) {\n            changes.sourceChange = [\n                { delete: this._prevSourceLength },\n                { insert: ysource.toString() }\n            ];\n        }\n        this._prevSourceLength = ysource.length;\n        return changes;\n    }\n}\n/**\n * Shareable code cell.\n */\nexport class YCodeCell extends YBaseCell {\n    /**\n     * Create a new YCodeCell that works standalone. It cannot be\n     * inserted into a YNotebook because the Yjs model is already\n     * attached to an anonymous Y.Doc instance.\n     */\n    static createStandalone(id) {\n        return super.createStandalone(id);\n    }\n    /**\n     * Code cell constructor\n     *\n     * ### Notes\n     * Don't use the constructor directly - prefer using ``YNotebook.insertCell``\n     *\n     * The ``ysource`` is needed because ``ymodel.get('source')`` will\n     * not return the real source if the model is not yet attached to\n     * a document. Requesting it explicitly allows to introspect a non-empty\n     * source before the cell is attached to the document.\n     *\n     * @param ymodel Cell map\n     * @param ysource Cell source\n     * @param youtputs Code cell outputs\n     * @param options { notebook?: The notebook the cell is attached to }\n     */\n    constructor(ymodel, ysource, youtputs, options = {}) {\n        super(ymodel, ysource, options);\n        this._youtputs = youtputs;\n    }\n    /**\n     * The type of the cell.\n     */\n    get cell_type() {\n        return 'code';\n    }\n    /**\n     * The code cell's prompt number. Will be null if the cell has not been run.\n     */\n    get execution_count() {\n        return this.ymodel.get('execution_count') || null;\n    }\n    set execution_count(count) {\n        // Do not use `this.execution_count`. When initializing the\n        // cell, we need to set execution_count to `null` if we compare\n        // using `this.execution_count` it will return `null` and we will\n        // never initialize it\n        if (this.ymodel.get('execution_count') !== count) {\n            this.transact(() => {\n                this.ymodel.set('execution_count', count);\n            });\n        }\n    }\n    /**\n     * Cell outputs.\n     */\n    get outputs() {\n        return this.getOutputs();\n    }\n    set outputs(v) {\n        this.setOutputs(v);\n    }\n    /**\n     * Execution, display, or stream outputs.\n     */\n    getOutputs() {\n        return JSONExt.deepCopy(this._youtputs.toArray());\n    }\n    /**\n     * Replace all outputs.\n     */\n    setOutputs(outputs) {\n        this.transact(() => {\n            this._youtputs.delete(0, this._youtputs.length);\n            this._youtputs.insert(0, outputs);\n        }, false);\n    }\n    /**\n     * Replace content from `start' to `end` with `outputs`.\n     *\n     * @param start: The start index of the range to replace (inclusive).\n     *\n     * @param end: The end index of the range to replace (exclusive).\n     *\n     * @param outputs: New outputs (optional).\n     */\n    updateOutputs(start, end, outputs = []) {\n        const fin = end < this._youtputs.length ? end - start : this._youtputs.length - start;\n        this.transact(() => {\n            this._youtputs.delete(start, fin);\n            this._youtputs.insert(start, outputs);\n        }, false);\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            outputs: this.getOutputs(),\n            execution_count: this.execution_count\n        };\n    }\n    /**\n     * Extract changes from YJS events\n     *\n     * @param events YJS events\n     * @returns Cell changes\n     */\n    getChanges(events) {\n        const changes = super.getChanges(events);\n        const outputEvent = events.find(event => event.target === this.ymodel.get('outputs'));\n        if (outputEvent) {\n            changes.outputsChange = outputEvent.changes.delta;\n        }\n        const modelEvent = events.find(event => event.target === this.ymodel);\n        if (modelEvent && modelEvent.keysChanged.has('execution_count')) {\n            const change = modelEvent.changes.keys.get('execution_count');\n            changes.executionCountChange = {\n                oldValue: change.oldValue,\n                newValue: this.ymodel.get('execution_count')\n            };\n        }\n        return changes;\n    }\n}\nclass YAttachmentCell extends YBaseCell {\n    /**\n     * Cell attachments\n     */\n    get attachments() {\n        return this.getAttachments();\n    }\n    set attachments(v) {\n        this.setAttachments(v);\n    }\n    /**\n     * Gets the cell attachments.\n     *\n     * @returns The cell attachments.\n     */\n    getAttachments() {\n        return this.ymodel.get('attachments');\n    }\n    /**\n     * Sets the cell attachments\n     *\n     * @param attachments: The cell attachments.\n     */\n    setAttachments(attachments) {\n        this.transact(() => {\n            if (attachments == null) {\n                this.ymodel.delete('attachments');\n            }\n            else {\n                this.ymodel.set('attachments', attachments);\n            }\n        });\n    }\n    /**\n     * Extract changes from YJS events\n     *\n     * @param events YJS events\n     * @returns Cell changes\n     */\n    getChanges(events) {\n        const changes = super.getChanges(events);\n        const modelEvent = events.find(event => event.target === this.ymodel);\n        if (modelEvent && modelEvent.keysChanged.has('attachments')) {\n            const change = modelEvent.changes.keys.get('attachments');\n            changes.executionCountChange = {\n                oldValue: change.oldValue,\n                newValue: this.ymodel.get('attachments')\n            };\n        }\n        return changes;\n    }\n}\n/**\n * Shareable raw cell.\n */\nexport class YRawCell extends YAttachmentCell {\n    /**\n     * Create a new YRawCell that works standalone. It cannot be\n     * inserted into a YNotebook because the Yjs model is already\n     * attached to an anonymous Y.Doc instance.\n     */\n    static createStandalone(id) {\n        return super.createStandalone(id);\n    }\n    /**\n     * String identifying the type of cell.\n     */\n    get cell_type() {\n        return 'raw';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return {\n            id: this.getId(),\n            cell_type: 'raw',\n            source: this.getSource(),\n            metadata: this.getMetadata(),\n            attachments: this.getAttachments()\n        };\n    }\n}\n/**\n * Shareable markdown cell.\n */\nexport class YMarkdownCell extends YAttachmentCell {\n    /**\n     * Create a new YMarkdownCell that works standalone. It cannot be\n     * inserted into a YNotebook because the Yjs model is already\n     * attached to an anonymous Y.Doc instance.\n     */\n    static createStandalone(id) {\n        return super.createStandalone(id);\n    }\n    /**\n     * String identifying the type of cell.\n     */\n    get cell_type() {\n        return 'markdown';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return {\n            id: this.getId(),\n            cell_type: 'markdown',\n            source: this.getSource(),\n            metadata: this.getMetadata(),\n            attachments: this.getAttachments()\n        };\n    }\n}\n/**\n * Shared implementation of the Shared Document types.\n *\n * Shared cells can be inserted into a SharedNotebook.\n * Shared cells only start emitting events when they are connected to a SharedNotebook.\n *\n * \"Standalone\" cells must not be inserted into a (Shared)Notebook.\n * Standalone cells emit events immediately after they have been created, but they must not\n * be included into a (Shared)Notebook.\n */\nexport class YNotebook extends YDocument {\n    /**\n     * Create a new notebook\n     *\n     * #### Notes\n     * The document is empty and must be populated\n     *\n     * @param options\n     */\n    constructor(options = {}) {\n        var _a;\n        super();\n        /**\n         * YJS map for the notebook metadata\n         */\n        this.ymeta = this.ydoc.getMap('meta');\n        /**\n         * Handle a change to the ystate.\n         */\n        this._onMetaChanged = (event) => {\n            var _a;\n            if (event.keysChanged.has('metadata')) {\n                const change = event.changes.keys.get('metadata');\n                const metadataChange = {\n                    oldValue: (change === null || change === void 0 ? void 0 : change.oldValue) ? change.oldValue : undefined,\n                    newValue: this.getMetadata()\n                };\n                const oldValue = (_a = metadataChange.oldValue) !== null && _a !== void 0 ? _a : {};\n                const oldKeys = Object.keys(oldValue);\n                const newKeys = Object.keys(metadataChange.newValue);\n                for (let key of new Set(oldKeys.concat(newKeys))) {\n                    if (!oldKeys.includes(key)) {\n                        this._metadataChanged.emit({\n                            key,\n                            newValue: metadataChange.newValue[key],\n                            type: 'add'\n                        });\n                    }\n                    else if (!newKeys.includes(key)) {\n                        this._metadataChanged.emit({\n                            key,\n                            oldValue: metadataChange.oldValue[key],\n                            type: 'remove'\n                        });\n                    }\n                    else if (!JSONExt.deepEqual(oldValue[key], metadataChange.newValue[key])) {\n                        this._metadataChanged.emit({\n                            key,\n                            newValue: metadataChange.newValue[key],\n                            oldValue: metadataChange.oldValue[key],\n                            type: 'change'\n                        });\n                    }\n                }\n                this._changed.emit({ metadataChange });\n            }\n            if (event.keysChanged.has('nbformat')) {\n                const change = event.changes.keys.get('nbformat');\n                const nbformatChanged = {\n                    key: 'nbformat',\n                    oldValue: (change === null || change === void 0 ? void 0 : change.oldValue) ? change.oldValue : undefined,\n                    newValue: this.nbformat\n                };\n                this._changed.emit({ nbformatChanged });\n            }\n            if (event.keysChanged.has('nbformat_minor')) {\n                const change = event.changes.keys.get('nbformat_minor');\n                const nbformatChanged = {\n                    key: 'nbformat_minor',\n                    oldValue: (change === null || change === void 0 ? void 0 : change.oldValue) ? change.oldValue : undefined,\n                    newValue: this.nbformat_minor\n                };\n                this._changed.emit({ nbformatChanged });\n            }\n        };\n        /**\n         * Handle a change to the list of cells.\n         */\n        this._onYCellsChanged = (event) => {\n            // update the type cell mapping by iterating through the added/removed types\n            event.changes.added.forEach(item => {\n                const type = item.content.type;\n                if (!this._ycellMapping.has(type)) {\n                    const c = createCellModelFromSharedType(type, { notebook: this });\n                    c.setUndoManager();\n                    this._ycellMapping.set(type, c);\n                }\n            });\n            event.changes.deleted.forEach(item => {\n                const type = item.content.type;\n                const model = this._ycellMapping.get(type);\n                if (model) {\n                    model.dispose();\n                    this._ycellMapping.delete(type);\n                }\n            });\n            let index = 0;\n            // this reflects the event.changes.delta, but replaces the content of delta.insert with ycells\n            const cellsChange = [];\n            event.changes.delta.forEach((d) => {\n                if (d.insert != null) {\n                    const insertedCells = d.insert.map((ycell) => this._ycellMapping.get(ycell));\n                    cellsChange.push({ insert: insertedCells });\n                    this.cells.splice(index, 0, ...insertedCells);\n                    index += d.insert.length;\n                }\n                else if (d.delete != null) {\n                    cellsChange.push(d);\n                    this.cells.splice(index, d.delete);\n                }\n                else if (d.retain != null) {\n                    cellsChange.push(d);\n                    index += d.retain;\n                }\n            });\n            this._changed.emit({\n                cellsChange: cellsChange\n            });\n        };\n        this._metadataChanged = new Signal(this);\n        /**\n         * Internal Yjs cells list\n         */\n        this._ycells = this.ydoc.getArray('cells');\n        this._ycellMapping = new WeakMap();\n        this._disableDocumentWideUndoRedo =\n            (_a = options.disableDocumentWideUndoRedo) !== null && _a !== void 0 ? _a : false;\n        this.cells = this._ycells.toArray().map(ycell => {\n            if (!this._ycellMapping.has(ycell)) {\n                this._ycellMapping.set(ycell, createCellModelFromSharedType(ycell, { notebook: this }));\n            }\n            return this._ycellMapping.get(ycell);\n        });\n        this.undoManager.addToScope(this._ycells);\n        this._ycells.observe(this._onYCellsChanged);\n        this.ymeta.observe(this._onMetaChanged);\n    }\n    /**\n     * Wether the undo/redo logic should be\n     * considered on the full document across all cells.\n     *\n     * Default: false\n     */\n    get disableDocumentWideUndoRedo() {\n        return this._disableDocumentWideUndoRedo;\n    }\n    /**\n     * Notebook metadata\n     */\n    get metadata() {\n        return this.getMetadata();\n    }\n    set metadata(v) {\n        this.setMetadata(v);\n    }\n    /**\n     * Signal triggered when a metadata changes.\n     */\n    get metadataChanged() {\n        return this._metadataChanged;\n    }\n    /**\n     * nbformat major version\n     */\n    get nbformat() {\n        return this.ymeta.get('nbformat');\n    }\n    set nbformat(value) {\n        this.transact(() => {\n            this.ymeta.set('nbformat', value);\n        }, false);\n    }\n    /**\n     * nbformat minor version\n     */\n    get nbformat_minor() {\n        return this.ymeta.get('nbformat_minor');\n    }\n    set nbformat_minor(value) {\n        this.transact(() => {\n            this.ymeta.set('nbformat_minor', value);\n        }, false);\n    }\n    /**\n     * Dispose of the resources.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._ycells.unobserve(this._onYCellsChanged);\n        this.ymeta.unobserve(this._onMetaChanged);\n        super.dispose();\n    }\n    /**\n     * Get a shared cell by index.\n     *\n     * @param index: Cell's position.\n     *\n     * @returns The requested shared cell.\n     */\n    getCell(index) {\n        return this.cells[index];\n    }\n    /**\n     * Add a shared cell at the notebook bottom.\n     *\n     * @param cell Cell to add.\n     *\n     * @returns The added cell.\n     */\n    addCell(cell) {\n        return this.insertCell(this._ycells.length, cell);\n    }\n    /**\n     * Insert a shared cell into a specific position.\n     *\n     * @param index: Cell's position.\n     * @param cell: Cell to insert.\n     *\n     * @returns The inserted cell.\n     */\n    insertCell(index, cell) {\n        return this.insertCells(index, [cell])[0];\n    }\n    /**\n     * Insert a list of shared cells into a specific position.\n     *\n     * @param index: Position to insert the cells.\n     * @param cells: Array of shared cells to insert.\n     *\n     * @returns The inserted cells.\n     */\n    insertCells(index, cells) {\n        const yCells = cells.map(c => {\n            const cell = createCell(c, this);\n            this._ycellMapping.set(cell.ymodel, cell);\n            return cell;\n        });\n        this.transact(() => {\n            this._ycells.insert(index, yCells.map(cell => cell.ymodel));\n        });\n        yCells.forEach(c => {\n            c.setUndoManager();\n        });\n        return yCells;\n    }\n    /**\n     * Move a cell.\n     *\n     * @param fromIndex: Index of the cell to move.\n     * @param toIndex: New position of the cell.\n     */\n    moveCell(fromIndex, toIndex) {\n        this.moveCells(fromIndex, toIndex);\n    }\n    /**\n     * Move cells.\n     *\n     * @param fromIndex: Index of the first cells to move.\n     * @param toIndex: New position of the first cell (in the current array).\n     * @param n: Number of cells to move (default 1)\n     */\n    moveCells(fromIndex, toIndex, n = 1) {\n        // FIXME we need to use yjs move feature to preserve undo history\n        const clones = new Array(n)\n            .fill(true)\n            .map((_, idx) => this.getCell(fromIndex + idx).toJSON());\n        this.transact(() => {\n            this._ycells.delete(fromIndex, n);\n            this._ycells.insert(fromIndex > toIndex ? toIndex : toIndex - n + 1, clones.map(clone => createCell(clone, this).ymodel));\n        });\n    }\n    /**\n     * Remove a cell.\n     *\n     * @param index: Index of the cell to remove.\n     */\n    deleteCell(index) {\n        this.deleteCellRange(index, index + 1);\n    }\n    /**\n     * Remove a range of cells.\n     *\n     * @param from: The start index of the range to remove (inclusive).\n     * @param to: The end index of the range to remove (exclusive).\n     */\n    deleteCellRange(from, to) {\n        // Cells will be removed from the mapping in the model event listener.\n        this.transact(() => {\n            this._ycells.delete(from, to - from);\n        });\n    }\n    /**\n     * Delete a metadata notebook.\n     *\n     * @param key The key to delete\n     */\n    deleteMetadata(key) {\n        if (typeof this.getMetadata(key) === 'undefined') {\n            return;\n        }\n        const allMetadata = JSONExt.deepCopy(this.ymeta.get('metadata'));\n        delete allMetadata[key];\n        this.setMetadata(allMetadata);\n    }\n    getMetadata(key) {\n        var _a;\n        const meta = (_a = this.ymeta.get('metadata')) !== null && _a !== void 0 ? _a : {};\n        if (typeof key === 'string') {\n            const value = meta[key];\n            return typeof value === 'undefined'\n                ? undefined // undefined is converted to `{}` by `JSONExt.deepCopy`\n                : JSONExt.deepCopy(meta[key]);\n        }\n        else {\n            return JSONExt.deepCopy(meta);\n        }\n    }\n    setMetadata(metadata, value) {\n        var _a;\n        if (typeof metadata === 'string') {\n            if (typeof value === 'undefined') {\n                throw new TypeError(`Metadata value for ${metadata} cannot be 'undefined'; use deleteMetadata.`);\n            }\n            if (JSONExt.deepEqual((_a = this.getMetadata(metadata)) !== null && _a !== void 0 ? _a : null, value)) {\n                return;\n            }\n            const update = {};\n            update[metadata] = value;\n            this.updateMetadata(update);\n        }\n        else {\n            if (!JSONExt.deepEqual(this.metadata, metadata)) {\n                this.ymeta.set('metadata', JSONExt.deepCopy(metadata));\n            }\n        }\n    }\n    /**\n     * Updates the metadata associated with the notebook.\n     *\n     * @param value: Metadata's attribute to update.\n     */\n    updateMetadata(value) {\n        // TODO: Maybe modify only attributes instead of replacing the whole metadata?\n        this.ymeta.set('metadata', { ...this.getMetadata(), ...value });\n    }\n    /**\n     * Override the notebook with a JSON-serialized document.\n     *\n     * @param value The notebook\n     */\n    fromJSON(value) {\n        this.transact(() => {\n            this.nbformat = value.nbformat;\n            this.nbformat_minor = value.nbformat_minor;\n            const metadata = value.metadata;\n            if (metadata['orig_nbformat'] !== undefined) {\n                delete metadata['orig_nbformat'];\n            }\n            this.metadata = metadata;\n            const useId = value.nbformat === 4 && value.nbformat_minor >= 5;\n            const ycells = value.cells.map(cell => {\n                if (!useId) {\n                    delete cell.id;\n                }\n                return cell;\n            });\n            this.insertCells(this.cells.length, ycells);\n            this.deleteCellRange(0, this.cells.length);\n        });\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        // strip cell ids if we have notebook format 4.0-4.4\n        const pruneCellId = this.nbformat === 4 && this.nbformat_minor <= 4;\n        return {\n            metadata: this.metadata,\n            nbformat_minor: this.nbformat_minor,\n            nbformat: this.nbformat,\n            cells: this.cells.map(c => {\n                const raw = c.toJSON();\n                if (pruneCellId) {\n                    delete raw.id;\n                }\n                return raw;\n            })\n        };\n    }\n}\n//# sourceMappingURL=ymodels.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nexport function convertYMapEventToMapChange(event) {\n    let changes = new Map();\n    event.changes.keys.forEach((event, key) => {\n        changes.set(key, {\n            action: event.action,\n            oldValue: event.oldValue,\n            newValue: this.ymeta.get(key)\n        });\n    });\n    return changes;\n}\n/**\n * Creates a mutual exclude function with the following property:\n *\n * ```js\n * const mutex = createMutex()\n * mutex(() => {\n *   // This function is immediately executed\n *   mutex(() => {\n *     // This function is not executed, as the mutex is already active.\n *   })\n * })\n * ```\n */\nexport const createMutex = () => {\n    let token = true;\n    return (f) => {\n        if (token) {\n            token = false;\n            try {\n                f();\n            }\n            finally {\n                token = true;\n            }\n        }\n    };\n};\n//# sourceMappingURL=utils.js.map"],"sourceRoot":""}