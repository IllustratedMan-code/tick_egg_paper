{"version":3,"sources":["webpack://@jupyterlab/application-top/./node_modules/codemirror/keymap/vim.js"],"names":["mod","CodeMirror","defaultKeymap","keys","type","toKeys","context","action","motion","motionArgs","linewise","toJumplist","forward","wordEnd","bigWord","inclusive","explicitRepeat","toFirstChar","repeatOffset","isEdit","actionArgs","after","matchIndent","sameLine","operator","operatorArgs","indentRight","toLower","operatorMotionArgs","visualLine","shouldMoveCursor","insertAt","interlaceInsertRepeat","blockwise","keepSpaces","replace","fullLine","exitVisualBlock","position","increase","backtrack","textObjectInner","searchArgs","querySrc","wholeWordOnly","defaultKeymapLength","length","defaultExCommandMap","name","shortName","possiblyAsync","excludeFromCommandHistory","Pos","Vim","enterVimMode","cm","setOption","signal","mode","on","onCursorActivity","maybeInitVimState","getInputField","getOnPasteFn","leaveVimMode","off","state","vim","detachVimMap","next","this","keyMap","rmClass","getWrapperElement","getOption","document","body","style","caretColor","disableFatCursorMark","attach","attachVimMap","prev","addClass","enableFatCursorMark","updateFatCursorMark","fatCursorMarks","clearFatCursorMark","ranges","listSelections","result","i","range","empty","lineLength","getLine","anchor","line","ch","push","markText","className","marks","clear","defineOption","val","Init","test","cmKey","key","undefined","vimKey","cmKeyToVimKey","cmd","findKey","modifiers","Shift","Ctrl","Alt","Cmd","Mod","CapsLock","specialKeys","Enter","Backspace","Delete","Insert","charAt","pieces","split","lastPiece","hasCharacter","piece","isUpperCase","toLowerCase","join","onPasteFn","insertMode","setCursor","offsetCursor","getCursor","actions","enterInsertMode","numberRegex","wordCharTest","isWordChar","bigWordCharTest","makeKeyRange","start","size","String","fromCharCode","upperCaseAlphabet","lowerCaseAlphabet","numbers","validMarks","concat","validRegisters","isLine","firstLine","lastLine","isLowerCase","k","isMatchableSymbol","indexOf","isNumber","isWhiteSpaceString","isEndOfSentenceSymbol","inArray","arr","options","defaultValue","aliases","callback","Error","value","cfg","option","scope","local","createCircularJumpList","pointer","head","tail","buffer","Array","add","oldCur","newCur","current","curMark","useNextSlot","cursor","trashMark","setBookmark","markPos","find","cursorEqual","move","offset","mark","inc","oldPointer","cachedCursor","createInsertModeChanges","c","changes","expectCursorActivityForChange","MacroModeState","latestRegister","isPlaying","isRecording","replaySearchQueries","onRecordingDone","lastInsertModeChanges","prototype","exitMacroRecordMode","macroModeState","vimGlobalState","enterMacroRecordMode","registerName","register","registerController","getRegister","openDialog","bottom","inputState","InputState","lastEditInputState","lastEditActionCommand","lastHPos","lastHSPos","lastMotion","fakeCursor","insertModeRepeat","visualMode","visualBlock","lastSelection","lastPastedText","sel","resetVimGlobalState","searchQuery","searchIsReversed","lastSubstituteReplacePart","jumpList","lastCharacterSearch","increment","selectedCharacter","RegisterController","searchHistoryController","HistoryController","exCommandHistoryController","optionName","lastInsertModeKeyTimer","vimApi","buildKeyMap","getRegisterController","resetVimGlobalState_","getVimGlobalState_","maybeInitVimState_","suppressErrorLogging","InsertModeKey","map","lhs","rhs","ctx","exCommandDispatcher","unmap","noremap","toCtxArray","ctxsToMap","actualLength","origLength","mapping","substr","newMapping","_mapCommand","mappedCtxs","filter","el","mapclear","userKeymap","slice","contexts","j","defineEx","prefix","func","exCommands","commandMap_","handleKey","origin","command","handleMacroRecording","clearInputState","logKey","handleEsc","exitVisualMode","exitInsertMode","doKeyToKey","match","exec","substring","index","handleKeyInsertMode","keyBuffer","keysAreChars","commandDispatcher","matchCommand","thisMatch","window","clearTimeout","setTimeout","selections","here","replaceRange","pop","handleKeyNonInsertMode","keysMatcher","pushRepeatDigit","operation","curOp","isVimOp","processCommand","e","console","handleEx","input","defineMotion","defineAction","defineOperator","mapCommand","defineRegister","prefixRepeat","motionRepeat","n","getRepeat","repeat","parseInt","reason","Register","text","insertModeChanges","searchQueries","setText","pushText","pushInsertModeChanges","pushSearchQuery","query","toString","registers","unnamedRegister","isValidRegister","shiftNumericRegisters_","append","historyBuffer","iterator","initialPrefix","nextMatch","up","dir","element","pushInput","splice","reset","matches","commandMatches","full","partial","bestMatch","character","lastChar","repeatOverride","processMotion","processOperator","processOperatorMotion","processAction","processSearch","processEx","copyArgs","evalInput","updateCmSelection","repeatIsExplicit","recordLastEdit","getSearchCursor","getSearchState","setReversed","promptPrefix","originalQuery","getQuery","originalScrollPos","getScrollInfo","handleQuery","ignoreCase","smartCase","updateSearchQuery","showConfirm","onPromptClose","scrollTo","left","top","logSearchQuery","onPromptKeyUp","close","keyName","target","selectionEnd","selectionStart","Math","min","parsedQuery","scrollIntoView","findNext","clearSearchHighlight","onPromptKeyDown","e_stop","focus","shift","showPrompt","onClose","desc","onKeyUp","onKeyDown","word","expandWordUnderCursor","isKeyword","end","escapeRegex","exArgs","selectValueOnOpen","origHead","copyCursor","clipCursorToContent","origAnchor","oldHead","oldAnchor","newHead","newAnchor","noRepeat","motionResult","motions","recordJumpPosition","Infinity","updateMark","cursorIsBefore","lastSel","lineOffset","abs","chOffset","curStart","curEnd","cmSel","cursorMin","cursorMax","makeCmSelection","tmp","expandSelectionToLine","clipToLine","exclusive","setSelections","primary","operatorMoveTo","operators","actionCommand","moveToTopLine","_head","getUserVisibleLines","findFirstNonWhiteSpaceCharacter","moveToMiddleLine","floor","moveToBottomLine","expandToLine","_cm","cur","isReversed","highlightSearchMatches","findAndSelectNextInclusive","prevInputState","findNextFromAndToInclusive","from","to","subMode","goToMark","pos","getMarkPos","moveToOtherHighlightedEnd","jumpToMark","best","isWrongDirection","equal","between","cursorIsBetween","moveByCharacters","moveByLines","endCh","moveByDisplayLines","moveByScroll","moveToColumn","moveToEol","first","last","posV","findPosV","hasMarkedText","moveToStartOfLine","charCoords","res","hitSide","lastCharCoords","goalCoords","coordsChar","resCoords","moveByPage","moveByParagraph","findParagraph","moveBySentence","findSentence","scrollbox","clientHeight","defaultTextHeight","orig","dest","moveByWords","moveToWord","moveTillCharacter","moveToCharacter","recordLastCharacterSearch","moveToSymbol","findSymbol","moveToFirstNonWhiteSpaceCharacter","moveToMatchedSymbol","lineText","symbol","getTokenTypeAt","re","matched","findMatchingBracket","bracketRegex","moveToLineOrEdgeOfDocument","lineNum","textObjectManipulation","mirroredPairs","selfPaired","selectCompanionObject","findBeginningAndEnd","expandTagUnderCursor","expandSelection","repeatLastCharacterSearch","lastSearch","moveH","fn","fillArray","times","change","args","finalHead","getRange","lastState","prevLineEnd","Number","MAX_VALUE","wasLastLine","commands","newlineAndIndent","setSelection","getSelection","replaceSelection","replacement","replaceSelections","indent","startLine","endLine","indentLine","indentAuto","_args","execCommand","changeCase","getSelections","swapped","toSwap","toUpperCase","yank","endPos","jumpListWalk","scroll","lineHeight","delta","newPos","cursorCoords","ceil","newBottom","scrollToCursor","height","y","replayMacro","executeMacroRegister","toggleOverwrite","overwrite","max","getLastEditPos","onChange","onKeyEventTargetKeyDown","selectForInsert","toggleVisualMode","reselectLastSelection","_actionArgs","updateLastSelection","anchorMark","headMark","joinLines","finalCh","curFinalPos","newLineAndEnterInsertMode","newlineFn","newlineAndIndentContinueComment","paste","tabSize","whitespaceLength","str","tabs","spaces","currentLine","chompedText","wasChomped","firstIndent","wspace","newIndent","quotient","curPosFinal","idx","lastSelectionCurEnd","selectedArea","getSelectedAreaRange","selectedText","emptyStrings","selectBlock","posFromIndex","indexFromPos","lastCh","extendLineToColumn","undo","repeatFn","redo","setRegister","setMark","markName","replaceWith","replaceTo","replaceWithStr","incrementNumberToken","lineStr","numberStr","baseStr","digits","base","number","zeroPadding","repeatLastEdit","includeLineBreak","maxCh","ret","prop","hasOwnProperty","offsetLine","offsetCh","commandMatch","pressed","mapped","prefixLen","pressedPrefix","mappedPrefix","cur1","cur2","arguments","apply","call","cur3","cur1before2","cur2before3","trim","s","column","clipPos","isClipped","curHead","primIndex","getIndex","wasClipped","baseCh","headCh","newDir","lineHead","atAnchor","atHead","getCurrentSelectedAreaRange","getLastSelectedAreaRange","block","width","updateFakeCursor","headOffset","anchorOffset","right","getHead","moveHead","clearFakeCursor","selection","lines","firstNonWS","search","_forward","noSymbol","wordStart","findMatchingTag","findEnclosingTag","tags","open","symbolToMode","findSymbolModes","bracket","isComplete","nextCh","symb","depth","reverseSymb","section","init","curMoveThrough","comment","found","method","preprocess","token","lineCount","curCh","lineLen","findWord","emptyLineIsWord","charTests","stop","foundWord","words","eodCh","shortCircuit","firstWord","lastWord","keepHPos","retval","charIdxInLine","includeChar","lastIndexOf","isEmpty","isBoundary","any","startState","nextChar","ln","curr","last_valid","skip_empty_lines","reverse","curr_index","bracketRegexp","openSym","curChar","scanForBracket","chars","len","firstIndex","SearchState","setQuery","getOverlay","searchOverlay","setOverlay","overlay","reversed","getScrollbarAnnotate","annotate","setScrollbarAnnotate","searchState_","splitBySlash","argString","splitBySeparator","findUnescapedSlashes","findUnescapedSeparators","separator","slashes","tokens","escapeNextChar","translateRegex","specials","unescape","out","specialComesNext","charUnescapes","translateRegexReplace","unescapes","unescapeRegexReplace","stream","StringStream","output","eol","peek","matcher","parseQuery","lastSearchRegister","RegExp","regexPart","forceIgnoreCase","flagsPart","regexp","dom","createElement","a","createTextNode","nodeType","appendChild","Object","setAttribute","template","pre","$color","openNotification","duration","alert","innerText","makePrompt","createDocumentFragment","$fontFamily","$whiteSpace","autocorrect","autocapitalize","spellcheck","shortText","prompt","regexEqual","r1","r2","props","rawQuery","source","matchSol","sol","skipToEnd","backUp","highlightTimeout","searchState","removeOverlay","addOverlay","showMatchesOnScrollbar","isInRange","scrollInfo","occludeToleranceTop","occludeToleranceBottom","bottomY","done","doc","history","ExCommandDispatcher","buildCommandMap_","opt_params","that","_processCommand","commandHistoryRegister","previousCommand","inputStream","params","parseInput_","commandName","matchCommand_","parseCommandArgs_","toInput","eatWhile","eat","lineEnd","parseLineSpec_","numberMatch","parseLineSpecOffset_","offsetMatch","delim","argDelimiter","user","unshift","colorscheme","mapArgs","imap","nmap","vmap","set","setArgs","setCfg","expr","forceGet","optionIsBoolean","oldValue","message","setOptionReturn","setlocal","setglobal","regArgs","regInfo","sort","unique","pattern","parseArgs","eatSpace","opts","decimal","hex","octal","err","lineStart","radix","numPart","textPart","matchPart","compareFn","b","anum","bnum","comparePatternFn","textOld","vglobal","global","inverted","matchedLines","getLineHandle","nextCommand","getLineNumber","substitute","replacePart","trailing","count","confirm","startPos","doReplace","write","save","nohlsearch","delmarks","sym","startMark","finishMark","charCodeAt","finish","searchCursor","exMode","lastPos","modifiedLineNumber","joined","replaceAll","newText","unmodifiedLineNumber","_value","savedCallback","detach","insertModeChangeRegister","lastChange","logInsertModeChange","extra","fallthrough","imc","repeatInsertModeChanges","changeObj","ignoreCount","selectionCount","maybeReset","handleExternalSelection","widget","fakeCursorBookmark","somethingSelected","onKeyFound","lookupKey","repeatForInsert","isAction","cachedInputState","repeatCommand","repeatInsert","changeObject","keyHandler","binding"],"mappings":"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","file":"2585.4d374708a4df1d35065d.js?v=4d374708a4df1d35065d","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/**\n * Supported keybindings:\n *   Too many to list. Refer to defaultKeymap below.\n *\n * Supported Ex commands:\n *   Refer to defaultExCommandMap below.\n *\n * Registers: unnamed, -, ., :, /, _, a-z, A-Z, 0-9\n *   (Does not respect the special case for number registers when delete\n *    operator is made with these commands: %, (, ),  , /, ?, n, N, {, } )\n *   TODO: Implement the remaining registers.\n *\n * Marks: a-z, A-Z, and 0-9\n *   TODO: Implement the remaining special marks. They have more complex\n *       behavior.\n *\n * Events:\n *  'vim-mode-change' - raised on the editor anytime the current mode changes,\n *                      Event object: {mode: \"visual\", subMode: \"linewise\"}\n *\n * Code structure:\n *  1. Default keymap\n *  2. Variable declarations and short basic helpers\n *  3. Instance (External API) implementation\n *  4. Internal state tracking objects (input state, counter) implementation\n *     and instantiation\n *  5. Key handler (the main command dispatcher) implementation\n *  6. Motion, operator, and action implementations\n *  7. Helper functions for the key handler, motions, operators, and actions\n *  8. Set up Vim to work as a keymap for CodeMirror.\n *  9. Ex command implementations.\n */\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../lib/codemirror\"), require(\"../addon/search/searchcursor\"), require(\"../addon/dialog/dialog\"), require(\"../addon/edit/matchbrackets.js\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\", \"../addon/search/searchcursor\", \"../addon/dialog/dialog\", \"../addon/edit/matchbrackets\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  'use strict';\n\n  var defaultKeymap = [\n    // Key to key mapping. This goes first to make it possible to override\n    // existing mappings.\n    { keys: '<Left>', type: 'keyToKey', toKeys: 'h' },\n    { keys: '<Right>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<Up>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<Down>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<Space>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<BS>', type: 'keyToKey', toKeys: 'h', context: 'normal'},\n    { keys: '<Del>', type: 'keyToKey', toKeys: 'x', context: 'normal'},\n    { keys: '<C-Space>', type: 'keyToKey', toKeys: 'W' },\n    { keys: '<C-BS>', type: 'keyToKey', toKeys: 'B', context: 'normal' },\n    { keys: '<S-Space>', type: 'keyToKey', toKeys: 'w' },\n    { keys: '<S-BS>', type: 'keyToKey', toKeys: 'b', context: 'normal' },\n    { keys: '<C-n>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<C-p>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: 's', type: 'keyToKey', toKeys: 'cl', context: 'normal' },\n    { keys: 's', type: 'keyToKey', toKeys: 'c', context: 'visual'},\n    { keys: 'S', type: 'keyToKey', toKeys: 'cc', context: 'normal' },\n    { keys: 'S', type: 'keyToKey', toKeys: 'VdO', context: 'visual' },\n    { keys: '<Home>', type: 'keyToKey', toKeys: '0' },\n    { keys: '<End>', type: 'keyToKey', toKeys: '$' },\n    { keys: '<PageUp>', type: 'keyToKey', toKeys: '<C-b>' },\n    { keys: '<PageDown>', type: 'keyToKey', toKeys: '<C-f>' },\n    { keys: '<CR>', type: 'keyToKey', toKeys: 'j^', context: 'normal' },\n    { keys: '<Ins>', type: 'action', action: 'toggleOverwrite', context: 'insert' },\n    // Motions\n    { keys: 'H', type: 'motion', motion: 'moveToTopLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'M', type: 'motion', motion: 'moveToMiddleLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'L', type: 'motion', motion: 'moveToBottomLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'h', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: false }},\n    { keys: 'l', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: true }},\n    { keys: 'j', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, linewise: true }},\n    { keys: 'k', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, linewise: true }},\n    { keys: 'gj', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: true }},\n    { keys: 'gk', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: false }},\n    { keys: 'w', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false }},\n    { keys: 'W', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false, bigWord: true }},\n    { keys: 'e', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, inclusive: true }},\n    { keys: 'E', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: 'b', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }},\n    { keys: 'B', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false, bigWord: true }},\n    { keys: 'ge', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, inclusive: true }},\n    { keys: 'gE', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: '{', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: false, toJumplist: true }},\n    { keys: '}', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: true, toJumplist: true }},\n    { keys: '(', type: 'motion', motion: 'moveBySentence', motionArgs: { forward: false }},\n    { keys: ')', type: 'motion', motion: 'moveBySentence', motionArgs: { forward: true }},\n    { keys: '<C-f>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: true }},\n    { keys: '<C-b>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: false }},\n    { keys: '<C-d>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: true, explicitRepeat: true }},\n    { keys: '<C-u>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: false, explicitRepeat: true }},\n    { keys: 'gg', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: false, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: 'G', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: true, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: '0', type: 'motion', motion: 'moveToStartOfLine' },\n    { keys: '^', type: 'motion', motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '+', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true }},\n    { keys: '-', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, toFirstChar:true }},\n    { keys: '_', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true, repeatOffset:-1 }},\n    { keys: '$', type: 'motion', motion: 'moveToEol', motionArgs: { inclusive: true }},\n    { keys: '%', type: 'motion', motion: 'moveToMatchedSymbol', motionArgs: { inclusive: true, toJumplist: true }},\n    { keys: 'f<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: true , inclusive: true }},\n    { keys: 'F<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: false }},\n    { keys: 't<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: true, inclusive: true }},\n    { keys: 'T<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: false }},\n    { keys: ';', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: true }},\n    { keys: ',', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: false }},\n    { keys: '\\'<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true, linewise: true}},\n    { keys: '`<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true}},\n    { keys: ']`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true } },\n    { keys: '[`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false } },\n    { keys: ']\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true, linewise: true } },\n    { keys: '[\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false, linewise: true } },\n    // the next two aren't motions but must come before more general motion declarations\n    { keys: ']p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true, matchIndent: true}},\n    { keys: '[p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true, matchIndent: true}},\n    { keys: ']<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: true, toJumplist: true}},\n    { keys: '[<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: false, toJumplist: true}},\n    { keys: '|', type: 'motion', motion: 'moveToColumn'},\n    { keys: 'o', type: 'motion', motion: 'moveToOtherHighlightedEnd', context:'visual'},\n    { keys: 'O', type: 'motion', motion: 'moveToOtherHighlightedEnd', motionArgs: {sameLine: true}, context:'visual'},\n    // Operators\n    { keys: 'd', type: 'operator', operator: 'delete' },\n    { keys: 'y', type: 'operator', operator: 'yank' },\n    { keys: 'c', type: 'operator', operator: 'change' },\n    { keys: '=', type: 'operator', operator: 'indentAuto' },\n    { keys: '>', type: 'operator', operator: 'indent', operatorArgs: { indentRight: true }},\n    { keys: '<', type: 'operator', operator: 'indent', operatorArgs: { indentRight: false }},\n    { keys: 'g~', type: 'operator', operator: 'changeCase' },\n    { keys: 'gu', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, isEdit: true },\n    { keys: 'gU', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, isEdit: true },\n    { keys: 'n', type: 'motion', motion: 'findNext', motionArgs: { forward: true, toJumplist: true }},\n    { keys: 'N', type: 'motion', motion: 'findNext', motionArgs: { forward: false, toJumplist: true }},\n    { keys: 'gn', type: 'motion', motion: 'findAndSelectNextInclusive', motionArgs: { forward: true }},\n    { keys: 'gN', type: 'motion', motion: 'findAndSelectNextInclusive', motionArgs: { forward: false }},\n    // Operator-Motion dual commands\n    { keys: 'x', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorMotionArgs: { visualLine: false }},\n    { keys: 'X', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: false }, operatorMotionArgs: { visualLine: true }},\n    { keys: 'D', type: 'operatorMotion', operator: 'delete', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'D', type: 'operator', operator: 'delete', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'Y', type: 'operatorMotion', operator: 'yank', motion: 'expandToLine', motionArgs: { linewise: true }, context: 'normal'},\n    { keys: 'Y', type: 'operator', operator: 'yank', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'C', type: 'operatorMotion', operator: 'change', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'C', type: 'operator', operator: 'change', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: '~', type: 'operatorMotion', operator: 'changeCase', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorArgs: { shouldMoveCursor: true }, context: 'normal'},\n    { keys: '~', type: 'operator', operator: 'changeCase', context: 'visual'},\n    { keys: '<C-w>', type: 'operatorMotion', operator: 'delete', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }, context: 'insert' },\n    //ignore C-w in normal mode\n    { keys: '<C-w>', type: 'idle', context: 'normal' },\n    // Actions\n    { keys: '<C-i>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: true }},\n    { keys: '<C-o>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: false }},\n    { keys: '<C-e>', type: 'action', action: 'scroll', actionArgs: { forward: true, linewise: true }},\n    { keys: '<C-y>', type: 'action', action: 'scroll', actionArgs: { forward: false, linewise: true }},\n    { keys: 'a', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'charAfter' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'eol' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'endOfSelectedArea' }, context: 'visual' },\n    { keys: 'i', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'inplace' }, context: 'normal' },\n    { keys: 'gi', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'lastEdit' }, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'firstNonBlank'}, context: 'normal' },\n    { keys: 'gI', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'bol'}, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'startOfSelectedArea' }, context: 'visual' },\n    { keys: 'o', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: true }, context: 'normal' },\n    { keys: 'O', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: false }, context: 'normal' },\n    { keys: 'v', type: 'action', action: 'toggleVisualMode' },\n    { keys: 'V', type: 'action', action: 'toggleVisualMode', actionArgs: { linewise: true }},\n    { keys: '<C-v>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: '<C-q>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: 'gv', type: 'action', action: 'reselectLastSelection' },\n    { keys: 'J', type: 'action', action: 'joinLines', isEdit: true },\n    { keys: 'gJ', type: 'action', action: 'joinLines', actionArgs: { keepSpaces: true }, isEdit: true },\n    { keys: 'p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true }},\n    { keys: 'P', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true }},\n    { keys: 'r<character>', type: 'action', action: 'replace', isEdit: true },\n    { keys: '@<character>', type: 'action', action: 'replayMacro' },\n    { keys: 'q<character>', type: 'action', action: 'enterMacroRecordMode' },\n    // Handle Replace-mode as a special case of insert mode.\n    { keys: 'R', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { replace: true }, context: 'normal'},\n    { keys: 'R', type: 'operator', operator: 'change', operatorArgs: { linewise: true, fullLine: true }, context: 'visual', exitVisualBlock: true},\n    { keys: 'u', type: 'action', action: 'undo', context: 'normal' },\n    { keys: 'u', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, context: 'visual', isEdit: true },\n    { keys: 'U', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, context: 'visual', isEdit: true },\n    { keys: '<C-r>', type: 'action', action: 'redo' },\n    { keys: 'm<character>', type: 'action', action: 'setMark' },\n    { keys: '\"<character>', type: 'action', action: 'setRegister' },\n    { keys: 'zz', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }},\n    { keys: 'z.', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'zt', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }},\n    { keys: 'z<CR>', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'z-', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }},\n    { keys: 'zb', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '.', type: 'action', action: 'repeatLastEdit' },\n    { keys: '<C-a>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: true, backtrack: false}},\n    { keys: '<C-x>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: false, backtrack: false}},\n    { keys: '<C-t>', type: 'action', action: 'indent', actionArgs: { indentRight: true }, context: 'insert' },\n    { keys: '<C-d>', type: 'action', action: 'indent', actionArgs: { indentRight: false }, context: 'insert' },\n    // Text object motions\n    { keys: 'a<character>', type: 'motion', motion: 'textObjectManipulation' },\n    { keys: 'i<character>', type: 'motion', motion: 'textObjectManipulation', motionArgs: { textObjectInner: true }},\n    // Search\n    { keys: '/', type: 'search', searchArgs: { forward: true, querySrc: 'prompt', toJumplist: true }},\n    { keys: '?', type: 'search', searchArgs: { forward: false, querySrc: 'prompt', toJumplist: true }},\n    { keys: '*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: '#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: 'g*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', toJumplist: true }},\n    { keys: 'g#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', toJumplist: true }},\n    // Ex command\n    { keys: ':', type: 'ex' }\n  ];\n  var defaultKeymapLength = defaultKeymap.length;\n\n  /**\n   * Ex commands\n   * Care must be taken when adding to the default Ex command map. For any\n   * pair of commands that have a shared prefix, at least one of their\n   * shortNames must not match the prefix of the other command.\n   */\n  var defaultExCommandMap = [\n    { name: 'colorscheme', shortName: 'colo' },\n    { name: 'map' },\n    { name: 'imap', shortName: 'im' },\n    { name: 'nmap', shortName: 'nm' },\n    { name: 'vmap', shortName: 'vm' },\n    { name: 'unmap' },\n    { name: 'write', shortName: 'w' },\n    { name: 'undo', shortName: 'u' },\n    { name: 'redo', shortName: 'red' },\n    { name: 'set', shortName: 'se' },\n    { name: 'setlocal', shortName: 'setl' },\n    { name: 'setglobal', shortName: 'setg' },\n    { name: 'sort', shortName: 'sor' },\n    { name: 'substitute', shortName: 's', possiblyAsync: true },\n    { name: 'nohlsearch', shortName: 'noh' },\n    { name: 'yank', shortName: 'y' },\n    { name: 'delmarks', shortName: 'delm' },\n    { name: 'registers', shortName: 'reg', excludeFromCommandHistory: true },\n    { name: 'vglobal', shortName: 'v' },\n    { name: 'global', shortName: 'g' }\n  ];\n\n  var Pos = CodeMirror.Pos;\n\n  var Vim = function() {\n    function enterVimMode(cm) {\n      cm.setOption('disableInput', true);\n      cm.setOption('showCursorWhenSelecting', false);\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      cm.on('cursorActivity', onCursorActivity);\n      maybeInitVimState(cm);\n      CodeMirror.on(cm.getInputField(), 'paste', getOnPasteFn(cm));\n    }\n\n    function leaveVimMode(cm) {\n      cm.setOption('disableInput', false);\n      cm.off('cursorActivity', onCursorActivity);\n      CodeMirror.off(cm.getInputField(), 'paste', getOnPasteFn(cm));\n      cm.state.vim = null;\n    }\n\n    function detachVimMap(cm, next) {\n      if (this == CodeMirror.keyMap.vim) {\n        CodeMirror.rmClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n        if (cm.getOption(\"inputStyle\") == \"contenteditable\" && document.body.style.caretColor != null) {\n          disableFatCursorMark(cm);\n          cm.getInputField().style.caretColor = \"\";\n        }\n      }\n\n      if (!next || next.attach != attachVimMap)\n        leaveVimMode(cm);\n    }\n    function attachVimMap(cm, prev) {\n      if (this == CodeMirror.keyMap.vim) {\n        CodeMirror.addClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n        if (cm.getOption(\"inputStyle\") == \"contenteditable\" && document.body.style.caretColor != null) {\n          enableFatCursorMark(cm);\n          cm.getInputField().style.caretColor = \"transparent\";\n        }\n      }\n\n      if (!prev || prev.attach != attachVimMap)\n        enterVimMode(cm);\n    }\n\n    function updateFatCursorMark(cm) {\n      if (!cm.state.fatCursorMarks) return;\n      clearFatCursorMark(cm);\n      var ranges = cm.listSelections(), result = []\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.empty()) {\n          var lineLength = cm.getLine(range.anchor.line).length;\n          if (range.anchor.ch < lineLength) {\n            result.push(cm.markText(range.anchor, Pos(range.anchor.line, range.anchor.ch + 1),\n                                    {className: \"cm-fat-cursor-mark\"}));\n          } else {\n            result.push(cm.markText(Pos(range.anchor.line, lineLength - 1),\n                                    Pos(range.anchor.line, lineLength),\n                                    {className: \"cm-fat-cursor-mark\"}));\n          }\n        }\n      }\n      cm.state.fatCursorMarks = result;\n    }\n\n    function clearFatCursorMark(cm) {\n      var marks = cm.state.fatCursorMarks;\n      if (marks) for (var i = 0; i < marks.length; i++) marks[i].clear();\n    }\n\n    function enableFatCursorMark(cm) {\n      cm.state.fatCursorMarks = [];\n      updateFatCursorMark(cm)\n      cm.on(\"cursorActivity\", updateFatCursorMark)\n    }\n\n    function disableFatCursorMark(cm) {\n      clearFatCursorMark(cm);\n      cm.off(\"cursorActivity\", updateFatCursorMark);\n      // explicitly set fatCursorMarks to null because event listener above\n      // can be invoke after removing it, if off is called from operation\n      cm.state.fatCursorMarks = null;\n    }\n\n    // Deprecated, simply setting the keymap works again.\n    CodeMirror.defineOption('vimMode', false, function(cm, val, prev) {\n      if (val && cm.getOption(\"keyMap\") != \"vim\")\n        cm.setOption(\"keyMap\", \"vim\");\n      else if (!val && prev != CodeMirror.Init && /^vim/.test(cm.getOption(\"keyMap\")))\n        cm.setOption(\"keyMap\", \"default\");\n    });\n\n    function cmKey(key, cm) {\n      if (!cm) { return undefined; }\n      if (this[key]) { return this[key]; }\n      var vimKey = cmKeyToVimKey(key);\n      if (!vimKey) {\n        return false;\n      }\n      var cmd = CodeMirror.Vim.findKey(cm, vimKey);\n      if (typeof cmd == 'function') {\n        CodeMirror.signal(cm, 'vim-keypress', vimKey);\n      }\n      return cmd;\n    }\n\n    var modifiers = {Shift:'S',Ctrl:'C',Alt:'A',Cmd:'D',Mod:'A',CapsLock:''};\n    var specialKeys = {Enter:'CR',Backspace:'BS',Delete:'Del',Insert:'Ins'};\n    function cmKeyToVimKey(key) {\n      if (key.charAt(0) == '\\'') {\n        // Keypress character binding of format \"'a'\"\n        return key.charAt(1);\n      }\n      var pieces = key.split(/-(?!$)/);\n      var lastPiece = pieces[pieces.length - 1];\n      if (pieces.length == 1 && pieces[0].length == 1) {\n        // No-modifier bindings use literal character bindings above. Skip.\n        return false;\n      } else if (pieces.length == 2 && pieces[0] == 'Shift' && lastPiece.length == 1) {\n        // Ignore Shift+char bindings as they should be handled by literal character.\n        return false;\n      }\n      var hasCharacter = false;\n      for (var i = 0; i < pieces.length; i++) {\n        var piece = pieces[i];\n        if (piece in modifiers) { pieces[i] = modifiers[piece]; }\n        else { hasCharacter = true; }\n        if (piece in specialKeys) { pieces[i] = specialKeys[piece]; }\n      }\n      if (!hasCharacter) {\n        // Vim does not support modifier only keys.\n        return false;\n      }\n      // TODO: Current bindings expect the character to be lower case, but\n      // it looks like vim key notation uses upper case.\n      if (isUpperCase(lastPiece)) {\n        pieces[pieces.length - 1] = lastPiece.toLowerCase();\n      }\n      return '<' + pieces.join('-') + '>';\n    }\n\n    function getOnPasteFn(cm) {\n      var vim = cm.state.vim;\n      if (!vim.onPasteFn) {\n        vim.onPasteFn = function() {\n          if (!vim.insertMode) {\n            cm.setCursor(offsetCursor(cm.getCursor(), 0, 1));\n            actions.enterInsertMode(cm, {}, vim);\n          }\n        };\n      }\n      return vim.onPasteFn;\n    }\n\n    var numberRegex = /[\\d]/;\n    var wordCharTest = [CodeMirror.isWordChar, function(ch) {\n      return ch && !CodeMirror.isWordChar(ch) && !/\\s/.test(ch);\n    }], bigWordCharTest = [function(ch) {\n      return /\\S/.test(ch);\n    }];\n    function makeKeyRange(start, size) {\n      var keys = [];\n      for (var i = start; i < start + size; i++) {\n        keys.push(String.fromCharCode(i));\n      }\n      return keys;\n    }\n    var upperCaseAlphabet = makeKeyRange(65, 26);\n    var lowerCaseAlphabet = makeKeyRange(97, 26);\n    var numbers = makeKeyRange(48, 10);\n    var validMarks = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['<', '>']);\n    var validRegisters = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['-', '\"', '.', ':', '_', '/']);\n\n    function isLine(cm, line) {\n      return line >= cm.firstLine() && line <= cm.lastLine();\n    }\n    function isLowerCase(k) {\n      return (/^[a-z]$/).test(k);\n    }\n    function isMatchableSymbol(k) {\n      return '()[]{}'.indexOf(k) != -1;\n    }\n    function isNumber(k) {\n      return numberRegex.test(k);\n    }\n    function isUpperCase(k) {\n      return (/^[A-Z]$/).test(k);\n    }\n    function isWhiteSpaceString(k) {\n      return (/^\\s*$/).test(k);\n    }\n    function isEndOfSentenceSymbol(k) {\n      return '.?!'.indexOf(k) != -1;\n    }\n    function inArray(val, arr) {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == val) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    var options = {};\n    function defineOption(name, defaultValue, type, aliases, callback) {\n      if (defaultValue === undefined && !callback) {\n        throw Error('defaultValue is required unless callback is provided');\n      }\n      if (!type) { type = 'string'; }\n      options[name] = {\n        type: type,\n        defaultValue: defaultValue,\n        callback: callback\n      };\n      if (aliases) {\n        for (var i = 0; i < aliases.length; i++) {\n          options[aliases[i]] = options[name];\n        }\n      }\n      if (defaultValue) {\n        setOption(name, defaultValue);\n      }\n    }\n\n    function setOption(name, value, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.type == 'boolean') {\n        if (value && value !== true) {\n          return new Error('Invalid argument: ' + name + '=' + value);\n        } else if (value !== false) {\n          // Boolean options are set to true if value is not defined.\n          value = true;\n        }\n      }\n      if (option.callback) {\n        if (scope !== 'local') {\n          option.callback(value, undefined);\n        }\n        if (scope !== 'global' && cm) {\n          option.callback(value, cm);\n        }\n      } else {\n        if (scope !== 'local') {\n          option.value = option.type == 'boolean' ? !!value : value;\n        }\n        if (scope !== 'global' && cm) {\n          cm.state.vim.options[name] = {value: value};\n        }\n      }\n    }\n\n    function getOption(name, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.callback) {\n        var local = cm && option.callback(undefined, cm);\n        if (scope !== 'global' && local !== undefined) {\n          return local;\n        }\n        if (scope !== 'local') {\n          return option.callback();\n        }\n        return;\n      } else {\n        var local = (scope !== 'global') && (cm && cm.state.vim.options[name]);\n        return (local || (scope !== 'local') && option || {}).value;\n      }\n    }\n\n    defineOption('filetype', undefined, 'string', ['ft'], function(name, cm) {\n      // Option is local. Do nothing for global.\n      if (cm === undefined) {\n        return;\n      }\n      // The 'filetype' option proxies to the CodeMirror 'mode' option.\n      if (name === undefined) {\n        var mode = cm.getOption('mode');\n        return mode == 'null' ? '' : mode;\n      } else {\n        var mode = name == '' ? 'null' : name;\n        cm.setOption('mode', mode);\n      }\n    });\n\n    var createCircularJumpList = function() {\n      var size = 100;\n      var pointer = -1;\n      var head = 0;\n      var tail = 0;\n      var buffer = new Array(size);\n      function add(cm, oldCur, newCur) {\n        var current = pointer % size;\n        var curMark = buffer[current];\n        function useNextSlot(cursor) {\n          var next = ++pointer % size;\n          var trashMark = buffer[next];\n          if (trashMark) {\n            trashMark.clear();\n          }\n          buffer[next] = cm.setBookmark(cursor);\n        }\n        if (curMark) {\n          var markPos = curMark.find();\n          // avoid recording redundant cursor position\n          if (markPos && !cursorEqual(markPos, oldCur)) {\n            useNextSlot(oldCur);\n          }\n        } else {\n          useNextSlot(oldCur);\n        }\n        useNextSlot(newCur);\n        head = pointer;\n        tail = pointer - size + 1;\n        if (tail < 0) {\n          tail = 0;\n        }\n      }\n      function move(cm, offset) {\n        pointer += offset;\n        if (pointer > head) {\n          pointer = head;\n        } else if (pointer < tail) {\n          pointer = tail;\n        }\n        var mark = buffer[(size + pointer) % size];\n        // skip marks that are temporarily removed from text buffer\n        if (mark && !mark.find()) {\n          var inc = offset > 0 ? 1 : -1;\n          var newCur;\n          var oldCur = cm.getCursor();\n          do {\n            pointer += inc;\n            mark = buffer[(size + pointer) % size];\n            // skip marks that are the same as current position\n            if (mark &&\n                (newCur = mark.find()) &&\n                !cursorEqual(oldCur, newCur)) {\n              break;\n            }\n          } while (pointer < head && pointer > tail);\n        }\n        return mark;\n      }\n      function find(cm, offset) {\n        var oldPointer = pointer;\n        var mark = move(cm, offset);\n        pointer = oldPointer;\n        return mark && mark.find();\n      }\n      return {\n        cachedCursor: undefined, //used for # and * jumps\n        add: add,\n        find: find,\n        move: move\n      };\n    };\n\n    // Returns an object to track the changes associated insert mode.  It\n    // clones the object that is passed in, or creates an empty object one if\n    // none is provided.\n    var createInsertModeChanges = function(c) {\n      if (c) {\n        // Copy construction\n        return {\n          changes: c.changes,\n          expectCursorActivityForChange: c.expectCursorActivityForChange\n        };\n      }\n      return {\n        // Change list\n        changes: [],\n        // Set to true on change, false on cursorActivity.\n        expectCursorActivityForChange: false\n      };\n    };\n\n    function MacroModeState() {\n      this.latestRegister = undefined;\n      this.isPlaying = false;\n      this.isRecording = false;\n      this.replaySearchQueries = [];\n      this.onRecordingDone = undefined;\n      this.lastInsertModeChanges = createInsertModeChanges();\n    }\n    MacroModeState.prototype = {\n      exitMacroRecordMode: function() {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.onRecordingDone) {\n          macroModeState.onRecordingDone(); // close dialog\n        }\n        macroModeState.onRecordingDone = undefined;\n        macroModeState.isRecording = false;\n      },\n      enterMacroRecordMode: function(cm, registerName) {\n        var register =\n            vimGlobalState.registerController.getRegister(registerName);\n        if (register) {\n          register.clear();\n          this.latestRegister = registerName;\n          if (cm.openDialog) {\n            this.onRecordingDone = cm.openDialog(\n                '(recording)['+registerName+']', null, {bottom:true});\n          }\n          this.isRecording = true;\n        }\n      }\n    };\n\n    function maybeInitVimState(cm) {\n      if (!cm.state.vim) {\n        // Store instance state in the CodeMirror object.\n        cm.state.vim = {\n          inputState: new InputState(),\n          // Vim's input state that triggered the last edit, used to repeat\n          // motions and operators with '.'.\n          lastEditInputState: undefined,\n          // Vim's action command before the last edit, used to repeat actions\n          // with '.' and insert mode repeat.\n          lastEditActionCommand: undefined,\n          // When using jk for navigation, if you move from a longer line to a\n          // shorter line, the cursor may clip to the end of the shorter line.\n          // If j is pressed again and cursor goes to the next line, the\n          // cursor should go back to its horizontal position on the longer\n          // line if it can. This is to keep track of the horizontal position.\n          lastHPos: -1,\n          // Doing the same with screen-position for gj/gk\n          lastHSPos: -1,\n          // The last motion command run. Cleared if a non-motion command gets\n          // executed in between.\n          lastMotion: null,\n          marks: {},\n          // Mark for rendering fake cursor for visual mode.\n          fakeCursor: null,\n          insertMode: false,\n          // Repeat count for changes made in insert mode, triggered by key\n          // sequences like 3,i. Only exists when insertMode is true.\n          insertModeRepeat: undefined,\n          visualMode: false,\n          // If we are in visual line mode. No effect if visualMode is false.\n          visualLine: false,\n          visualBlock: false,\n          lastSelection: null,\n          lastPastedText: null,\n          sel: {},\n          // Buffer-local/window-local values of vim options.\n          options: {}\n        };\n      }\n      return cm.state.vim;\n    }\n    var vimGlobalState;\n    function resetVimGlobalState() {\n      vimGlobalState = {\n        // The current search query.\n        searchQuery: null,\n        // Whether we are searching backwards.\n        searchIsReversed: false,\n        // Replace part of the last substituted pattern\n        lastSubstituteReplacePart: undefined,\n        jumpList: createCircularJumpList(),\n        macroModeState: new MacroModeState,\n        // Recording latest f, t, F or T motion command.\n        lastCharacterSearch: {increment:0, forward:true, selectedCharacter:''},\n        registerController: new RegisterController({}),\n        // search history buffer\n        searchHistoryController: new HistoryController(),\n        // ex Command history buffer\n        exCommandHistoryController : new HistoryController()\n      };\n      for (var optionName in options) {\n        var option = options[optionName];\n        option.value = option.defaultValue;\n      }\n    }\n\n    var lastInsertModeKeyTimer;\n    var vimApi= {\n      buildKeyMap: function() {\n        // TODO: Convert keymap into dictionary format for fast lookup.\n      },\n      // Testing hook, though it might be useful to expose the register\n      // controller anyway.\n      getRegisterController: function() {\n        return vimGlobalState.registerController;\n      },\n      // Testing hook.\n      resetVimGlobalState_: resetVimGlobalState,\n\n      // Testing hook.\n      getVimGlobalState_: function() {\n        return vimGlobalState;\n      },\n\n      // Testing hook.\n      maybeInitVimState_: maybeInitVimState,\n\n      suppressErrorLogging: false,\n\n      InsertModeKey: InsertModeKey,\n      map: function(lhs, rhs, ctx) {\n        // Add user defined key bindings.\n        exCommandDispatcher.map(lhs, rhs, ctx);\n      },\n      unmap: function(lhs, ctx) {\n        exCommandDispatcher.unmap(lhs, ctx);\n      },\n      // Non-recursive map function.\n      // NOTE: This will not create mappings to key maps that aren't present\n      // in the default key map. See TODO at bottom of function.\n      noremap: function(lhs, rhs, ctx) {\n        function toCtxArray(ctx) {\n          return ctx ? [ctx] : ['normal', 'insert', 'visual'];\n        }\n        var ctxsToMap = toCtxArray(ctx);\n        // Look through all actual defaults to find a map candidate.\n        var actualLength = defaultKeymap.length, origLength = defaultKeymapLength;\n        for (var i = actualLength - origLength;\n             i < actualLength && ctxsToMap.length;\n             i++) {\n          var mapping = defaultKeymap[i];\n          // Omit mappings that operate in the wrong context(s) and those of invalid type.\n          if (mapping.keys == rhs &&\n              (!ctx || !mapping.context || mapping.context === ctx) &&\n              mapping.type.substr(0, 2) !== 'ex' &&\n              mapping.type.substr(0, 3) !== 'key') {\n            // Make a shallow copy of the original keymap entry.\n            var newMapping = {};\n            for (var key in mapping) {\n              newMapping[key] = mapping[key];\n            }\n            // Modify it point to the new mapping with the proper context.\n            newMapping.keys = lhs;\n            if (ctx && !newMapping.context) {\n              newMapping.context = ctx;\n            }\n            // Add it to the keymap with a higher priority than the original.\n            this._mapCommand(newMapping);\n            // Record the mapped contexts as complete.\n            var mappedCtxs = toCtxArray(mapping.context);\n            ctxsToMap = ctxsToMap.filter(function(el) { return mappedCtxs.indexOf(el) === -1; });\n          }\n        }\n        // TODO: Create non-recursive keyToKey mappings for the unmapped contexts once those exist.\n      },\n      // Remove all user-defined mappings for the provided context.\n      mapclear: function(ctx) {\n        // Partition the existing keymap into user-defined and true defaults.\n        var actualLength = defaultKeymap.length,\n            origLength = defaultKeymapLength;\n        var userKeymap = defaultKeymap.slice(0, actualLength - origLength);\n        defaultKeymap = defaultKeymap.slice(actualLength - origLength);\n        if (ctx) {\n          // If a specific context is being cleared, we need to keep mappings\n          // from all other contexts.\n          for (var i = userKeymap.length - 1; i >= 0; i--) {\n            var mapping = userKeymap[i];\n            if (ctx !== mapping.context) {\n              if (mapping.context) {\n                this._mapCommand(mapping);\n              } else {\n                // `mapping` applies to all contexts so create keymap copies\n                // for each context except the one being cleared.\n                var contexts = ['normal', 'insert', 'visual'];\n                for (var j in contexts) {\n                  if (contexts[j] !== ctx) {\n                    var newMapping = {};\n                    for (var key in mapping) {\n                      newMapping[key] = mapping[key];\n                    }\n                    newMapping.context = contexts[j];\n                    this._mapCommand(newMapping);\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      // TODO: Expose setOption and getOption as instance methods. Need to decide how to namespace\n      // them, or somehow make them work with the existing CodeMirror setOption/getOption API.\n      setOption: setOption,\n      getOption: getOption,\n      defineOption: defineOption,\n      defineEx: function(name, prefix, func){\n        if (!prefix) {\n          prefix = name;\n        } else if (name.indexOf(prefix) !== 0) {\n          throw new Error('(Vim.defineEx) \"'+prefix+'\" is not a prefix of \"'+name+'\", command not registered');\n        }\n        exCommands[name]=func;\n        exCommandDispatcher.commandMap_[prefix]={name:name, shortName:prefix, type:'api'};\n      },\n      handleKey: function (cm, key, origin) {\n        var command = this.findKey(cm, key, origin);\n        if (typeof command === 'function') {\n          return command();\n        }\n      },\n      /**\n       * This is the outermost function called by CodeMirror, after keys have\n       * been mapped to their Vim equivalents.\n       *\n       * Finds a command based on the key (and cached keys if there is a\n       * multi-key sequence). Returns `undefined` if no key is matched, a noop\n       * function if a partial match is found (multi-key), and a function to\n       * execute the bound command if a a key is matched. The function always\n       * returns true.\n       */\n      findKey: function(cm, key, origin) {\n        var vim = maybeInitVimState(cm);\n        function handleMacroRecording() {\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            if (key == 'q') {\n              macroModeState.exitMacroRecordMode();\n              clearInputState(cm);\n              return true;\n            }\n            if (origin != 'mapping') {\n              logKey(macroModeState, key);\n            }\n          }\n        }\n        function handleEsc() {\n          if (key == '<Esc>') {\n            // Clear input state and get back to normal mode.\n            clearInputState(cm);\n            if (vim.visualMode) {\n              exitVisualMode(cm);\n            } else if (vim.insertMode) {\n              exitInsertMode(cm);\n            }\n            return true;\n          }\n        }\n        function doKeyToKey(keys) {\n          // TODO: prevent infinite recursion.\n          var match;\n          while (keys) {\n            // Pull off one command key, which is either a single character\n            // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n            match = (/<\\w+-.+?>|<\\w+>|./).exec(keys);\n            key = match[0];\n            keys = keys.substring(match.index + key.length);\n            CodeMirror.Vim.handleKey(cm, key, 'mapping');\n          }\n        }\n\n        function handleKeyInsertMode() {\n          if (handleEsc()) { return true; }\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          var keysAreChars = key.length == 1;\n          var match = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n          // Need to check all key substrings in insert mode.\n          while (keys.length > 1 && match.type != 'full') {\n            var keys = vim.inputState.keyBuffer = keys.slice(1);\n            var thisMatch = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n            if (thisMatch.type != 'none') { match = thisMatch; }\n          }\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') {\n            if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n            lastInsertModeKeyTimer = window.setTimeout(\n              function() { if (vim.insertMode && vim.inputState.keyBuffer) { clearInputState(cm); } },\n              getOption('insertModeEscKeysTimeout'));\n            return !keysAreChars;\n          }\n\n          if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n          if (keysAreChars) {\n            var selections = cm.listSelections();\n            for (var i = 0; i < selections.length; i++) {\n              var here = selections[i].head;\n              cm.replaceRange('', offsetCursor(here, 0, -(keys.length - 1)), here, '+input');\n            }\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes.pop();\n          }\n          clearInputState(cm);\n          return match.command;\n        }\n\n        function handleKeyNonInsertMode() {\n          if (handleMacroRecording() || handleEsc()) { return true; }\n\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          if (/^[1-9]\\d*$/.test(keys)) { return true; }\n\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (!keysMatcher) { clearInputState(cm); return false; }\n          var context = vim.visualMode ? 'visual' :\n                                         'normal';\n          var match = commandDispatcher.matchCommand(keysMatcher[2] || keysMatcher[1], defaultKeymap, vim.inputState, context);\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') { return true; }\n\n          vim.inputState.keyBuffer = '';\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (keysMatcher[1] && keysMatcher[1] != '0') {\n            vim.inputState.pushRepeatDigit(keysMatcher[1]);\n          }\n          return match.command;\n        }\n\n        var command;\n        if (vim.insertMode) { command = handleKeyInsertMode(); }\n        else { command = handleKeyNonInsertMode(); }\n        if (command === false) {\n          return !vim.insertMode && key.length === 1 ? function() { return true; } : undefined;\n        } else if (command === true) {\n          // TODO: Look into using CodeMirror's multi-key handling.\n          // Return no-op since we are caching the key. Counts as handled, but\n          // don't want act on it just yet.\n          return function() { return true; };\n        } else {\n          return function() {\n            return cm.operation(function() {\n              cm.curOp.isVimOp = true;\n              try {\n                if (command.type == 'keyToKey') {\n                  doKeyToKey(command.toKeys);\n                } else {\n                  commandDispatcher.processCommand(cm, vim, command);\n                }\n              } catch (e) {\n                // clear VIM state in case it's in a bad state.\n                cm.state.vim = undefined;\n                maybeInitVimState(cm);\n                if (!CodeMirror.Vim.suppressErrorLogging) {\n                  console['log'](e);\n                }\n                throw e;\n              }\n              return true;\n            });\n          };\n        }\n      },\n      handleEx: function(cm, input) {\n        exCommandDispatcher.processCommand(cm, input);\n      },\n\n      defineMotion: defineMotion,\n      defineAction: defineAction,\n      defineOperator: defineOperator,\n      mapCommand: mapCommand,\n      _mapCommand: _mapCommand,\n\n      defineRegister: defineRegister,\n\n      exitVisualMode: exitVisualMode,\n      exitInsertMode: exitInsertMode\n    };\n\n    // Represents the current input state.\n    function InputState() {\n      this.prefixRepeat = [];\n      this.motionRepeat = [];\n\n      this.operator = null;\n      this.operatorArgs = null;\n      this.motion = null;\n      this.motionArgs = null;\n      this.keyBuffer = []; // For matching multi-key commands.\n      this.registerName = null; // Defaults to the unnamed register.\n    }\n    InputState.prototype.pushRepeatDigit = function(n) {\n      if (!this.operator) {\n        this.prefixRepeat = this.prefixRepeat.concat(n);\n      } else {\n        this.motionRepeat = this.motionRepeat.concat(n);\n      }\n    };\n    InputState.prototype.getRepeat = function() {\n      var repeat = 0;\n      if (this.prefixRepeat.length > 0 || this.motionRepeat.length > 0) {\n        repeat = 1;\n        if (this.prefixRepeat.length > 0) {\n          repeat *= parseInt(this.prefixRepeat.join(''), 10);\n        }\n        if (this.motionRepeat.length > 0) {\n          repeat *= parseInt(this.motionRepeat.join(''), 10);\n        }\n      }\n      return repeat;\n    };\n\n    function clearInputState(cm, reason) {\n      cm.state.vim.inputState = new InputState();\n      CodeMirror.signal(cm, 'vim-command-done', reason);\n    }\n\n    /*\n     * Register stores information about copy and paste registers.  Besides\n     * text, a register must store whether it is linewise (i.e., when it is\n     * pasted, should it insert itself into a new line, or should the text be\n     * inserted at the cursor position.)\n     */\n    function Register(text, linewise, blockwise) {\n      this.clear();\n      this.keyBuffer = [text || ''];\n      this.insertModeChanges = [];\n      this.searchQueries = [];\n      this.linewise = !!linewise;\n      this.blockwise = !!blockwise;\n    }\n    Register.prototype = {\n      setText: function(text, linewise, blockwise) {\n        this.keyBuffer = [text || ''];\n        this.linewise = !!linewise;\n        this.blockwise = !!blockwise;\n      },\n      pushText: function(text, linewise) {\n        // if this register has ever been set to linewise, use linewise.\n        if (linewise) {\n          if (!this.linewise) {\n            this.keyBuffer.push('\\n');\n          }\n          this.linewise = true;\n        }\n        this.keyBuffer.push(text);\n      },\n      pushInsertModeChanges: function(changes) {\n        this.insertModeChanges.push(createInsertModeChanges(changes));\n      },\n      pushSearchQuery: function(query) {\n        this.searchQueries.push(query);\n      },\n      clear: function() {\n        this.keyBuffer = [];\n        this.insertModeChanges = [];\n        this.searchQueries = [];\n        this.linewise = false;\n      },\n      toString: function() {\n        return this.keyBuffer.join('');\n      }\n    };\n\n    /**\n     * Defines an external register.\n     *\n     * The name should be a single character that will be used to reference the register.\n     * The register should support setText, pushText, clear, and toString(). See Register\n     * for a reference implementation.\n     */\n    function defineRegister(name, register) {\n      var registers = vimGlobalState.registerController.registers;\n      if (!name || name.length != 1) {\n        throw Error('Register name must be 1 character');\n      }\n      if (registers[name]) {\n        throw Error('Register already defined ' + name);\n      }\n      registers[name] = register;\n      validRegisters.push(name);\n    }\n\n    /*\n     * vim registers allow you to keep many independent copy and paste buffers.\n     * See http://usevim.com/2012/04/13/registers/ for an introduction.\n     *\n     * RegisterController keeps the state of all the registers.  An initial\n     * state may be passed in.  The unnamed register '\"' will always be\n     * overridden.\n     */\n    function RegisterController(registers) {\n      this.registers = registers;\n      this.unnamedRegister = registers['\"'] = new Register();\n      registers['.'] = new Register();\n      registers[':'] = new Register();\n      registers['/'] = new Register();\n    }\n    RegisterController.prototype = {\n      pushText: function(registerName, operator, text, linewise, blockwise) {\n        // The black hole register, \"_, means delete/yank to nowhere.\n        if (registerName === '_') return;\n        if (linewise && text.charAt(text.length - 1) !== '\\n'){\n          text += '\\n';\n        }\n        // Lowercase and uppercase registers refer to the same register.\n        // Uppercase just means append.\n        var register = this.isValidRegister(registerName) ?\n            this.getRegister(registerName) : null;\n        // if no register/an invalid register was specified, things go to the\n        // default registers\n        if (!register) {\n          switch (operator) {\n            case 'yank':\n              // The 0 register contains the text from the most recent yank.\n              this.registers['0'] = new Register(text, linewise, blockwise);\n              break;\n            case 'delete':\n            case 'change':\n              if (text.indexOf('\\n') == -1) {\n                // Delete less than 1 line. Update the small delete register.\n                this.registers['-'] = new Register(text, linewise);\n              } else {\n                // Shift down the contents of the numbered registers and put the\n                // deleted text into register 1.\n                this.shiftNumericRegisters_();\n                this.registers['1'] = new Register(text, linewise);\n              }\n              break;\n          }\n          // Make sure the unnamed register is set to what just happened\n          this.unnamedRegister.setText(text, linewise, blockwise);\n          return;\n        }\n\n        // If we've gotten to this point, we've actually specified a register\n        var append = isUpperCase(registerName);\n        if (append) {\n          register.pushText(text, linewise);\n        } else {\n          register.setText(text, linewise, blockwise);\n        }\n        // The unnamed register always has the same value as the last used\n        // register.\n        this.unnamedRegister.setText(register.toString(), linewise);\n      },\n      // Gets the register named @name.  If one of @name doesn't already exist,\n      // create it.  If @name is invalid, return the unnamedRegister.\n      getRegister: function(name) {\n        if (!this.isValidRegister(name)) {\n          return this.unnamedRegister;\n        }\n        name = name.toLowerCase();\n        if (!this.registers[name]) {\n          this.registers[name] = new Register();\n        }\n        return this.registers[name];\n      },\n      isValidRegister: function(name) {\n        return name && inArray(name, validRegisters);\n      },\n      shiftNumericRegisters_: function() {\n        for (var i = 9; i >= 2; i--) {\n          this.registers[i] = this.getRegister('' + (i - 1));\n        }\n      }\n    };\n    function HistoryController() {\n        this.historyBuffer = [];\n        this.iterator = 0;\n        this.initialPrefix = null;\n    }\n    HistoryController.prototype = {\n      // the input argument here acts a user entered prefix for a small time\n      // until we start autocompletion in which case it is the autocompleted.\n      nextMatch: function (input, up) {\n        var historyBuffer = this.historyBuffer;\n        var dir = up ? -1 : 1;\n        if (this.initialPrefix === null) this.initialPrefix = input;\n        for (var i = this.iterator + dir; up ? i >= 0 : i < historyBuffer.length; i+= dir) {\n          var element = historyBuffer[i];\n          for (var j = 0; j <= element.length; j++) {\n            if (this.initialPrefix == element.substring(0, j)) {\n              this.iterator = i;\n              return element;\n            }\n          }\n        }\n        // should return the user input in case we reach the end of buffer.\n        if (i >= historyBuffer.length) {\n          this.iterator = historyBuffer.length;\n          return this.initialPrefix;\n        }\n        // return the last autocompleted query or exCommand as it is.\n        if (i < 0 ) return input;\n      },\n      pushInput: function(input) {\n        var index = this.historyBuffer.indexOf(input);\n        if (index > -1) this.historyBuffer.splice(index, 1);\n        if (input.length) this.historyBuffer.push(input);\n      },\n      reset: function() {\n        this.initialPrefix = null;\n        this.iterator = this.historyBuffer.length;\n      }\n    };\n    var commandDispatcher = {\n      matchCommand: function(keys, keyMap, inputState, context) {\n        var matches = commandMatches(keys, keyMap, context, inputState);\n        if (!matches.full && !matches.partial) {\n          return {type: 'none'};\n        } else if (!matches.full && matches.partial) {\n          return {type: 'partial'};\n        }\n\n        var bestMatch;\n        for (var i = 0; i < matches.full.length; i++) {\n          var match = matches.full[i];\n          if (!bestMatch) {\n            bestMatch = match;\n          }\n        }\n        if (bestMatch.keys.slice(-11) == '<character>') {\n          var character = lastChar(keys);\n          if (!character) return {type: 'none'};\n          inputState.selectedCharacter = character;\n        }\n        return {type: 'full', command: bestMatch};\n      },\n      processCommand: function(cm, vim, command) {\n        vim.inputState.repeatOverride = command.repeatOverride;\n        switch (command.type) {\n          case 'motion':\n            this.processMotion(cm, vim, command);\n            break;\n          case 'operator':\n            this.processOperator(cm, vim, command);\n            break;\n          case 'operatorMotion':\n            this.processOperatorMotion(cm, vim, command);\n            break;\n          case 'action':\n            this.processAction(cm, vim, command);\n            break;\n          case 'search':\n            this.processSearch(cm, vim, command);\n            break;\n          case 'ex':\n          case 'keyToEx':\n            this.processEx(cm, vim, command);\n            break;\n          default:\n            break;\n        }\n      },\n      processMotion: function(cm, vim, command) {\n        vim.inputState.motion = command.motion;\n        vim.inputState.motionArgs = copyArgs(command.motionArgs);\n        this.evalInput(cm, vim);\n      },\n      processOperator: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        if (inputState.operator) {\n          if (inputState.operator == command.operator) {\n            // Typing an operator twice like 'dd' makes the operator operate\n            // linewise\n            inputState.motion = 'expandToLine';\n            inputState.motionArgs = { linewise: true };\n            this.evalInput(cm, vim);\n            return;\n          } else {\n            // 2 different operators in a row doesn't make sense.\n            clearInputState(cm);\n          }\n        }\n        inputState.operator = command.operator;\n        inputState.operatorArgs = copyArgs(command.operatorArgs);\n        if (command.exitVisualBlock) {\n            vim.visualBlock = false;\n            updateCmSelection(cm);\n        }\n        if (vim.visualMode) {\n          // Operating on a selection in visual mode. We don't need a motion.\n          this.evalInput(cm, vim);\n        }\n      },\n      processOperatorMotion: function(cm, vim, command) {\n        var visualMode = vim.visualMode;\n        var operatorMotionArgs = copyArgs(command.operatorMotionArgs);\n        if (operatorMotionArgs) {\n          // Operator motions may have special behavior in visual mode.\n          if (visualMode && operatorMotionArgs.visualLine) {\n            vim.visualLine = true;\n          }\n        }\n        this.processOperator(cm, vim, command);\n        if (!visualMode) {\n          this.processMotion(cm, vim, command);\n        }\n      },\n      processAction: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        var repeat = inputState.getRepeat();\n        var repeatIsExplicit = !!repeat;\n        var actionArgs = copyArgs(command.actionArgs) || {};\n        if (inputState.selectedCharacter) {\n          actionArgs.selectedCharacter = inputState.selectedCharacter;\n        }\n        // Actions may or may not have motions and operators. Do these first.\n        if (command.operator) {\n          this.processOperator(cm, vim, command);\n        }\n        if (command.motion) {\n          this.processMotion(cm, vim, command);\n        }\n        if (command.motion || command.operator) {\n          this.evalInput(cm, vim);\n        }\n        actionArgs.repeat = repeat || 1;\n        actionArgs.repeatIsExplicit = repeatIsExplicit;\n        actionArgs.registerName = inputState.registerName;\n        clearInputState(cm);\n        vim.lastMotion = null;\n        if (command.isEdit) {\n          this.recordLastEdit(vim, inputState, command);\n        }\n        actions[command.action](cm, actionArgs, vim);\n      },\n      processSearch: function(cm, vim, command) {\n        if (!cm.getSearchCursor) {\n          // Search depends on SearchCursor.\n          return;\n        }\n        var forward = command.searchArgs.forward;\n        var wholeWordOnly = command.searchArgs.wholeWordOnly;\n        getSearchState(cm).setReversed(!forward);\n        var promptPrefix = (forward) ? '/' : '?';\n        var originalQuery = getSearchState(cm).getQuery();\n        var originalScrollPos = cm.getScrollInfo();\n        function handleQuery(query, ignoreCase, smartCase) {\n          vimGlobalState.searchHistoryController.pushInput(query);\n          vimGlobalState.searchHistoryController.reset();\n          try {\n            updateSearchQuery(cm, query, ignoreCase, smartCase);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + query);\n            clearInputState(cm);\n            return;\n          }\n          commandDispatcher.processMotion(cm, vim, {\n            type: 'motion',\n            motion: 'findNext',\n            motionArgs: { forward: true, toJumplist: command.searchArgs.toJumplist }\n          });\n        }\n        function onPromptClose(query) {\n          cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          handleQuery(query, true /** ignoreCase */, true /** smartCase */);\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            logSearchQuery(macroModeState, query);\n          }\n        }\n        function onPromptKeyUp(e, query, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Up' || keyName == 'Down') {\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            query = vimGlobalState.searchHistoryController.nextMatch(query, up) || '';\n            close(query);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.searchHistoryController.reset();\n          }\n          var parsedQuery;\n          try {\n            parsedQuery = updateSearchQuery(cm, query,\n                true /** ignoreCase */, true /** smartCase */);\n          } catch (e) {\n            // Swallow bad regexes for incremental search.\n          }\n          if (parsedQuery) {\n            cm.scrollIntoView(findNext(cm, !forward, parsedQuery), 30);\n          } else {\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          }\n        }\n        function onPromptKeyDown(e, query, close) {\n          var keyName = CodeMirror.keyName(e);\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && query == '')) {\n            vimGlobalState.searchHistoryController.pushInput(query);\n            vimGlobalState.searchHistoryController.reset();\n            updateSearchQuery(cm, originalQuery);\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          } else if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          }\n        }\n        switch (command.searchArgs.querySrc) {\n          case 'prompt':\n            var macroModeState = vimGlobalState.macroModeState;\n            if (macroModeState.isPlaying) {\n              var query = macroModeState.replaySearchQueries.shift();\n              handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            } else {\n              showPrompt(cm, {\n                  onClose: onPromptClose,\n                  prefix: promptPrefix,\n                  desc: '(JavaScript regexp)',\n                  onKeyUp: onPromptKeyUp,\n                  onKeyDown: onPromptKeyDown\n              });\n            }\n            break;\n          case 'wordUnderCursor':\n            var word = expandWordUnderCursor(cm, false /** inclusive */,\n                true /** forward */, false /** bigWord */,\n                true /** noSymbol */);\n            var isKeyword = true;\n            if (!word) {\n              word = expandWordUnderCursor(cm, false /** inclusive */,\n                  true /** forward */, false /** bigWord */,\n                  false /** noSymbol */);\n              isKeyword = false;\n            }\n            if (!word) {\n              return;\n            }\n            var query = cm.getLine(word.start.line).substring(word.start.ch,\n                word.end.ch);\n            if (isKeyword && wholeWordOnly) {\n                query = '\\\\b' + query + '\\\\b';\n            } else {\n              query = escapeRegex(query);\n            }\n\n            // cachedCursor is used to save the old position of the cursor\n            // when * or # causes vim to seek for the nearest word and shift\n            // the cursor before entering the motion.\n            vimGlobalState.jumpList.cachedCursor = cm.getCursor();\n            cm.setCursor(word.start);\n\n            handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            break;\n        }\n      },\n      processEx: function(cm, vim, command) {\n        function onPromptClose(input) {\n          // Give the prompt some time to close so that if processCommand shows\n          // an error, the elements don't overlap.\n          vimGlobalState.exCommandHistoryController.pushInput(input);\n          vimGlobalState.exCommandHistoryController.reset();\n          exCommandDispatcher.processCommand(cm, input);\n        }\n        function onPromptKeyDown(e, input, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && input == '')) {\n            vimGlobalState.exCommandHistoryController.pushInput(input);\n            vimGlobalState.exCommandHistoryController.reset();\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          }\n          if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            input = vimGlobalState.exCommandHistoryController.nextMatch(input, up) || '';\n            close(input);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.exCommandHistoryController.reset();\n          }\n        }\n        if (command.type == 'keyToEx') {\n          // Handle user defined Ex to Ex mappings\n          exCommandDispatcher.processCommand(cm, command.exArgs.input);\n        } else {\n          if (vim.visualMode) {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':', value: '\\'<,\\'>',\n                onKeyDown: onPromptKeyDown, selectValueOnOpen: false});\n          } else {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':',\n                onKeyDown: onPromptKeyDown});\n          }\n        }\n      },\n      evalInput: function(cm, vim) {\n        // If the motion command is set, execute both the operator and motion.\n        // Otherwise return.\n        var inputState = vim.inputState;\n        var motion = inputState.motion;\n        var motionArgs = inputState.motionArgs || {};\n        var operator = inputState.operator;\n        var operatorArgs = inputState.operatorArgs || {};\n        var registerName = inputState.registerName;\n        var sel = vim.sel;\n        // TODO: Make sure cm and vim selections are identical outside visual mode.\n        var origHead = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.head): cm.getCursor('head'));\n        var origAnchor = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.anchor) : cm.getCursor('anchor'));\n        var oldHead = copyCursor(origHead);\n        var oldAnchor = copyCursor(origAnchor);\n        var newHead, newAnchor;\n        var repeat;\n        if (operator) {\n          this.recordLastEdit(vim, inputState);\n        }\n        if (inputState.repeatOverride !== undefined) {\n          // If repeatOverride is specified, that takes precedence over the\n          // input state's repeat. Used by Ex mode and can be user defined.\n          repeat = inputState.repeatOverride;\n        } else {\n          repeat = inputState.getRepeat();\n        }\n        if (repeat > 0 && motionArgs.explicitRepeat) {\n          motionArgs.repeatIsExplicit = true;\n        } else if (motionArgs.noRepeat ||\n            (!motionArgs.explicitRepeat && repeat === 0)) {\n          repeat = 1;\n          motionArgs.repeatIsExplicit = false;\n        }\n        if (inputState.selectedCharacter) {\n          // If there is a character input, stick it in all of the arg arrays.\n          motionArgs.selectedCharacter = operatorArgs.selectedCharacter =\n              inputState.selectedCharacter;\n        }\n        motionArgs.repeat = repeat;\n        clearInputState(cm);\n        if (motion) {\n          var motionResult = motions[motion](cm, origHead, motionArgs, vim, inputState);\n          vim.lastMotion = motions[motion];\n          if (!motionResult) {\n            return;\n          }\n          if (motionArgs.toJumplist) {\n            var jumpList = vimGlobalState.jumpList;\n            // if the current motion is # or *, use cachedCursor\n            var cachedCursor = jumpList.cachedCursor;\n            if (cachedCursor) {\n              recordJumpPosition(cm, cachedCursor, motionResult);\n              delete jumpList.cachedCursor;\n            } else {\n              recordJumpPosition(cm, origHead, motionResult);\n            }\n          }\n          if (motionResult instanceof Array) {\n            newAnchor = motionResult[0];\n            newHead = motionResult[1];\n          } else {\n            newHead = motionResult;\n          }\n          // TODO: Handle null returns from motion commands better.\n          if (!newHead) {\n            newHead = copyCursor(origHead);\n          }\n          if (vim.visualMode) {\n            if (!(vim.visualBlock && newHead.ch === Infinity)) {\n              newHead = clipCursorToContent(cm, newHead);\n            }\n            if (newAnchor) {\n              newAnchor = clipCursorToContent(cm, newAnchor);\n            }\n            newAnchor = newAnchor || oldAnchor;\n            sel.anchor = newAnchor;\n            sel.head = newHead;\n            updateCmSelection(cm);\n            updateMark(cm, vim, '<',\n                cursorIsBefore(newAnchor, newHead) ? newAnchor\n                    : newHead);\n            updateMark(cm, vim, '>',\n                cursorIsBefore(newAnchor, newHead) ? newHead\n                    : newAnchor);\n          } else if (!operator) {\n            newHead = clipCursorToContent(cm, newHead);\n            cm.setCursor(newHead.line, newHead.ch);\n          }\n        }\n        if (operator) {\n          if (operatorArgs.lastSel) {\n            // Replaying a visual mode operation\n            newAnchor = oldAnchor;\n            var lastSel = operatorArgs.lastSel;\n            var lineOffset = Math.abs(lastSel.head.line - lastSel.anchor.line);\n            var chOffset = Math.abs(lastSel.head.ch - lastSel.anchor.ch);\n            if (lastSel.visualLine) {\n              // Linewise Visual mode: The same number of lines.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            } else if (lastSel.visualBlock) {\n              // Blockwise Visual mode: The same number of lines and columns.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch + chOffset);\n            } else if (lastSel.head.line == lastSel.anchor.line) {\n              // Normal Visual mode within one line: The same number of characters.\n              newHead = Pos(oldAnchor.line, oldAnchor.ch + chOffset);\n            } else {\n              // Normal Visual mode with several lines: The same number of lines, in the\n              // last line the same number of characters as in the last line the last time.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            }\n            vim.visualMode = true;\n            vim.visualLine = lastSel.visualLine;\n            vim.visualBlock = lastSel.visualBlock;\n            sel = vim.sel = {\n              anchor: newAnchor,\n              head: newHead\n            };\n            updateCmSelection(cm);\n          } else if (vim.visualMode) {\n            operatorArgs.lastSel = {\n              anchor: copyCursor(sel.anchor),\n              head: copyCursor(sel.head),\n              visualBlock: vim.visualBlock,\n              visualLine: vim.visualLine\n            };\n          }\n          var curStart, curEnd, linewise, mode;\n          var cmSel;\n          if (vim.visualMode) {\n            // Init visual op\n            curStart = cursorMin(sel.head, sel.anchor);\n            curEnd = cursorMax(sel.head, sel.anchor);\n            linewise = vim.visualLine || operatorArgs.linewise;\n            mode = vim.visualBlock ? 'block' :\n                   linewise ? 'line' :\n                   'char';\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode);\n            if (linewise) {\n              var ranges = cmSel.ranges;\n              if (mode == 'block') {\n                // Linewise operators in visual block mode extend to end of line\n                for (var i = 0; i < ranges.length; i++) {\n                  ranges[i].head.ch = lineLength(cm, ranges[i].head.line);\n                }\n              } else if (mode == 'line') {\n                ranges[0].head = Pos(ranges[0].head.line + 1, 0);\n              }\n            }\n          } else {\n            // Init motion op\n            curStart = copyCursor(newAnchor || oldAnchor);\n            curEnd = copyCursor(newHead || oldHead);\n            if (cursorIsBefore(curEnd, curStart)) {\n              var tmp = curStart;\n              curStart = curEnd;\n              curEnd = tmp;\n            }\n            linewise = motionArgs.linewise || operatorArgs.linewise;\n            if (linewise) {\n              // Expand selection to entire line.\n              expandSelectionToLine(cm, curStart, curEnd);\n            } else if (motionArgs.forward) {\n              // Clip to trailing newlines only if the motion goes forward.\n              clipToLine(cm, curStart, curEnd);\n            }\n            mode = 'char';\n            var exclusive = !motionArgs.inclusive || linewise;\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode, exclusive);\n          }\n          cm.setSelections(cmSel.ranges, cmSel.primary);\n          vim.lastMotion = null;\n          operatorArgs.repeat = repeat; // For indent in visual mode.\n          operatorArgs.registerName = registerName;\n          // Keep track of linewise as it affects how paste and change behave.\n          operatorArgs.linewise = linewise;\n          var operatorMoveTo = operators[operator](\n            cm, operatorArgs, cmSel.ranges, oldAnchor, newHead);\n          if (vim.visualMode) {\n            exitVisualMode(cm, operatorMoveTo != null);\n          }\n          if (operatorMoveTo) {\n            cm.setCursor(operatorMoveTo);\n          }\n        }\n      },\n      recordLastEdit: function(vim, inputState, actionCommand) {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        vim.lastEditInputState = inputState;\n        vim.lastEditActionCommand = actionCommand;\n        macroModeState.lastInsertModeChanges.changes = [];\n        macroModeState.lastInsertModeChanges.expectCursorActivityForChange = false;\n        macroModeState.lastInsertModeChanges.visualBlock = vim.visualBlock ? vim.sel.head.line - vim.sel.anchor.line : 0;\n      }\n    };\n\n    /**\n     * typedef {Object{line:number,ch:number}} Cursor An object containing the\n     *     position of the cursor.\n     */\n    // All of the functions below return Cursor objects.\n    var motions = {\n      moveToTopLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).top + motionArgs.repeat -1;\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToMiddleLine: function(cm) {\n        var range = getUserVisibleLines(cm);\n        var line = Math.floor((range.top + range.bottom) * 0.5);\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToBottomLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).bottom - motionArgs.repeat +1;\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      expandToLine: function(_cm, head, motionArgs) {\n        // Expands forward to end of line, and then to next line if repeat is\n        // >1. Does not handle backward motion!\n        var cur = head;\n        return Pos(cur.line + motionArgs.repeat - 1, Infinity);\n      },\n      findNext: function(cm, _head, motionArgs) {\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        if (!query) {\n          return;\n        }\n        var prev = !motionArgs.forward;\n        // If search is initiated with ? instead of /, negate direction.\n        prev = (state.isReversed()) ? !prev : prev;\n        highlightSearchMatches(cm, query);\n        return findNext(cm, prev/** prev */, query, motionArgs.repeat);\n      },\n      /**\n       * Find and select the next occurrence of the search query. If the cursor is currently\n       * within a match, then find and select the current match. Otherwise, find the next occurrence in the\n       * appropriate direction.\n       *\n       * This differs from `findNext` in the following ways:\n       *\n       * 1. Instead of only returning the \"from\", this returns a \"from\", \"to\" range.\n       * 2. If the cursor is currently inside a search match, this selects the current match\n       *    instead of the next match.\n       * 3. If there is no associated operator, this will turn on visual mode.\n       */\n      findAndSelectNextInclusive: function(cm, _head, motionArgs, vim, prevInputState) {\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n\n        if (!query) {\n          return;\n        }\n\n        var prev = !motionArgs.forward;\n        prev = (state.isReversed()) ? !prev : prev;\n\n        // next: [from, to] | null\n        var next = findNextFromAndToInclusive(cm, prev, query, motionArgs.repeat, vim);\n\n        // No matches.\n        if (!next) {\n          return;\n        }\n\n        // If there's an operator that will be executed, return the selection.\n        if (prevInputState.operator) {\n          return next;\n        }\n\n        // At this point, we know that there is no accompanying operator -- let's\n        // deal with visual mode in order to select an appropriate match.\n\n        var from = next[0];\n        // For whatever reason, when we use the \"to\" as returned by searchcursor.js directly,\n        // the resulting selection is extended by 1 char. Let's shrink it so that only the\n        // match is selected.\n        var to = Pos(next[1].line, next[1].ch - 1);\n\n        if (vim.visualMode) {\n          // If we were in visualLine or visualBlock mode, get out of it.\n          if (vim.visualLine || vim.visualBlock) {\n            vim.visualLine = false;\n            vim.visualBlock = false;\n            CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: \"\"});\n          }\n\n          // If we're currently in visual mode, we should extend the selection to include\n          // the search result.\n          var anchor = vim.sel.anchor;\n          if (anchor) {\n            if (state.isReversed()) {\n              if (motionArgs.forward) {\n                return [anchor, from];\n              }\n\n              return [anchor, to];\n            } else {\n              if (motionArgs.forward) {\n                return [anchor, to];\n              }\n\n              return [anchor, from];\n            }\n          }\n        } else {\n          // Let's turn visual mode on.\n          vim.visualMode = true;\n          vim.visualLine = false;\n          vim.visualBlock = false;\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: \"\"});\n        }\n\n        return prev ? [to, from] : [from, to];\n      },\n      goToMark: function(cm, _head, motionArgs, vim) {\n        var pos = getMarkPos(cm, vim, motionArgs.selectedCharacter);\n        if (pos) {\n          return motionArgs.linewise ? { line: pos.line, ch: findFirstNonWhiteSpaceCharacter(cm.getLine(pos.line)) } : pos;\n        }\n        return null;\n      },\n      moveToOtherHighlightedEnd: function(cm, _head, motionArgs, vim) {\n        if (vim.visualBlock && motionArgs.sameLine) {\n          var sel = vim.sel;\n          return [\n            clipCursorToContent(cm, Pos(sel.anchor.line, sel.head.ch)),\n            clipCursorToContent(cm, Pos(sel.head.line, sel.anchor.ch))\n          ];\n        } else {\n          return ([vim.sel.head, vim.sel.anchor]);\n        }\n      },\n      jumpToMark: function(cm, head, motionArgs, vim) {\n        var best = head;\n        for (var i = 0; i < motionArgs.repeat; i++) {\n          var cursor = best;\n          for (var key in vim.marks) {\n            if (!isLowerCase(key)) {\n              continue;\n            }\n            var mark = vim.marks[key].find();\n            var isWrongDirection = (motionArgs.forward) ?\n              cursorIsBefore(mark, cursor) : cursorIsBefore(cursor, mark);\n\n            if (isWrongDirection) {\n              continue;\n            }\n            if (motionArgs.linewise && (mark.line == cursor.line)) {\n              continue;\n            }\n\n            var equal = cursorEqual(cursor, best);\n            var between = (motionArgs.forward) ?\n              cursorIsBetween(cursor, mark, best) :\n              cursorIsBetween(best, mark, cursor);\n\n            if (equal || between) {\n              best = mark;\n            }\n          }\n        }\n\n        if (motionArgs.linewise) {\n          // Vim places the cursor on the first non-whitespace character of\n          // the line if there is one, else it places the cursor at the end\n          // of the line, regardless of whether a mark was found.\n          best = Pos(best.line, findFirstNonWhiteSpaceCharacter(cm.getLine(best.line)));\n        }\n        return best;\n      },\n      moveByCharacters: function(_cm, head, motionArgs) {\n        var cur = head;\n        var repeat = motionArgs.repeat;\n        var ch = motionArgs.forward ? cur.ch + repeat : cur.ch - repeat;\n        return Pos(cur.line, ch);\n      },\n      moveByLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        var endCh = cur.ch;\n        // Depending what our last motion was, we may want to do different\n        // things. If our last motion was moving vertically, we want to\n        // preserve the HPos from our last horizontal move.  If our last motion\n        // was going to the end of a line, moving vertically we should go to\n        // the end of the line, etc.\n        switch (vim.lastMotion) {\n          case this.moveByLines:\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveToColumn:\n          case this.moveToEol:\n            endCh = vim.lastHPos;\n            break;\n          default:\n            vim.lastHPos = endCh;\n        }\n        var repeat = motionArgs.repeat+(motionArgs.repeatOffset||0);\n        var line = motionArgs.forward ? cur.line + repeat : cur.line - repeat;\n        var first = cm.firstLine();\n        var last = cm.lastLine();\n        var posV = cm.findPosV(cur, (motionArgs.forward ? repeat : -repeat), 'line', vim.lastHSPos);\n        var hasMarkedText = motionArgs.forward ? posV.line > line : posV.line < line;\n        if (hasMarkedText) {\n          line = posV.line;\n          endCh = posV.ch;\n        }\n        // Vim go to line begin or line end when cursor at first/last line and\n        // move to previous/next line is triggered.\n        if (line < first && cur.line == first){\n          return this.moveToStartOfLine(cm, head, motionArgs, vim);\n        } else if (line > last && cur.line == last){\n            return moveToEol(cm, head, motionArgs, vim, true);\n        }\n        if (motionArgs.toFirstChar){\n          endCh=findFirstNonWhiteSpaceCharacter(cm.getLine(line));\n          vim.lastHPos = endCh;\n        }\n        vim.lastHSPos = cm.charCoords(Pos(line, endCh),'div').left;\n        return Pos(line, endCh);\n      },\n      moveByDisplayLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        switch (vim.lastMotion) {\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveByLines:\n          case this.moveToColumn:\n          case this.moveToEol:\n            break;\n          default:\n            vim.lastHSPos = cm.charCoords(cur,'div').left;\n        }\n        var repeat = motionArgs.repeat;\n        var res=cm.findPosV(cur,(motionArgs.forward ? repeat : -repeat),'line',vim.lastHSPos);\n        if (res.hitSide) {\n          if (motionArgs.forward) {\n            var lastCharCoords = cm.charCoords(res, 'div');\n            var goalCoords = { top: lastCharCoords.top + 8, left: vim.lastHSPos };\n            var res = cm.coordsChar(goalCoords, 'div');\n          } else {\n            var resCoords = cm.charCoords(Pos(cm.firstLine(), 0), 'div');\n            resCoords.left = vim.lastHSPos;\n            res = cm.coordsChar(resCoords, 'div');\n          }\n        }\n        vim.lastHPos = res.ch;\n        return res;\n      },\n      moveByPage: function(cm, head, motionArgs) {\n        // CodeMirror only exposes functions that move the cursor page down, so\n        // doing this bad hack to move the cursor and move it back. evalInput\n        // will move the cursor to where it should be in the end.\n        var curStart = head;\n        var repeat = motionArgs.repeat;\n        return cm.findPosV(curStart, (motionArgs.forward ? repeat : -repeat), 'page');\n      },\n      moveByParagraph: function(cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1;\n        return findParagraph(cm, head, motionArgs.repeat, dir);\n      },\n      moveBySentence: function(cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1;\n        return findSentence(cm, head, motionArgs.repeat, dir);\n      },\n      moveByScroll: function(cm, head, motionArgs, vim) {\n        var scrollbox = cm.getScrollInfo();\n        var curEnd = null;\n        var repeat = motionArgs.repeat;\n        if (!repeat) {\n          repeat = scrollbox.clientHeight / (2 * cm.defaultTextHeight());\n        }\n        var orig = cm.charCoords(head, 'local');\n        motionArgs.repeat = repeat;\n        var curEnd = motions.moveByDisplayLines(cm, head, motionArgs, vim);\n        if (!curEnd) {\n          return null;\n        }\n        var dest = cm.charCoords(curEnd, 'local');\n        cm.scrollTo(null, scrollbox.top + dest.top - orig.top);\n        return curEnd;\n      },\n      moveByWords: function(cm, head, motionArgs) {\n        return moveToWord(cm, head, motionArgs.repeat, !!motionArgs.forward,\n            !!motionArgs.wordEnd, !!motionArgs.bigWord);\n      },\n      moveTillCharacter: function(cm, _head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        var curEnd = moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter);\n        var increment = motionArgs.forward ? -1 : 1;\n        recordLastCharacterSearch(increment, motionArgs);\n        if (!curEnd) return null;\n        curEnd.ch += increment;\n        return curEnd;\n      },\n      moveToCharacter: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        recordLastCharacterSearch(0, motionArgs);\n        return moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToSymbol: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        return findSymbol(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToColumn: function(cm, head, motionArgs, vim) {\n        var repeat = motionArgs.repeat;\n        // repeat is equivalent to which column we want to move to!\n        vim.lastHPos = repeat - 1;\n        vim.lastHSPos = cm.charCoords(head,'div').left;\n        return moveToColumn(cm, repeat);\n      },\n      moveToEol: function(cm, head, motionArgs, vim) {\n        return moveToEol(cm, head, motionArgs, vim, false);\n      },\n      moveToFirstNonWhiteSpaceCharacter: function(cm, head) {\n        // Go to the start of the line where the text begins, or the end for\n        // whitespace-only lines\n        var cursor = head;\n        return Pos(cursor.line,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(cursor.line)));\n      },\n      moveToMatchedSymbol: function(cm, head) {\n        var cursor = head;\n        var line = cursor.line;\n        var ch = cursor.ch;\n        var lineText = cm.getLine(line);\n        var symbol;\n        for (; ch < lineText.length; ch++) {\n          symbol = lineText.charAt(ch);\n          if (symbol && isMatchableSymbol(symbol)) {\n            var style = cm.getTokenTypeAt(Pos(line, ch + 1));\n            if (style !== \"string\" && style !== \"comment\") {\n              break;\n            }\n          }\n        }\n        if (ch < lineText.length) {\n          // Only include angle brackets in analysis if they are being matched.\n          var re = (ch === '<' || ch === '>') ? /[(){}[\\]<>]/ : /[(){}[\\]]/;\n          var matched = cm.findMatchingBracket(Pos(line, ch), {bracketRegex: re});\n          return matched.to;\n        } else {\n          return cursor;\n        }\n      },\n      moveToStartOfLine: function(_cm, head) {\n        return Pos(head.line, 0);\n      },\n      moveToLineOrEdgeOfDocument: function(cm, _head, motionArgs) {\n        var lineNum = motionArgs.forward ? cm.lastLine() : cm.firstLine();\n        if (motionArgs.repeatIsExplicit) {\n          lineNum = motionArgs.repeat - cm.getOption('firstLineNumber');\n        }\n        return Pos(lineNum,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(lineNum)));\n      },\n      textObjectManipulation: function(cm, head, motionArgs, vim) {\n        // TODO: lots of possible exceptions that can be thrown here. Try da(\n        //     outside of a () block.\n        var mirroredPairs = {'(': ')', ')': '(',\n                             '{': '}', '}': '{',\n                             '[': ']', ']': '[',\n                             '<': '>', '>': '<'};\n        var selfPaired = {'\\'': true, '\"': true, '`': true};\n\n        var character = motionArgs.selectedCharacter;\n        // 'b' refers to  '()' block.\n        // 'B' refers to  '{}' block.\n        if (character == 'b') {\n          character = '(';\n        } else if (character == 'B') {\n          character = '{';\n        }\n\n        // Inclusive is the difference between a and i\n        // TODO: Instead of using the additional text object map to perform text\n        //     object operations, merge the map into the defaultKeyMap and use\n        //     motionArgs to define behavior. Define separate entries for 'aw',\n        //     'iw', 'a[', 'i[', etc.\n        var inclusive = !motionArgs.textObjectInner;\n\n        var tmp;\n        if (mirroredPairs[character]) {\n          tmp = selectCompanionObject(cm, head, character, inclusive);\n        } else if (selfPaired[character]) {\n          tmp = findBeginningAndEnd(cm, head, character, inclusive);\n        } else if (character === 'W') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     true /** bigWord */);\n        } else if (character === 'w') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     false /** bigWord */);\n        } else if (character === 'p') {\n          tmp = findParagraph(cm, head, motionArgs.repeat, 0, inclusive);\n          motionArgs.linewise = true;\n          if (vim.visualMode) {\n            if (!vim.visualLine) { vim.visualLine = true; }\n          } else {\n            var operatorArgs = vim.inputState.operatorArgs;\n            if (operatorArgs) { operatorArgs.linewise = true; }\n            tmp.end.line--;\n          }\n        } else if (character === 't') {\n          tmp = expandTagUnderCursor(cm, head, inclusive);\n        } else {\n          // No text object defined for this, don't move.\n          return null;\n        }\n\n        if (!cm.state.vim.visualMode) {\n          return [tmp.start, tmp.end];\n        } else {\n          return expandSelection(cm, tmp.start, tmp.end);\n        }\n      },\n\n      repeatLastCharacterSearch: function(cm, head, motionArgs) {\n        var lastSearch = vimGlobalState.lastCharacterSearch;\n        var repeat = motionArgs.repeat;\n        var forward = motionArgs.forward === lastSearch.forward;\n        var increment = (lastSearch.increment ? 1 : 0) * (forward ? -1 : 1);\n        cm.moveH(-increment, 'char');\n        motionArgs.inclusive = forward ? true : false;\n        var curEnd = moveToCharacter(cm, repeat, forward, lastSearch.selectedCharacter);\n        if (!curEnd) {\n          cm.moveH(increment, 'char');\n          return head;\n        }\n        curEnd.ch += increment;\n        return curEnd;\n      }\n    };\n\n    function defineMotion(name, fn) {\n      motions[name] = fn;\n    }\n\n    function fillArray(val, times) {\n      var arr = [];\n      for (var i = 0; i < times; i++) {\n        arr.push(val);\n      }\n      return arr;\n    }\n    /**\n     * An operator acts on a text selection. It receives the list of selections\n     * as input. The corresponding CodeMirror selection is guaranteed to\n    * match the input selection.\n     */\n    var operators = {\n      change: function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        var anchor = ranges[0].anchor,\n            head = ranges[0].head;\n        if (!vim.visualMode) {\n          text = cm.getRange(anchor, head);\n          var lastState = vim.lastEditInputState || {};\n          if (lastState.motion == \"moveByWords\" && !isWhiteSpaceString(text)) {\n            // Exclude trailing whitespace if the range is not all whitespace.\n            var match = (/\\s+$/).exec(text);\n            if (match && lastState.motionArgs && lastState.motionArgs.forward) {\n              head = offsetCursor(head, 0, - match[0].length);\n              text = text.slice(0, - match[0].length);\n            }\n          }\n          var prevLineEnd = new Pos(anchor.line - 1, Number.MAX_VALUE);\n          var wasLastLine = cm.firstLine() == cm.lastLine();\n          if (head.line > cm.lastLine() && args.linewise && !wasLastLine) {\n            cm.replaceRange('', prevLineEnd, head);\n          } else {\n            cm.replaceRange('', anchor, head);\n          }\n          if (args.linewise) {\n            // Push the next line back down, if there is a next line.\n            if (!wasLastLine) {\n              cm.setCursor(prevLineEnd);\n              CodeMirror.commands.newlineAndIndent(cm);\n            }\n            // make sure cursor ends up at the end of the line.\n            anchor.ch = Number.MAX_VALUE;\n          }\n          finalHead = anchor;\n        } else if (args.fullLine) {\n            head.ch = Number.MAX_VALUE;\n            head.line--;\n            cm.setSelection(anchor, head)\n            text = cm.getSelection();\n            cm.replaceSelection(\"\");\n            finalHead = anchor;\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = cursorMin(ranges[0].head, ranges[0].anchor);\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'change', text,\n            args.linewise, ranges.length > 1);\n        actions.enterInsertMode(cm, {head: finalHead}, cm.state.vim);\n      },\n      // delete is a javascript keyword.\n      'delete': function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        if (!vim.visualBlock) {\n          var anchor = ranges[0].anchor,\n              head = ranges[0].head;\n          if (args.linewise &&\n              head.line != cm.firstLine() &&\n              anchor.line == cm.lastLine() &&\n              anchor.line == head.line - 1) {\n            // Special case for dd on last line (and first line).\n            if (anchor.line == cm.firstLine()) {\n              anchor.ch = 0;\n            } else {\n              anchor = Pos(anchor.line - 1, lineLength(cm, anchor.line - 1));\n            }\n          }\n          text = cm.getRange(anchor, head);\n          cm.replaceRange('', anchor, head);\n          finalHead = anchor;\n          if (args.linewise) {\n            finalHead = motions.moveToFirstNonWhiteSpaceCharacter(cm, anchor);\n          }\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = ranges[0].anchor;\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'delete', text,\n            args.linewise, vim.visualBlock);\n        return clipCursorToContent(cm, finalHead);\n      },\n      indent: function(cm, args, ranges) {\n        var vim = cm.state.vim;\n        var startLine = ranges[0].anchor.line;\n        var endLine = vim.visualBlock ?\n          ranges[ranges.length - 1].anchor.line :\n          ranges[0].head.line;\n        // In visual mode, n> shifts the selection right n times, instead of\n        // shifting n lines right once.\n        var repeat = (vim.visualMode) ? args.repeat : 1;\n        if (args.linewise) {\n          // The only way to delete a newline is to delete until the start of\n          // the next line, so in linewise mode evalInput will include the next\n          // line. We don't want this in indent, so we go back a line.\n          endLine--;\n        }\n        for (var i = startLine; i <= endLine; i++) {\n          for (var j = 0; j < repeat; j++) {\n            cm.indentLine(i, args.indentRight);\n          }\n        }\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n      },\n      indentAuto: function(cm, _args, ranges) {\n        cm.execCommand(\"indentAuto\");\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n      },\n      changeCase: function(cm, args, ranges, oldAnchor, newHead) {\n        var selections = cm.getSelections();\n        var swapped = [];\n        var toLower = args.toLower;\n        for (var j = 0; j < selections.length; j++) {\n          var toSwap = selections[j];\n          var text = '';\n          if (toLower === true) {\n            text = toSwap.toLowerCase();\n          } else if (toLower === false) {\n            text = toSwap.toUpperCase();\n          } else {\n            for (var i = 0; i < toSwap.length; i++) {\n              var character = toSwap.charAt(i);\n              text += isUpperCase(character) ? character.toLowerCase() :\n                  character.toUpperCase();\n            }\n          }\n          swapped.push(text);\n        }\n        cm.replaceSelections(swapped);\n        if (args.shouldMoveCursor){\n          return newHead;\n        } else if (!cm.state.vim.visualMode && args.linewise && ranges[0].anchor.line + 1 == ranges[0].head.line) {\n          return motions.moveToFirstNonWhiteSpaceCharacter(cm, oldAnchor);\n        } else if (args.linewise){\n          return oldAnchor;\n        } else {\n          return cursorMin(ranges[0].anchor, ranges[0].head);\n        }\n      },\n      yank: function(cm, args, ranges, oldAnchor) {\n        var vim = cm.state.vim;\n        var text = cm.getSelection();\n        var endPos = vim.visualMode\n          ? cursorMin(vim.sel.anchor, vim.sel.head, ranges[0].head, ranges[0].anchor)\n          : oldAnchor;\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'yank',\n            text, args.linewise, vim.visualBlock);\n        return endPos;\n      }\n    };\n\n    function defineOperator(name, fn) {\n      operators[name] = fn;\n    }\n\n    var actions = {\n      jumpListWalk: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat;\n        var forward = actionArgs.forward;\n        var jumpList = vimGlobalState.jumpList;\n\n        var mark = jumpList.move(cm, forward ? repeat : -repeat);\n        var markPos = mark ? mark.find() : undefined;\n        markPos = markPos ? markPos : cm.getCursor();\n        cm.setCursor(markPos);\n      },\n      scroll: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat || 1;\n        var lineHeight = cm.defaultTextHeight();\n        var top = cm.getScrollInfo().top;\n        var delta = lineHeight * repeat;\n        var newPos = actionArgs.forward ? top + delta : top - delta;\n        var cursor = copyCursor(cm.getCursor());\n        var cursorCoords = cm.charCoords(cursor, 'local');\n        if (actionArgs.forward) {\n          if (newPos > cursorCoords.top) {\n             cursor.line += (newPos - cursorCoords.top) / lineHeight;\n             cursor.line = Math.ceil(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(null, cursorCoords.top);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        } else {\n          var newBottom = newPos + cm.getScrollInfo().clientHeight;\n          if (newBottom < cursorCoords.bottom) {\n             cursor.line -= (cursorCoords.bottom - newBottom) / lineHeight;\n             cursor.line = Math.floor(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(\n                 null, cursorCoords.bottom - cm.getScrollInfo().clientHeight);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        }\n      },\n      scrollToCursor: function(cm, actionArgs) {\n        var lineNum = cm.getCursor().line;\n        var charCoords = cm.charCoords(Pos(lineNum, 0), 'local');\n        var height = cm.getScrollInfo().clientHeight;\n        var y = charCoords.top;\n        var lineHeight = charCoords.bottom - y;\n        switch (actionArgs.position) {\n          case 'center': y = y - (height / 2) + lineHeight;\n            break;\n          case 'bottom': y = y - height + lineHeight;\n            break;\n        }\n        cm.scrollTo(null, y);\n      },\n      replayMacro: function(cm, actionArgs, vim) {\n        var registerName = actionArgs.selectedCharacter;\n        var repeat = actionArgs.repeat;\n        var macroModeState = vimGlobalState.macroModeState;\n        if (registerName == '@') {\n          registerName = macroModeState.latestRegister;\n        } else {\n          macroModeState.latestRegister = registerName;\n        }\n        while(repeat--){\n          executeMacroRegister(cm, vim, macroModeState, registerName);\n        }\n      },\n      enterMacroRecordMode: function(cm, actionArgs) {\n        var macroModeState = vimGlobalState.macroModeState;\n        var registerName = actionArgs.selectedCharacter;\n        if (vimGlobalState.registerController.isValidRegister(registerName)) {\n          macroModeState.enterMacroRecordMode(cm, registerName);\n        }\n      },\n      toggleOverwrite: function(cm) {\n        if (!cm.state.overwrite) {\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n      },\n      enterInsertMode: function(cm, actionArgs, vim) {\n        if (cm.getOption('readOnly')) { return; }\n        vim.insertMode = true;\n        vim.insertModeRepeat = actionArgs && actionArgs.repeat || 1;\n        var insertAt = (actionArgs) ? actionArgs.insertAt : null;\n        var sel = vim.sel;\n        var head = actionArgs.head || cm.getCursor('head');\n        var height = cm.listSelections().length;\n        if (insertAt == 'eol') {\n          head = Pos(head.line, lineLength(cm, head.line));\n        } else if (insertAt == 'bol') {\n          head = Pos(head.line, 0);\n        } else if (insertAt == 'charAfter') {\n          head = offsetCursor(head, 0, 1);\n        } else if (insertAt == 'firstNonBlank') {\n          head = motions.moveToFirstNonWhiteSpaceCharacter(cm, head);\n        } else if (insertAt == 'startOfSelectedArea') {\n          if (!vim.visualMode)\n              return;\n          if (!vim.visualBlock) {\n            if (sel.head.line < sel.anchor.line) {\n              head = sel.head;\n            } else {\n              head = Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.min(sel.head.ch, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'endOfSelectedArea') {\n            if (!vim.visualMode)\n              return;\n          if (!vim.visualBlock) {\n            if (sel.head.line >= sel.anchor.line) {\n              head = offsetCursor(sel.head, 0, 1);\n            } else {\n              head = Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.max(sel.head.ch + 1, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'inplace') {\n          if (vim.visualMode){\n            return;\n          }\n        } else if (insertAt == 'lastEdit') {\n          head = getLastEditPos(cm) || head;\n        }\n        cm.setOption('disableInput', false);\n        if (actionArgs && actionArgs.replace) {\n          // Handle Replace-mode as a special case of insert mode.\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n        if (!vimGlobalState.macroModeState.isPlaying) {\n          // Only record if not replaying.\n          cm.on('change', onChange);\n          CodeMirror.on(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        selectForInsert(cm, head, height);\n      },\n      toggleVisualMode: function(cm, actionArgs, vim) {\n        var repeat = actionArgs.repeat;\n        var anchor = cm.getCursor();\n        var head;\n        // TODO: The repeat should actually select number of characters/lines\n        //     equal to the repeat times the size of the previous visual\n        //     operation.\n        if (!vim.visualMode) {\n          // Entering visual mode\n          vim.visualMode = true;\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          head = clipCursorToContent(\n              cm, Pos(anchor.line, anchor.ch + repeat - 1));\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n        } else if (vim.visualLine ^ actionArgs.linewise ||\n            vim.visualBlock ^ actionArgs.blockwise) {\n          // Toggling between modes\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n        } else {\n          exitVisualMode(cm);\n        }\n      },\n      reselectLastSelection: function(cm, _actionArgs, vim) {\n        var lastSelection = vim.lastSelection;\n        if (vim.visualMode) {\n          updateLastSelection(cm, vim);\n        }\n        if (lastSelection) {\n          var anchor = lastSelection.anchorMark.find();\n          var head = lastSelection.headMark.find();\n          if (!anchor || !head) {\n            // If the marks have been destroyed due to edits, do nothing.\n            return;\n          }\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          vim.visualMode = true;\n          vim.visualLine = lastSelection.visualLine;\n          vim.visualBlock = lastSelection.visualBlock;\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n          CodeMirror.signal(cm, 'vim-mode-change', {\n            mode: 'visual',\n            subMode: vim.visualLine ? 'linewise' :\n                     vim.visualBlock ? 'blockwise' : ''});\n        }\n      },\n      joinLines: function(cm, actionArgs, vim) {\n        var curStart, curEnd;\n        if (vim.visualMode) {\n          curStart = cm.getCursor('anchor');\n          curEnd = cm.getCursor('head');\n          if (cursorIsBefore(curEnd, curStart)) {\n            var tmp = curEnd;\n            curEnd = curStart;\n            curStart = tmp;\n          }\n          curEnd.ch = lineLength(cm, curEnd.line) - 1;\n        } else {\n          // Repeat is the number of lines to join. Minimum 2 lines.\n          var repeat = Math.max(actionArgs.repeat, 2);\n          curStart = cm.getCursor();\n          curEnd = clipCursorToContent(cm, Pos(curStart.line + repeat - 1,\n                                               Infinity));\n        }\n        var finalCh = 0;\n        for (var i = curStart.line; i < curEnd.line; i++) {\n          finalCh = lineLength(cm, curStart.line);\n          var tmp = Pos(curStart.line + 1,\n                        lineLength(cm, curStart.line + 1));\n          var text = cm.getRange(curStart, tmp);\n          text = actionArgs.keepSpaces\n            ? text.replace(/\\n\\r?/g, '')\n            : text.replace(/\\n\\s*/g, ' ');\n          cm.replaceRange(text, curStart, tmp);\n        }\n        var curFinalPos = Pos(curStart.line, finalCh);\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curFinalPos);\n      },\n      newLineAndEnterInsertMode: function(cm, actionArgs, vim) {\n        vim.insertMode = true;\n        var insertAt = copyCursor(cm.getCursor());\n        if (insertAt.line === cm.firstLine() && !actionArgs.after) {\n          // Special case for inserting newline before start of document.\n          cm.replaceRange('\\n', Pos(cm.firstLine(), 0));\n          cm.setCursor(cm.firstLine(), 0);\n        } else {\n          insertAt.line = (actionArgs.after) ? insertAt.line :\n              insertAt.line - 1;\n          insertAt.ch = lineLength(cm, insertAt.line);\n          cm.setCursor(insertAt);\n          var newlineFn = CodeMirror.commands.newlineAndIndentContinueComment ||\n              CodeMirror.commands.newlineAndIndent;\n          newlineFn(cm);\n        }\n        this.enterInsertMode(cm, { repeat: actionArgs.repeat }, vim);\n      },\n      paste: function(cm, actionArgs, vim) {\n        var cur = copyCursor(cm.getCursor());\n        var register = vimGlobalState.registerController.getRegister(\n            actionArgs.registerName);\n        var text = register.toString();\n        if (!text) {\n          return;\n        }\n        if (actionArgs.matchIndent) {\n          var tabSize = cm.getOption(\"tabSize\");\n          // length that considers tabs and tabSize\n          var whitespaceLength = function(str) {\n            var tabs = (str.split(\"\\t\").length - 1);\n            var spaces = (str.split(\" \").length - 1);\n            return tabs * tabSize + spaces * 1;\n          };\n          var currentLine = cm.getLine(cm.getCursor().line);\n          var indent = whitespaceLength(currentLine.match(/^\\s*/)[0]);\n          // chomp last newline b/c don't want it to match /^\\s*/gm\n          var chompedText = text.replace(/\\n$/, '');\n          var wasChomped = text !== chompedText;\n          var firstIndent = whitespaceLength(text.match(/^\\s*/)[0]);\n          var text = chompedText.replace(/^\\s*/gm, function(wspace) {\n            var newIndent = indent + (whitespaceLength(wspace) - firstIndent);\n            if (newIndent < 0) {\n              return \"\";\n            }\n            else if (cm.getOption(\"indentWithTabs\")) {\n              var quotient = Math.floor(newIndent / tabSize);\n              return Array(quotient + 1).join('\\t');\n            }\n            else {\n              return Array(newIndent + 1).join(' ');\n            }\n          });\n          text += wasChomped ? \"\\n\" : \"\";\n        }\n        if (actionArgs.repeat > 1) {\n          var text = Array(actionArgs.repeat + 1).join(text);\n        }\n        var linewise = register.linewise;\n        var blockwise = register.blockwise;\n        if (blockwise) {\n          text = text.split('\\n');\n          if (linewise) {\n              text.pop();\n          }\n          for (var i = 0; i < text.length; i++) {\n            text[i] = (text[i] == '') ? ' ' : text[i];\n          }\n          cur.ch += actionArgs.after ? 1 : 0;\n          cur.ch = Math.min(lineLength(cm, cur.line), cur.ch);\n        } else if (linewise) {\n          if(vim.visualMode) {\n            text = vim.visualLine ? text.slice(0, -1) : '\\n' + text.slice(0, text.length - 1) + '\\n';\n          } else if (actionArgs.after) {\n            // Move the newline at the end to the start instead, and paste just\n            // before the newline character of the line we are on right now.\n            text = '\\n' + text.slice(0, text.length - 1);\n            cur.ch = lineLength(cm, cur.line);\n          } else {\n            cur.ch = 0;\n          }\n        } else {\n          cur.ch += actionArgs.after ? 1 : 0;\n        }\n        var curPosFinal;\n        var idx;\n        if (vim.visualMode) {\n          //  save the pasted text for reselection if the need arises\n          vim.lastPastedText = text;\n          var lastSelectionCurEnd;\n          var selectedArea = getSelectedAreaRange(cm, vim);\n          var selectionStart = selectedArea[0];\n          var selectionEnd = selectedArea[1];\n          var selectedText = cm.getSelection();\n          var selections = cm.listSelections();\n          var emptyStrings = new Array(selections.length).join('1').split('1');\n          // save the curEnd marker before it get cleared due to cm.replaceRange.\n          if (vim.lastSelection) {\n            lastSelectionCurEnd = vim.lastSelection.headMark.find();\n          }\n          // push the previously selected text to unnamed register\n          vimGlobalState.registerController.unnamedRegister.setText(selectedText);\n          if (blockwise) {\n            // first delete the selected text\n            cm.replaceSelections(emptyStrings);\n            // Set new selections as per the block length of the yanked text\n            selectionEnd = Pos(selectionStart.line + text.length-1, selectionStart.ch);\n            cm.setCursor(selectionStart);\n            selectBlock(cm, selectionEnd);\n            cm.replaceSelections(text);\n            curPosFinal = selectionStart;\n          } else if (vim.visualBlock) {\n            cm.replaceSelections(emptyStrings);\n            cm.setCursor(selectionStart);\n            cm.replaceRange(text, selectionStart, selectionStart);\n            curPosFinal = selectionStart;\n          } else {\n            cm.replaceRange(text, selectionStart, selectionEnd);\n            curPosFinal = cm.posFromIndex(cm.indexFromPos(selectionStart) + text.length - 1);\n          }\n          // restore the the curEnd marker\n          if(lastSelectionCurEnd) {\n            vim.lastSelection.headMark = cm.setBookmark(lastSelectionCurEnd);\n          }\n          if (linewise) {\n            curPosFinal.ch=0;\n          }\n        } else {\n          if (blockwise) {\n            cm.setCursor(cur);\n            for (var i = 0; i < text.length; i++) {\n              var line = cur.line+i;\n              if (line > cm.lastLine()) {\n                cm.replaceRange('\\n',  Pos(line, 0));\n              }\n              var lastCh = lineLength(cm, line);\n              if (lastCh < cur.ch) {\n                extendLineToColumn(cm, line, cur.ch);\n              }\n            }\n            cm.setCursor(cur);\n            selectBlock(cm, Pos(cur.line + text.length-1, cur.ch));\n            cm.replaceSelections(text);\n            curPosFinal = cur;\n          } else {\n            cm.replaceRange(text, cur);\n            // Now fine tune the cursor to where we want it.\n            if (linewise && actionArgs.after) {\n              curPosFinal = Pos(\n              cur.line + 1,\n              findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line + 1)));\n            } else if (linewise && !actionArgs.after) {\n              curPosFinal = Pos(\n                cur.line,\n                findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line)));\n            } else if (!linewise && actionArgs.after) {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length - 1);\n            } else {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length);\n            }\n          }\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curPosFinal);\n      },\n      undo: function(cm, actionArgs) {\n        cm.operation(function() {\n          repeatFn(cm, CodeMirror.commands.undo, actionArgs.repeat)();\n          cm.setCursor(cm.getCursor('anchor'));\n        });\n      },\n      redo: function(cm, actionArgs) {\n        repeatFn(cm, CodeMirror.commands.redo, actionArgs.repeat)();\n      },\n      setRegister: function(_cm, actionArgs, vim) {\n        vim.inputState.registerName = actionArgs.selectedCharacter;\n      },\n      setMark: function(cm, actionArgs, vim) {\n        var markName = actionArgs.selectedCharacter;\n        updateMark(cm, vim, markName, cm.getCursor());\n      },\n      replace: function(cm, actionArgs, vim) {\n        var replaceWith = actionArgs.selectedCharacter;\n        var curStart = cm.getCursor();\n        var replaceTo;\n        var curEnd;\n        var selections = cm.listSelections();\n        if (vim.visualMode) {\n          curStart = cm.getCursor('start');\n          curEnd = cm.getCursor('end');\n        } else {\n          var line = cm.getLine(curStart.line);\n          replaceTo = curStart.ch + actionArgs.repeat;\n          if (replaceTo > line.length) {\n            replaceTo=line.length;\n          }\n          curEnd = Pos(curStart.line, replaceTo);\n        }\n        if (replaceWith=='\\n') {\n          if (!vim.visualMode) cm.replaceRange('', curStart, curEnd);\n          // special case, where vim help says to replace by just one line-break\n          (CodeMirror.commands.newlineAndIndentContinueComment || CodeMirror.commands.newlineAndIndent)(cm);\n        } else {\n          var replaceWithStr = cm.getRange(curStart, curEnd);\n          //replace all characters in range by selected, but keep linebreaks\n          replaceWithStr = replaceWithStr.replace(/[^\\n]/g, replaceWith);\n          if (vim.visualBlock) {\n            // Tabs are split in visua block before replacing\n            var spaces = new Array(cm.getOption(\"tabSize\")+1).join(' ');\n            replaceWithStr = cm.getSelection();\n            replaceWithStr = replaceWithStr.replace(/\\t/g, spaces).replace(/[^\\n]/g, replaceWith).split('\\n');\n            cm.replaceSelections(replaceWithStr);\n          } else {\n            cm.replaceRange(replaceWithStr, curStart, curEnd);\n          }\n          if (vim.visualMode) {\n            curStart = cursorIsBefore(selections[0].anchor, selections[0].head) ?\n                         selections[0].anchor : selections[0].head;\n            cm.setCursor(curStart);\n            exitVisualMode(cm, false);\n          } else {\n            cm.setCursor(offsetCursor(curEnd, 0, -1));\n          }\n        }\n      },\n      incrementNumberToken: function(cm, actionArgs) {\n        var cur = cm.getCursor();\n        var lineStr = cm.getLine(cur.line);\n        var re = /(-?)(?:(0x)([\\da-f]+)|(0b|0|)(\\d+))/gi;\n        var match;\n        var start;\n        var end;\n        var numberStr;\n        while ((match = re.exec(lineStr)) !== null) {\n          start = match.index;\n          end = start + match[0].length;\n          if (cur.ch < end)break;\n        }\n        if (!actionArgs.backtrack && (end <= cur.ch))return;\n        if (match) {\n          var baseStr = match[2] || match[4]\n          var digits = match[3] || match[5]\n          var increment = actionArgs.increase ? 1 : -1;\n          var base = {'0b': 2, '0': 8, '': 10, '0x': 16}[baseStr.toLowerCase()];\n          var number = parseInt(match[1] + digits, base) + (increment * actionArgs.repeat);\n          numberStr = number.toString(base);\n          var zeroPadding = baseStr ? new Array(digits.length - numberStr.length + 1 + match[1].length).join('0') : ''\n          if (numberStr.charAt(0) === '-') {\n            numberStr = '-' + baseStr + zeroPadding + numberStr.substr(1);\n          } else {\n            numberStr = baseStr + zeroPadding + numberStr;\n          }\n          var from = Pos(cur.line, start);\n          var to = Pos(cur.line, end);\n          cm.replaceRange(numberStr, from, to);\n        } else {\n          return;\n        }\n        cm.setCursor(Pos(cur.line, start + numberStr.length - 1));\n      },\n      repeatLastEdit: function(cm, actionArgs, vim) {\n        var lastEditInputState = vim.lastEditInputState;\n        if (!lastEditInputState) { return; }\n        var repeat = actionArgs.repeat;\n        if (repeat && actionArgs.repeatIsExplicit) {\n          vim.lastEditInputState.repeatOverride = repeat;\n        } else {\n          repeat = vim.lastEditInputState.repeatOverride || repeat;\n        }\n        repeatLastEdit(cm, vim, repeat, false /** repeatForInsert */);\n      },\n      indent: function(cm, actionArgs) {\n        cm.indentLine(cm.getCursor().line, actionArgs.indentRight);\n      },\n      exitInsertMode: exitInsertMode\n    };\n\n    function defineAction(name, fn) {\n      actions[name] = fn;\n    }\n\n    /*\n     * Below are miscellaneous utility functions used by vim.js\n     */\n\n    /**\n     * Clips cursor to ensure that line is within the buffer's range\n     * If includeLineBreak is true, then allow cur.ch == lineLength.\n     */\n    function clipCursorToContent(cm, cur) {\n      var vim = cm.state.vim;\n      var includeLineBreak = vim.insertMode || vim.visualMode;\n      var line = Math.min(Math.max(cm.firstLine(), cur.line), cm.lastLine() );\n      var maxCh = lineLength(cm, line) - 1 + !!includeLineBreak;\n      var ch = Math.min(Math.max(0, cur.ch), maxCh);\n      return Pos(line, ch);\n    }\n    function copyArgs(args) {\n      var ret = {};\n      for (var prop in args) {\n        if (args.hasOwnProperty(prop)) {\n          ret[prop] = args[prop];\n        }\n      }\n      return ret;\n    }\n    function offsetCursor(cur, offsetLine, offsetCh) {\n      if (typeof offsetLine === 'object') {\n        offsetCh = offsetLine.ch;\n        offsetLine = offsetLine.line;\n      }\n      return Pos(cur.line + offsetLine, cur.ch + offsetCh);\n    }\n    function commandMatches(keys, keyMap, context, inputState) {\n      // Partial matches are not applied. They inform the key handler\n      // that the current key sequence is a subsequence of a valid key\n      // sequence, so that the key buffer is not cleared.\n      var match, partial = [], full = [];\n      for (var i = 0; i < keyMap.length; i++) {\n        var command = keyMap[i];\n        if (context == 'insert' && command.context != 'insert' ||\n            command.context && command.context != context ||\n            inputState.operator && command.type == 'action' ||\n            !(match = commandMatch(keys, command.keys))) { continue; }\n        if (match == 'partial') { partial.push(command); }\n        if (match == 'full') { full.push(command); }\n      }\n      return {\n        partial: partial.length && partial,\n        full: full.length && full\n      };\n    }\n    function commandMatch(pressed, mapped) {\n      if (mapped.slice(-11) == '<character>') {\n        // Last character matches anything.\n        var prefixLen = mapped.length - 11;\n        var pressedPrefix = pressed.slice(0, prefixLen);\n        var mappedPrefix = mapped.slice(0, prefixLen);\n        return pressedPrefix == mappedPrefix && pressed.length > prefixLen ? 'full' :\n               mappedPrefix.indexOf(pressedPrefix) == 0 ? 'partial' : false;\n      } else {\n        return pressed == mapped ? 'full' :\n               mapped.indexOf(pressed) == 0 ? 'partial' : false;\n      }\n    }\n    function lastChar(keys) {\n      var match = /^.*(<[^>]+>)$/.exec(keys);\n      var selectedCharacter = match ? match[1] : keys.slice(-1);\n      if (selectedCharacter.length > 1){\n        switch(selectedCharacter){\n          case '<CR>':\n            selectedCharacter='\\n';\n            break;\n          case '<Space>':\n            selectedCharacter=' ';\n            break;\n          default:\n            selectedCharacter='';\n            break;\n        }\n      }\n      return selectedCharacter;\n    }\n    function repeatFn(cm, fn, repeat) {\n      return function() {\n        for (var i = 0; i < repeat; i++) {\n          fn(cm);\n        }\n      };\n    }\n    function copyCursor(cur) {\n      return Pos(cur.line, cur.ch);\n    }\n    function cursorEqual(cur1, cur2) {\n      return cur1.ch == cur2.ch && cur1.line == cur2.line;\n    }\n    function cursorIsBefore(cur1, cur2) {\n      if (cur1.line < cur2.line) {\n        return true;\n      }\n      if (cur1.line == cur2.line && cur1.ch < cur2.ch) {\n        return true;\n      }\n      return false;\n    }\n    function cursorMin(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMin.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur1 : cur2;\n    }\n    function cursorMax(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMax.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur2 : cur1;\n    }\n    function cursorIsBetween(cur1, cur2, cur3) {\n      // returns true if cur2 is between cur1 and cur3.\n      var cur1before2 = cursorIsBefore(cur1, cur2);\n      var cur2before3 = cursorIsBefore(cur2, cur3);\n      return cur1before2 && cur2before3;\n    }\n    function lineLength(cm, lineNum) {\n      return cm.getLine(lineNum).length;\n    }\n    function trim(s) {\n      if (s.trim) {\n        return s.trim();\n      }\n      return s.replace(/^\\s+|\\s+$/g, '');\n    }\n    function escapeRegex(s) {\n      return s.replace(/([.?*+$\\[\\]\\/\\\\(){}|\\-])/g, '\\\\$1');\n    }\n    function extendLineToColumn(cm, lineNum, column) {\n      var endCh = lineLength(cm, lineNum);\n      var spaces = new Array(column-endCh+1).join(' ');\n      cm.setCursor(Pos(lineNum, endCh));\n      cm.replaceRange(spaces, cm.getCursor());\n    }\n    // This functions selects a rectangular block\n    // of text with selectionEnd as any of its corner\n    // Height of block:\n    // Difference in selectionEnd.line and first/last selection.line\n    // Width of the block:\n    // Distance between selectionEnd.ch and any(first considered here) selection.ch\n    function selectBlock(cm, selectionEnd) {\n      var selections = [], ranges = cm.listSelections();\n      var head = copyCursor(cm.clipPos(selectionEnd));\n      var isClipped = !cursorEqual(selectionEnd, head);\n      var curHead = cm.getCursor('head');\n      var primIndex = getIndex(ranges, curHead);\n      var wasClipped = cursorEqual(ranges[primIndex].head, ranges[primIndex].anchor);\n      var max = ranges.length - 1;\n      var index = max - primIndex > primIndex ? max : 0;\n      var base = ranges[index].anchor;\n\n      var firstLine = Math.min(base.line, head.line);\n      var lastLine = Math.max(base.line, head.line);\n      var baseCh = base.ch, headCh = head.ch;\n\n      var dir = ranges[index].head.ch - baseCh;\n      var newDir = headCh - baseCh;\n      if (dir > 0 && newDir <= 0) {\n        baseCh++;\n        if (!isClipped) { headCh--; }\n      } else if (dir < 0 && newDir >= 0) {\n        baseCh--;\n        if (!wasClipped) { headCh++; }\n      } else if (dir < 0 && newDir == -1) {\n        baseCh--;\n        headCh++;\n      }\n      for (var line = firstLine; line <= lastLine; line++) {\n        var range = {anchor: new Pos(line, baseCh), head: new Pos(line, headCh)};\n        selections.push(range);\n      }\n      cm.setSelections(selections);\n      selectionEnd.ch = headCh;\n      base.ch = baseCh;\n      return base;\n    }\n    function selectForInsert(cm, head, height) {\n      var sel = [];\n      for (var i = 0; i < height; i++) {\n        var lineHead = offsetCursor(head, i, 0);\n        sel.push({anchor: lineHead, head: lineHead});\n      }\n      cm.setSelections(sel, 0);\n    }\n    // getIndex returns the index of the cursor in the selections.\n    function getIndex(ranges, cursor, end) {\n      for (var i = 0; i < ranges.length; i++) {\n        var atAnchor = end != 'head' && cursorEqual(ranges[i].anchor, cursor);\n        var atHead = end != 'anchor' && cursorEqual(ranges[i].head, cursor);\n        if (atAnchor || atHead) {\n          return i;\n        }\n      }\n      return -1;\n    }\n    function getSelectedAreaRange(cm, vim) {\n      var lastSelection = vim.lastSelection;\n      var getCurrentSelectedAreaRange = function() {\n        var selections = cm.listSelections();\n        var start =  selections[0];\n        var end = selections[selections.length-1];\n        var selectionStart = cursorIsBefore(start.anchor, start.head) ? start.anchor : start.head;\n        var selectionEnd = cursorIsBefore(end.anchor, end.head) ? end.head : end.anchor;\n        return [selectionStart, selectionEnd];\n      };\n      var getLastSelectedAreaRange = function() {\n        var selectionStart = cm.getCursor();\n        var selectionEnd = cm.getCursor();\n        var block = lastSelection.visualBlock;\n        if (block) {\n          var width = block.width;\n          var height = block.height;\n          selectionEnd = Pos(selectionStart.line + height, selectionStart.ch + width);\n          var selections = [];\n          // selectBlock creates a 'proper' rectangular block.\n          // We do not want that in all cases, so we manually set selections.\n          for (var i = selectionStart.line; i < selectionEnd.line; i++) {\n            var anchor = Pos(i, selectionStart.ch);\n            var head = Pos(i, selectionEnd.ch);\n            var range = {anchor: anchor, head: head};\n            selections.push(range);\n          }\n          cm.setSelections(selections);\n        } else {\n          var start = lastSelection.anchorMark.find();\n          var end = lastSelection.headMark.find();\n          var line = end.line - start.line;\n          var ch = end.ch - start.ch;\n          selectionEnd = {line: selectionEnd.line + line, ch: line ? selectionEnd.ch : ch + selectionEnd.ch};\n          if (lastSelection.visualLine) {\n            selectionStart = Pos(selectionStart.line, 0);\n            selectionEnd = Pos(selectionEnd.line, lineLength(cm, selectionEnd.line));\n          }\n          cm.setSelection(selectionStart, selectionEnd);\n        }\n        return [selectionStart, selectionEnd];\n      };\n      if (!vim.visualMode) {\n      // In case of replaying the action.\n        return getLastSelectedAreaRange();\n      } else {\n        return getCurrentSelectedAreaRange();\n      }\n    }\n    // Updates the previous selection with the current selection's values. This\n    // should only be called in visual mode.\n    function updateLastSelection(cm, vim) {\n      var anchor = vim.sel.anchor;\n      var head = vim.sel.head;\n      // To accommodate the effect of lastPastedText in the last selection\n      if (vim.lastPastedText) {\n        head = cm.posFromIndex(cm.indexFromPos(anchor) + vim.lastPastedText.length);\n        vim.lastPastedText = null;\n      }\n      vim.lastSelection = {'anchorMark': cm.setBookmark(anchor),\n                           'headMark': cm.setBookmark(head),\n                           'anchor': copyCursor(anchor),\n                           'head': copyCursor(head),\n                           'visualMode': vim.visualMode,\n                           'visualLine': vim.visualLine,\n                           'visualBlock': vim.visualBlock};\n    }\n    function expandSelection(cm, start, end) {\n      var sel = cm.state.vim.sel;\n      var head = sel.head;\n      var anchor = sel.anchor;\n      var tmp;\n      if (cursorIsBefore(end, start)) {\n        tmp = end;\n        end = start;\n        start = tmp;\n      }\n      if (cursorIsBefore(head, anchor)) {\n        head = cursorMin(start, head);\n        anchor = cursorMax(anchor, end);\n      } else {\n        anchor = cursorMin(start, anchor);\n        head = cursorMax(head, end);\n        head = offsetCursor(head, 0, -1);\n        if (head.ch == -1 && head.line != cm.firstLine()) {\n          head = Pos(head.line - 1, lineLength(cm, head.line - 1));\n        }\n      }\n      return [anchor, head];\n    }\n    /**\n     * Updates the CodeMirror selection to match the provided vim selection.\n     * If no arguments are given, it uses the current vim selection state.\n     */\n    function updateCmSelection(cm, sel, mode) {\n      var vim = cm.state.vim;\n      sel = sel || vim.sel;\n      var mode = mode ||\n        vim.visualLine ? 'line' : vim.visualBlock ? 'block' : 'char';\n      var cmSel = makeCmSelection(cm, sel, mode);\n      cm.setSelections(cmSel.ranges, cmSel.primary);\n      updateFakeCursor(cm);\n    }\n    function makeCmSelection(cm, sel, mode, exclusive) {\n      var head = copyCursor(sel.head);\n      var anchor = copyCursor(sel.anchor);\n      if (mode == 'char') {\n        var headOffset = !exclusive && !cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        var anchorOffset = cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        head = offsetCursor(sel.head, 0, headOffset);\n        anchor = offsetCursor(sel.anchor, 0, anchorOffset);\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'line') {\n        if (!cursorIsBefore(sel.head, sel.anchor)) {\n          anchor.ch = 0;\n\n          var lastLine = cm.lastLine();\n          if (head.line > lastLine) {\n            head.line = lastLine;\n          }\n          head.ch = lineLength(cm, head.line);\n        } else {\n          head.ch = 0;\n          anchor.ch = lineLength(cm, anchor.line);\n        }\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'block') {\n        var top = Math.min(anchor.line, head.line),\n            left = Math.min(anchor.ch, head.ch),\n            bottom = Math.max(anchor.line, head.line),\n            right = Math.max(anchor.ch, head.ch) + 1;\n        var height = bottom - top + 1;\n        var primary = head.line == top ? 0 : height - 1;\n        var ranges = [];\n        for (var i = 0; i < height; i++) {\n          ranges.push({\n            anchor: Pos(top + i, left),\n            head: Pos(top + i, right)\n          });\n        }\n        return {\n          ranges: ranges,\n          primary: primary\n        };\n      }\n    }\n    function getHead(cm) {\n      var cur = cm.getCursor('head');\n      if (cm.getSelection().length == 1) {\n        // Small corner case when only 1 character is selected. The \"real\"\n        // head is the left of head and anchor.\n        cur = cursorMin(cur, cm.getCursor('anchor'));\n      }\n      return cur;\n    }\n\n    /**\n     * If moveHead is set to false, the CodeMirror selection will not be\n     * touched. The caller assumes the responsibility of putting the cursor\n    * in the right place.\n     */\n    function exitVisualMode(cm, moveHead) {\n      var vim = cm.state.vim;\n      if (moveHead !== false) {\n        cm.setCursor(clipCursorToContent(cm, vim.sel.head));\n      }\n      updateLastSelection(cm, vim);\n      vim.visualMode = false;\n      vim.visualLine = false;\n      vim.visualBlock = false;\n      if (!vim.insertMode) CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      clearFakeCursor(vim);\n    }\n\n    // Remove any trailing newlines from the selection. For\n    // example, with the caret at the start of the last word on the line,\n    // 'dw' should word, but not the newline, while 'w' should advance the\n    // caret to the first character of the next line.\n    function clipToLine(cm, curStart, curEnd) {\n      var selection = cm.getRange(curStart, curEnd);\n      // Only clip if the selection ends with trailing newline + whitespace\n      if (/\\n\\s*$/.test(selection)) {\n        var lines = selection.split('\\n');\n        // We know this is all whitespace.\n        lines.pop();\n\n        // Cases:\n        // 1. Last word is an empty line - do not clip the trailing '\\n'\n        // 2. Last word is not an empty line - clip the trailing '\\n'\n        var line;\n        // Find the line containing the last word, and clip all whitespace up\n        // to it.\n        for (var line = lines.pop(); lines.length > 0 && line && isWhiteSpaceString(line); line = lines.pop()) {\n          curEnd.line--;\n          curEnd.ch = 0;\n        }\n        // If the last word is not an empty line, clip an additional newline\n        if (line) {\n          curEnd.line--;\n          curEnd.ch = lineLength(cm, curEnd.line);\n        } else {\n          curEnd.ch = 0;\n        }\n      }\n    }\n\n    // Expand the selection to line ends.\n    function expandSelectionToLine(_cm, curStart, curEnd) {\n      curStart.ch = 0;\n      curEnd.ch = 0;\n      curEnd.line++;\n    }\n\n    function findFirstNonWhiteSpaceCharacter(text) {\n      if (!text) {\n        return 0;\n      }\n      var firstNonWS = text.search(/\\S/);\n      return firstNonWS == -1 ? text.length : firstNonWS;\n    }\n\n    function expandWordUnderCursor(cm, inclusive, _forward, bigWord, noSymbol) {\n      var cur = getHead(cm);\n      var line = cm.getLine(cur.line);\n      var idx = cur.ch;\n\n      // Seek to first word or non-whitespace character, depending on if\n      // noSymbol is true.\n      var test = noSymbol ? wordCharTest[0] : bigWordCharTest [0];\n      while (!test(line.charAt(idx))) {\n        idx++;\n        if (idx >= line.length) { return null; }\n      }\n\n      if (bigWord) {\n        test = bigWordCharTest[0];\n      } else {\n        test = wordCharTest[0];\n        if (!test(line.charAt(idx))) {\n          test = wordCharTest[1];\n        }\n      }\n\n      var end = idx, start = idx;\n      while (test(line.charAt(end)) && end < line.length) { end++; }\n      while (test(line.charAt(start)) && start >= 0) { start--; }\n      start++;\n\n      if (inclusive) {\n        // If present, include all whitespace after word.\n        // Otherwise, include all whitespace before word, except indentation.\n        var wordEnd = end;\n        while (/\\s/.test(line.charAt(end)) && end < line.length) { end++; }\n        if (wordEnd == end) {\n          var wordStart = start;\n          while (/\\s/.test(line.charAt(start - 1)) && start > 0) { start--; }\n          if (!start) { start = wordStart; }\n        }\n      }\n      return { start: Pos(cur.line, start), end: Pos(cur.line, end) };\n    }\n\n    /**\n     * Depends on the following:\n     *\n     * - editor mode should be htmlmixedmode / xml\n     * - mode/xml/xml.js should be loaded\n     * - addon/fold/xml-fold.js should be loaded\n     *\n     * If any of the above requirements are not true, this function noops.\n     *\n     * This is _NOT_ a 100% accurate implementation of vim tag text objects.\n     * The following caveats apply (based off cursory testing, I'm sure there\n     * are other discrepancies):\n     *\n     * - Does not work inside comments:\n     *   ```\n     *   <!-- <div>broken</div> -->\n     *   ```\n     * - Does not work when tags have different cases:\n     *   ```\n     *   <div>broken</DIV>\n     *   ```\n     * - Does not work when cursor is inside a broken tag:\n     *   ```\n     *   <div><brok><en></div>\n     *   ```\n     */\n    function expandTagUnderCursor(cm, head, inclusive) {\n      var cur = head;\n      if (!CodeMirror.findMatchingTag || !CodeMirror.findEnclosingTag) {\n        return { start: cur, end: cur };\n      }\n\n      var tags = CodeMirror.findMatchingTag(cm, head) || CodeMirror.findEnclosingTag(cm, head);\n      if (!tags || !tags.open || !tags.close) {\n        return { start: cur, end: cur };\n      }\n\n      if (inclusive) {\n        return { start: tags.open.from, end: tags.close.to };\n      }\n      return { start: tags.open.to, end: tags.close.from };\n    }\n\n    function recordJumpPosition(cm, oldCur, newCur) {\n      if (!cursorEqual(oldCur, newCur)) {\n        vimGlobalState.jumpList.add(cm, oldCur, newCur);\n      }\n    }\n\n    function recordLastCharacterSearch(increment, args) {\n        vimGlobalState.lastCharacterSearch.increment = increment;\n        vimGlobalState.lastCharacterSearch.forward = args.forward;\n        vimGlobalState.lastCharacterSearch.selectedCharacter = args.selectedCharacter;\n    }\n\n    var symbolToMode = {\n        '(': 'bracket', ')': 'bracket', '{': 'bracket', '}': 'bracket',\n        '[': 'section', ']': 'section',\n        '*': 'comment', '/': 'comment',\n        'm': 'method', 'M': 'method',\n        '#': 'preprocess'\n    };\n    var findSymbolModes = {\n      bracket: {\n        isComplete: function(state) {\n          if (state.nextCh === state.symb) {\n            state.depth++;\n            if (state.depth >= 1)return true;\n          } else if (state.nextCh === state.reverseSymb) {\n            state.depth--;\n          }\n          return false;\n        }\n      },\n      section: {\n        init: function(state) {\n          state.curMoveThrough = true;\n          state.symb = (state.forward ? ']' : '[') === state.symb ? '{' : '}';\n        },\n        isComplete: function(state) {\n          return state.index === 0 && state.nextCh === state.symb;\n        }\n      },\n      comment: {\n        isComplete: function(state) {\n          var found = state.lastCh === '*' && state.nextCh === '/';\n          state.lastCh = state.nextCh;\n          return found;\n        }\n      },\n      // TODO: The original Vim implementation only operates on level 1 and 2.\n      // The current implementation doesn't check for code block level and\n      // therefore it operates on any levels.\n      method: {\n        init: function(state) {\n          state.symb = (state.symb === 'm' ? '{' : '}');\n          state.reverseSymb = state.symb === '{' ? '}' : '{';\n        },\n        isComplete: function(state) {\n          if (state.nextCh === state.symb)return true;\n          return false;\n        }\n      },\n      preprocess: {\n        init: function(state) {\n          state.index = 0;\n        },\n        isComplete: function(state) {\n          if (state.nextCh === '#') {\n            var token = state.lineText.match(/^#(\\w+)/)[1];\n            if (token === 'endif') {\n              if (state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth++;\n            } else if (token === 'if') {\n              if (!state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth--;\n            }\n            if (token === 'else' && state.depth === 0)return true;\n          }\n          return false;\n        }\n      }\n    };\n    function findSymbol(cm, repeat, forward, symb) {\n      var cur = copyCursor(cm.getCursor());\n      var increment = forward ? 1 : -1;\n      var endLine = forward ? cm.lineCount() : -1;\n      var curCh = cur.ch;\n      var line = cur.line;\n      var lineText = cm.getLine(line);\n      var state = {\n        lineText: lineText,\n        nextCh: lineText.charAt(curCh),\n        lastCh: null,\n        index: curCh,\n        symb: symb,\n        reverseSymb: (forward ?  { ')': '(', '}': '{' } : { '(': ')', '{': '}' })[symb],\n        forward: forward,\n        depth: 0,\n        curMoveThrough: false\n      };\n      var mode = symbolToMode[symb];\n      if (!mode)return cur;\n      var init = findSymbolModes[mode].init;\n      var isComplete = findSymbolModes[mode].isComplete;\n      if (init) { init(state); }\n      while (line !== endLine && repeat) {\n        state.index += increment;\n        state.nextCh = state.lineText.charAt(state.index);\n        if (!state.nextCh) {\n          line += increment;\n          state.lineText = cm.getLine(line) || '';\n          if (increment > 0) {\n            state.index = 0;\n          } else {\n            var lineLen = state.lineText.length;\n            state.index = (lineLen > 0) ? (lineLen-1) : 0;\n          }\n          state.nextCh = state.lineText.charAt(state.index);\n        }\n        if (isComplete(state)) {\n          cur.line = line;\n          cur.ch = state.index;\n          repeat--;\n        }\n      }\n      if (state.nextCh || state.curMoveThrough) {\n        return Pos(line, state.index);\n      }\n      return cur;\n    }\n\n    /*\n     * Returns the boundaries of the next word. If the cursor in the middle of\n     * the word, then returns the boundaries of the current word, starting at\n     * the cursor. If the cursor is at the start/end of a word, and we are going\n     * forward/backward, respectively, find the boundaries of the next word.\n     *\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Cursor} cur The cursor position.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only [a-zA-Z0-9] characters count as part of the word.\n     * @param {boolean} emptyLineIsWord True if empty lines should be treated\n     *     as words.\n     * @return {Object{from:number, to:number, line: number}} The boundaries of\n     *     the word, or null if there are no more words.\n     */\n    function findWord(cm, cur, forward, bigWord, emptyLineIsWord) {\n      var lineNum = cur.line;\n      var pos = cur.ch;\n      var line = cm.getLine(lineNum);\n      var dir = forward ? 1 : -1;\n      var charTests = bigWord ? bigWordCharTest: wordCharTest;\n\n      if (emptyLineIsWord && line == '') {\n        lineNum += dir;\n        line = cm.getLine(lineNum);\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        pos = (forward) ? 0 : line.length;\n      }\n\n      while (true) {\n        if (emptyLineIsWord && line == '') {\n          return { from: 0, to: 0, line: lineNum };\n        }\n        var stop = (dir > 0) ? line.length : -1;\n        var wordStart = stop, wordEnd = stop;\n        // Find bounds of next word.\n        while (pos != stop) {\n          var foundWord = false;\n          for (var i = 0; i < charTests.length && !foundWord; ++i) {\n            if (charTests[i](line.charAt(pos))) {\n              wordStart = pos;\n              // Advance to end of word.\n              while (pos != stop && charTests[i](line.charAt(pos))) {\n                pos += dir;\n              }\n              wordEnd = pos;\n              foundWord = wordStart != wordEnd;\n              if (wordStart == cur.ch && lineNum == cur.line &&\n                  wordEnd == wordStart + dir) {\n                // We started at the end of a word. Find the next one.\n                continue;\n              } else {\n                return {\n                  from: Math.min(wordStart, wordEnd + 1),\n                  to: Math.max(wordStart, wordEnd),\n                  line: lineNum };\n              }\n            }\n          }\n          if (!foundWord) {\n            pos += dir;\n          }\n        }\n        // Advance to next/prev line.\n        lineNum += dir;\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        line = cm.getLine(lineNum);\n        pos = (dir > 0) ? 0 : line.length;\n      }\n    }\n\n    /**\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Pos} cur The position to start from.\n     * @param {int} repeat Number of words to move past.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} wordEnd True to move to end of word. False to move to\n     *     beginning of word.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only alphabet characters count as part of the word.\n     * @return {Cursor} The position the cursor should move to.\n     */\n    function moveToWord(cm, cur, repeat, forward, wordEnd, bigWord) {\n      var curStart = copyCursor(cur);\n      var words = [];\n      if (forward && !wordEnd || !forward && wordEnd) {\n        repeat++;\n      }\n      // For 'e', empty lines are not considered words, go figure.\n      var emptyLineIsWord = !(forward && wordEnd);\n      for (var i = 0; i < repeat; i++) {\n        var word = findWord(cm, cur, forward, bigWord, emptyLineIsWord);\n        if (!word) {\n          var eodCh = lineLength(cm, cm.lastLine());\n          words.push(forward\n              ? {line: cm.lastLine(), from: eodCh, to: eodCh}\n              : {line: 0, from: 0, to: 0});\n          break;\n        }\n        words.push(word);\n        cur = Pos(word.line, forward ? (word.to - 1) : word.from);\n      }\n      var shortCircuit = words.length != repeat;\n      var firstWord = words[0];\n      var lastWord = words.pop();\n      if (forward && !wordEnd) {\n        // w\n        if (!shortCircuit && (firstWord.from != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return Pos(lastWord.line, lastWord.from);\n      } else if (forward && wordEnd) {\n        return Pos(lastWord.line, lastWord.to - 1);\n      } else if (!forward && wordEnd) {\n        // ge\n        if (!shortCircuit && (firstWord.to != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return Pos(lastWord.line, lastWord.to);\n      } else {\n        // b\n        return Pos(lastWord.line, lastWord.from);\n      }\n    }\n\n    function moveToEol(cm, head, motionArgs, vim, keepHPos) {\n      var cur = head;\n      var retval= Pos(cur.line + motionArgs.repeat - 1, Infinity);\n      var end=cm.clipPos(retval);\n      end.ch--;\n      if (!keepHPos) {\n        vim.lastHPos = Infinity;\n        vim.lastHSPos = cm.charCoords(end,'div').left;\n      }\n      return retval;\n    }\n\n    function moveToCharacter(cm, repeat, forward, character) {\n      var cur = cm.getCursor();\n      var start = cur.ch;\n      var idx;\n      for (var i = 0; i < repeat; i ++) {\n        var line = cm.getLine(cur.line);\n        idx = charIdxInLine(start, line, character, forward, true);\n        if (idx == -1) {\n          return null;\n        }\n        start = idx;\n      }\n      return Pos(cm.getCursor().line, idx);\n    }\n\n    function moveToColumn(cm, repeat) {\n      // repeat is always >= 1, so repeat - 1 always corresponds\n      // to the column we want to go to.\n      var line = cm.getCursor().line;\n      return clipCursorToContent(cm, Pos(line, repeat - 1));\n    }\n\n    function updateMark(cm, vim, markName, pos) {\n      if (!inArray(markName, validMarks)) {\n        return;\n      }\n      if (vim.marks[markName]) {\n        vim.marks[markName].clear();\n      }\n      vim.marks[markName] = cm.setBookmark(pos);\n    }\n\n    function charIdxInLine(start, line, character, forward, includeChar) {\n      // Search for char in line.\n      // motion_options: {forward, includeChar}\n      // If includeChar = true, include it too.\n      // If forward = true, search forward, else search backwards.\n      // If char is not found on this line, do nothing\n      var idx;\n      if (forward) {\n        idx = line.indexOf(character, start + 1);\n        if (idx != -1 && !includeChar) {\n          idx -= 1;\n        }\n      } else {\n        idx = line.lastIndexOf(character, start - 1);\n        if (idx != -1 && !includeChar) {\n          idx += 1;\n        }\n      }\n      return idx;\n    }\n\n    function findParagraph(cm, head, repeat, dir, inclusive) {\n      var line = head.line;\n      var min = cm.firstLine();\n      var max = cm.lastLine();\n      var start, end, i = line;\n      function isEmpty(i) { return !cm.getLine(i); }\n      function isBoundary(i, dir, any) {\n        if (any) { return isEmpty(i) != isEmpty(i + dir); }\n        return !isEmpty(i) && isEmpty(i + dir);\n      }\n      if (dir) {\n        while (min <= i && i <= max && repeat > 0) {\n          if (isBoundary(i, dir)) { repeat--; }\n          i += dir;\n        }\n        return new Pos(i, 0);\n      }\n\n      var vim = cm.state.vim;\n      if (vim.visualLine && isBoundary(line, 1, true)) {\n        var anchor = vim.sel.anchor;\n        if (isBoundary(anchor.line, -1, true)) {\n          if (!inclusive || anchor.line != line) {\n            line += 1;\n          }\n        }\n      }\n      var startState = isEmpty(line);\n      for (i = line; i <= max && repeat; i++) {\n        if (isBoundary(i, 1, true)) {\n          if (!inclusive || isEmpty(i) != startState) {\n            repeat--;\n          }\n        }\n      }\n      end = new Pos(i, 0);\n      // select boundary before paragraph for the last one\n      if (i > max && !startState) { startState = true; }\n      else { inclusive = false; }\n      for (i = line; i > min; i--) {\n        if (!inclusive || isEmpty(i) == startState || i == line) {\n          if (isBoundary(i, -1, true)) { break; }\n        }\n      }\n      start = new Pos(i, 0);\n      return { start: start, end: end };\n    }\n\n    function findSentence(cm, cur, repeat, dir) {\n\n      /*\n        Takes an index object\n        {\n          line: the line string,\n          ln: line number,\n          pos: index in line,\n          dir: direction of traversal (-1 or 1)\n        }\n        and modifies the line, ln, and pos members to represent the\n        next valid position or sets them to null if there are\n        no more valid positions.\n       */\n      function nextChar(cm, idx) {\n        if (idx.pos + idx.dir < 0 || idx.pos + idx.dir >= idx.line.length) {\n          idx.ln += idx.dir;\n          if (!isLine(cm, idx.ln)) {\n            idx.line = null;\n            idx.ln = null;\n            idx.pos = null;\n            return;\n          }\n          idx.line = cm.getLine(idx.ln);\n          idx.pos = (idx.dir > 0) ? 0 : idx.line.length - 1;\n        }\n        else {\n          idx.pos += idx.dir;\n        }\n      }\n\n      /*\n        Performs one iteration of traversal in forward direction\n        Returns an index object of the new location\n       */\n      function forward(cm, ln, pos, dir) {\n        var line = cm.getLine(ln);\n        var stop = (line === \"\");\n\n        var curr = {\n          line: line,\n          ln: ln,\n          pos: pos,\n          dir: dir,\n        }\n\n        var last_valid = {\n          ln: curr.ln,\n          pos: curr.pos,\n        }\n\n        var skip_empty_lines = (curr.line === \"\");\n\n        // Move one step to skip character we start on\n        nextChar(cm, curr);\n\n        while (curr.line !== null) {\n          last_valid.ln = curr.ln;\n          last_valid.pos = curr.pos;\n\n          if (curr.line === \"\" && !skip_empty_lines) {\n            return { ln: curr.ln, pos: curr.pos, };\n          }\n          else if (stop && curr.line !== \"\" && !isWhiteSpaceString(curr.line[curr.pos])) {\n            return { ln: curr.ln, pos: curr.pos, };\n          }\n          else if (isEndOfSentenceSymbol(curr.line[curr.pos])\n            && !stop\n            && (curr.pos === curr.line.length - 1\n              || isWhiteSpaceString(curr.line[curr.pos + 1]))) {\n            stop = true;\n          }\n\n          nextChar(cm, curr);\n        }\n\n        /*\n          Set the position to the last non whitespace character on the last\n          valid line in the case that we reach the end of the document.\n        */\n        var line = cm.getLine(last_valid.ln);\n        last_valid.pos = 0;\n        for(var i = line.length - 1; i >= 0; --i) {\n          if (!isWhiteSpaceString(line[i])) {\n            last_valid.pos = i;\n            break;\n          }\n        }\n\n        return last_valid;\n\n      }\n\n      /*\n        Performs one iteration of traversal in reverse direction\n        Returns an index object of the new location\n       */\n      function reverse(cm, ln, pos, dir) {\n        var line = cm.getLine(ln);\n\n        var curr = {\n          line: line,\n          ln: ln,\n          pos: pos,\n          dir: dir,\n        }\n\n        var last_valid = {\n          ln: curr.ln,\n          pos: null,\n        };\n\n        var skip_empty_lines = (curr.line === \"\");\n\n        // Move one step to skip character we start on\n        nextChar(cm, curr);\n\n        while (curr.line !== null) {\n\n          if (curr.line === \"\" && !skip_empty_lines) {\n            if (last_valid.pos !== null) {\n              return last_valid;\n            }\n            else {\n              return { ln: curr.ln, pos: curr.pos };\n            }\n          }\n          else if (isEndOfSentenceSymbol(curr.line[curr.pos])\n              && last_valid.pos !== null\n              && !(curr.ln === last_valid.ln && curr.pos + 1 === last_valid.pos)) {\n            return last_valid;\n          }\n          else if (curr.line !== \"\" && !isWhiteSpaceString(curr.line[curr.pos])) {\n            skip_empty_lines = false;\n            last_valid = { ln: curr.ln, pos: curr.pos }\n          }\n\n          nextChar(cm, curr);\n        }\n\n        /*\n          Set the position to the first non whitespace character on the last\n          valid line in the case that we reach the beginning of the document.\n        */\n        var line = cm.getLine(last_valid.ln);\n        last_valid.pos = 0;\n        for(var i = 0; i < line.length; ++i) {\n          if (!isWhiteSpaceString(line[i])) {\n            last_valid.pos = i;\n            break;\n          }\n        }\n        return last_valid;\n      }\n\n      var curr_index = {\n        ln: cur.line,\n        pos: cur.ch,\n      };\n\n      while (repeat > 0) {\n        if (dir < 0) {\n          curr_index = reverse(cm, curr_index.ln, curr_index.pos, dir);\n        }\n        else {\n          curr_index = forward(cm, curr_index.ln, curr_index.pos, dir);\n        }\n        repeat--;\n      }\n\n      return Pos(curr_index.ln, curr_index.pos);\n    }\n\n    // TODO: perhaps this finagling of start and end positions belongs\n    // in codemirror/replaceRange?\n    function selectCompanionObject(cm, head, symb, inclusive) {\n      var cur = head, start, end;\n\n      var bracketRegexp = ({\n        '(': /[()]/, ')': /[()]/,\n        '[': /[[\\]]/, ']': /[[\\]]/,\n        '{': /[{}]/, '}': /[{}]/,\n        '<': /[<>]/, '>': /[<>]/})[symb];\n      var openSym = ({\n        '(': '(', ')': '(',\n        '[': '[', ']': '[',\n        '{': '{', '}': '{',\n        '<': '<', '>': '<'})[symb];\n      var curChar = cm.getLine(cur.line).charAt(cur.ch);\n      // Due to the behavior of scanForBracket, we need to add an offset if the\n      // cursor is on a matching open bracket.\n      var offset = curChar === openSym ? 1 : 0;\n\n      start = cm.scanForBracket(Pos(cur.line, cur.ch + offset), -1, undefined, {'bracketRegex': bracketRegexp});\n      end = cm.scanForBracket(Pos(cur.line, cur.ch + offset), 1, undefined, {'bracketRegex': bracketRegexp});\n\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      start = start.pos;\n      end = end.pos;\n\n      if ((start.line == end.line && start.ch > end.ch)\n          || (start.line > end.line)) {\n        var tmp = start;\n        start = end;\n        end = tmp;\n      }\n\n      if (inclusive) {\n        end.ch += 1;\n      } else {\n        start.ch += 1;\n      }\n\n      return { start: start, end: end };\n    }\n\n    // Takes in a symbol and a cursor and tries to simulate text objects that\n    // have identical opening and closing symbols\n    // TODO support across multiple lines\n    function findBeginningAndEnd(cm, head, symb, inclusive) {\n      var cur = copyCursor(head);\n      var line = cm.getLine(cur.line);\n      var chars = line.split('');\n      var start, end, i, len;\n      var firstIndex = chars.indexOf(symb);\n\n      // the decision tree is to always look backwards for the beginning first,\n      // but if the cursor is in front of the first instance of the symb,\n      // then move the cursor forward\n      if (cur.ch < firstIndex) {\n        cur.ch = firstIndex;\n        // Why is this line even here???\n        // cm.setCursor(cur.line, firstIndex+1);\n      }\n      // otherwise if the cursor is currently on the closing symbol\n      else if (firstIndex < cur.ch && chars[cur.ch] == symb) {\n        end = cur.ch; // assign end to the current cursor\n        --cur.ch; // make sure to look backwards\n      }\n\n      // if we're currently on the symbol, we've got a start\n      if (chars[cur.ch] == symb && !end) {\n        start = cur.ch + 1; // assign start to ahead of the cursor\n      } else {\n        // go backwards to find the start\n        for (i = cur.ch; i > -1 && !start; i--) {\n          if (chars[i] == symb) {\n            start = i + 1;\n          }\n        }\n      }\n\n      // look forwards for the end symbol\n      if (start && !end) {\n        for (i = start, len = chars.length; i < len && !end; i++) {\n          if (chars[i] == symb) {\n            end = i;\n          }\n        }\n      }\n\n      // nothing found\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      // include the symbols\n      if (inclusive) {\n        --start; ++end;\n      }\n\n      return {\n        start: Pos(cur.line, start),\n        end: Pos(cur.line, end)\n      };\n    }\n\n    // Search functions\n    defineOption('pcre', true, 'boolean');\n    function SearchState() {}\n    SearchState.prototype = {\n      getQuery: function() {\n        return vimGlobalState.query;\n      },\n      setQuery: function(query) {\n        vimGlobalState.query = query;\n      },\n      getOverlay: function() {\n        return this.searchOverlay;\n      },\n      setOverlay: function(overlay) {\n        this.searchOverlay = overlay;\n      },\n      isReversed: function() {\n        return vimGlobalState.isReversed;\n      },\n      setReversed: function(reversed) {\n        vimGlobalState.isReversed = reversed;\n      },\n      getScrollbarAnnotate: function() {\n        return this.annotate;\n      },\n      setScrollbarAnnotate: function(annotate) {\n        this.annotate = annotate;\n      }\n    };\n    function getSearchState(cm) {\n      var vim = cm.state.vim;\n      return vim.searchState_ || (vim.searchState_ = new SearchState());\n    }\n    function splitBySlash(argString) {\n      return splitBySeparator(argString, '/');\n    }\n\n    function findUnescapedSlashes(argString) {\n      return findUnescapedSeparators(argString, '/');\n    }\n\n    function splitBySeparator(argString, separator) {\n      var slashes = findUnescapedSeparators(argString, separator) || [];\n      if (!slashes.length) return [];\n      var tokens = [];\n      // in case of strings like foo/bar\n      if (slashes[0] !== 0) return;\n      for (var i = 0; i < slashes.length; i++) {\n        if (typeof slashes[i] == 'number')\n          tokens.push(argString.substring(slashes[i] + 1, slashes[i+1]));\n      }\n      return tokens;\n    }\n\n    function findUnescapedSeparators(str, separator) {\n      if (!separator)\n        separator = '/';\n\n      var escapeNextChar = false;\n      var slashes = [];\n      for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (!escapeNextChar && c == separator) {\n          slashes.push(i);\n        }\n        escapeNextChar = !escapeNextChar && (c == '\\\\');\n      }\n      return slashes;\n    }\n\n    // Translates a search string from ex (vim) syntax into javascript form.\n    function translateRegex(str) {\n      // When these match, add a '\\' if unescaped or remove one if escaped.\n      var specials = '|(){';\n      // Remove, but never add, a '\\' for these.\n      var unescape = '}';\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        var specialComesNext = (n && specials.indexOf(n) != -1);\n        if (escapeNextChar) {\n          if (c !== '\\\\' || !specialComesNext) {\n            out.push(c);\n          }\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            // Treat the unescape list as special for removing, but not adding '\\'.\n            if (n && unescape.indexOf(n) != -1) {\n              specialComesNext = true;\n            }\n            // Not passing this test means removing a '\\'.\n            if (!specialComesNext || n === '\\\\') {\n              out.push(c);\n            }\n          } else {\n            out.push(c);\n            if (specialComesNext && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Translates the replace part of a search and replace from ex (vim) syntax into\n    // javascript form.  Similar to translateRegex, but additionally fixes back references\n    // (translates '\\[0..9]' to '$[0..9]') and follows different rules for escaping '$'.\n    var charUnescapes = {'\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t'};\n    function translateRegexReplace(str) {\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        if (charUnescapes[c + n]) {\n          out.push(charUnescapes[c+n]);\n          i++;\n        } else if (escapeNextChar) {\n          // At any point in the loop, escapeNextChar is true if the previous\n          // character was a '\\' and was not escaped.\n          out.push(c);\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            if ((isNumber(n) || n === '$')) {\n              out.push('$');\n            } else if (n !== '/' && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          } else {\n            if (c === '$') {\n              out.push('$');\n            }\n            out.push(c);\n            if (n === '/') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Unescape \\ and / in the replace part, for PCRE mode.\n    var unescapes = {'\\\\/': '/', '\\\\\\\\': '\\\\', '\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t', '\\\\&':'&'};\n    function unescapeRegexReplace(str) {\n      var stream = new CodeMirror.StringStream(str);\n      var output = [];\n      while (!stream.eol()) {\n        // Search for \\.\n        while (stream.peek() && stream.peek() != '\\\\') {\n          output.push(stream.next());\n        }\n        var matched = false;\n        for (var matcher in unescapes) {\n          if (stream.match(matcher, true)) {\n            matched = true;\n            output.push(unescapes[matcher]);\n            break;\n          }\n        }\n        if (!matched) {\n          // Don't change anything\n          output.push(stream.next());\n        }\n      }\n      return output.join('');\n    }\n\n    /**\n     * Extract the regular expression from the query and return a Regexp object.\n     * Returns null if the query is blank.\n     * If ignoreCase is passed in, the Regexp object will have the 'i' flag set.\n     * If smartCase is passed in, and the query contains upper case letters,\n     *   then ignoreCase is overridden, and the 'i' flag will not be set.\n     * If the query contains the /i in the flag part of the regular expression,\n     *   then both ignoreCase and smartCase are ignored, and 'i' will be passed\n     *   through to the Regex object.\n     */\n    function parseQuery(query, ignoreCase, smartCase) {\n      // First update the last search register\n      var lastSearchRegister = vimGlobalState.registerController.getRegister('/');\n      lastSearchRegister.setText(query);\n      // Check if the query is already a regex.\n      if (query instanceof RegExp) { return query; }\n      // First try to extract regex + flags from the input. If no flags found,\n      // extract just the regex. IE does not accept flags directly defined in\n      // the regex string in the form /regex/flags\n      var slashes = findUnescapedSlashes(query);\n      var regexPart;\n      var forceIgnoreCase;\n      if (!slashes.length) {\n        // Query looks like 'regexp'\n        regexPart = query;\n      } else {\n        // Query looks like 'regexp/...'\n        regexPart = query.substring(0, slashes[0]);\n        var flagsPart = query.substring(slashes[0]);\n        forceIgnoreCase = (flagsPart.indexOf('i') != -1);\n      }\n      if (!regexPart) {\n        return null;\n      }\n      if (!getOption('pcre')) {\n        regexPart = translateRegex(regexPart);\n      }\n      if (smartCase) {\n        ignoreCase = (/^[^A-Z]*$/).test(regexPart);\n      }\n      var regexp = new RegExp(regexPart,\n          (ignoreCase || forceIgnoreCase) ? 'i' : undefined);\n      return regexp;\n    }\n\n    /**\n     * dom - Document Object Manipulator\n     * Usage:\n     *   dom('<tag>'|<node>[, ...{<attributes>|<$styles>}|<child-node>|'<text>'])\n     * Examples:\n     *   dom('div', {id:'xyz'}, dom('p', 'CM rocks!', {$color:'red'}))\n     *   dom(document.head, dom('script', 'alert(\"hello!\")'))\n     * Not supported:\n     *   dom('p', ['arrays are objects'], Error('objects specify attributes'))\n     */\n    function dom(n) {\n      if (typeof n === 'string') n = document.createElement(n);\n      for (var a, i = 1; i < arguments.length; i++) {\n        if (!(a = arguments[i])) continue;\n        if (typeof a !== 'object') a = document.createTextNode(a);\n        if (a.nodeType) n.appendChild(a);\n        else for (var key in a) {\n          if (!Object.prototype.hasOwnProperty.call(a, key)) continue;\n          if (key[0] === '$') n.style[key.slice(1)] = a[key];\n          else n.setAttribute(key, a[key]);\n        }\n      }\n      return n;\n    }\n\n    function showConfirm(cm, template) {\n      var pre = dom('pre', {$color: 'red'}, template);\n      if (cm.openNotification) {\n        cm.openNotification(pre, {bottom: true, duration: 5000});\n      } else {\n        alert(pre.innerText);\n      }\n    }\n\n    function makePrompt(prefix, desc) {\n      return dom(document.createDocumentFragment(),\n               dom('span', {$fontFamily: 'monospace', $whiteSpace: 'pre'},\n                 prefix,\n                 dom('input', {type: 'text', autocorrect: 'off',\n                               autocapitalize: 'off', spellcheck: 'false'})),\n               desc && dom('span', {$color: '#888'}, desc));\n    }\n\n    function showPrompt(cm, options) {\n      var shortText = (options.prefix || '') + ' ' + (options.desc || '');\n      var template = makePrompt(options.prefix, options.desc);\n      if (cm.openDialog) {\n        cm.openDialog(template, options.onClose, {\n          onKeyDown: options.onKeyDown, onKeyUp: options.onKeyUp,\n          bottom: true, selectValueOnOpen: false, value: options.value\n        });\n      }\n      else {\n        options.onClose(prompt(shortText, ''));\n      }\n    }\n\n    function regexEqual(r1, r2) {\n      if (r1 instanceof RegExp && r2 instanceof RegExp) {\n          var props = ['global', 'multiline', 'ignoreCase', 'source'];\n          for (var i = 0; i < props.length; i++) {\n              var prop = props[i];\n              if (r1[prop] !== r2[prop]) {\n                  return false;\n              }\n          }\n          return true;\n      }\n      return false;\n    }\n    // Returns true if the query is valid.\n    function updateSearchQuery(cm, rawQuery, ignoreCase, smartCase) {\n      if (!rawQuery) {\n        return;\n      }\n      var state = getSearchState(cm);\n      var query = parseQuery(rawQuery, !!ignoreCase, !!smartCase);\n      if (!query) {\n        return;\n      }\n      highlightSearchMatches(cm, query);\n      if (regexEqual(query, state.getQuery())) {\n        return query;\n      }\n      state.setQuery(query);\n      return query;\n    }\n    function searchOverlay(query) {\n      if (query.source.charAt(0) == '^') {\n        var matchSol = true;\n      }\n      return {\n        token: function(stream) {\n          if (matchSol && !stream.sol()) {\n            stream.skipToEnd();\n            return;\n          }\n          var match = stream.match(query, false);\n          if (match) {\n            if (match[0].length == 0) {\n              // Matched empty string, skip to next.\n              stream.next();\n              return 'searching';\n            }\n            if (!stream.sol()) {\n              // Backtrack 1 to match \\b\n              stream.backUp(1);\n              if (!query.exec(stream.next() + match[0])) {\n                stream.next();\n                return null;\n              }\n            }\n            stream.match(query);\n            return 'searching';\n          }\n          while (!stream.eol()) {\n            stream.next();\n            if (stream.match(query, false)) break;\n          }\n        },\n        query: query\n      };\n    }\n    var highlightTimeout = 0;\n    function highlightSearchMatches(cm, query) {\n      clearTimeout(highlightTimeout);\n      highlightTimeout = setTimeout(function() {\n        var searchState = getSearchState(cm);\n        var overlay = searchState.getOverlay();\n        if (!overlay || query != overlay.query) {\n          if (overlay) {\n            cm.removeOverlay(overlay);\n          }\n          overlay = searchOverlay(query);\n          cm.addOverlay(overlay);\n          if (cm.showMatchesOnScrollbar) {\n            if (searchState.getScrollbarAnnotate()) {\n              searchState.getScrollbarAnnotate().clear();\n            }\n            searchState.setScrollbarAnnotate(cm.showMatchesOnScrollbar(query));\n          }\n          searchState.setOverlay(overlay);\n        }\n      }, 50);\n    }\n    function findNext(cm, prev, query, repeat) {\n      if (repeat === undefined) { repeat = 1; }\n      return cm.operation(function() {\n        var pos = cm.getCursor();\n        var cursor = cm.getSearchCursor(query, pos);\n        for (var i = 0; i < repeat; i++) {\n          var found = cursor.find(prev);\n          if (i == 0 && found && cursorEqual(cursor.from(), pos)) { found = cursor.find(prev); }\n          if (!found) {\n            // SearchCursor may have returned null because it hit EOF, wrap\n            // around and try again.\n            cursor = cm.getSearchCursor(query,\n                (prev) ? Pos(cm.lastLine()) : Pos(cm.firstLine(), 0) );\n            if (!cursor.find(prev)) {\n              return;\n            }\n          }\n        }\n        return cursor.from();\n      });\n    }\n    /**\n     * Pretty much the same as `findNext`, except for the following differences:\n     *\n     * 1. Before starting the search, move to the previous search. This way if our cursor is\n     * already inside a match, we should return the current match.\n     * 2. Rather than only returning the cursor's from, we return the cursor's from and to as a tuple.\n     */\n    function findNextFromAndToInclusive(cm, prev, query, repeat, vim) {\n      if (repeat === undefined) { repeat = 1; }\n      return cm.operation(function() {\n        var pos = cm.getCursor();\n        var cursor = cm.getSearchCursor(query, pos);\n\n        // Go back one result to ensure that if the cursor is currently a match, we keep it.\n        var found = cursor.find(!prev);\n\n        // If we haven't moved, go back one more (similar to if i==0 logic in findNext).\n        if (!vim.visualMode && found && cursorEqual(cursor.from(), pos)) {\n          cursor.find(!prev);\n        }\n\n        for (var i = 0; i < repeat; i++) {\n          found = cursor.find(prev);\n          if (!found) {\n            // SearchCursor may have returned null because it hit EOF, wrap\n            // around and try again.\n            cursor = cm.getSearchCursor(query,\n                (prev) ? Pos(cm.lastLine()) : Pos(cm.firstLine(), 0) );\n            if (!cursor.find(prev)) {\n              return;\n            }\n          }\n        }\n        return [cursor.from(), cursor.to()];\n      });\n    }\n    function clearSearchHighlight(cm) {\n      var state = getSearchState(cm);\n      cm.removeOverlay(getSearchState(cm).getOverlay());\n      state.setOverlay(null);\n      if (state.getScrollbarAnnotate()) {\n        state.getScrollbarAnnotate().clear();\n        state.setScrollbarAnnotate(null);\n      }\n    }\n    /**\n     * Check if pos is in the specified range, INCLUSIVE.\n     * Range can be specified with 1 or 2 arguments.\n     * If the first range argument is an array, treat it as an array of line\n     * numbers. Match pos against any of the lines.\n     * If the first range argument is a number,\n     *   if there is only 1 range argument, check if pos has the same line\n     *       number\n     *   if there are 2 range arguments, then check if pos is in between the two\n     *       range arguments.\n     */\n    function isInRange(pos, start, end) {\n      if (typeof pos != 'number') {\n        // Assume it is a cursor position. Get the line number.\n        pos = pos.line;\n      }\n      if (start instanceof Array) {\n        return inArray(pos, start);\n      } else {\n        if (typeof end == 'number') {\n          return (pos >= start && pos <= end);\n        } else {\n          return pos == start;\n        }\n      }\n    }\n    function getUserVisibleLines(cm) {\n      var scrollInfo = cm.getScrollInfo();\n      var occludeToleranceTop = 6;\n      var occludeToleranceBottom = 10;\n      var from = cm.coordsChar({left:0, top: occludeToleranceTop + scrollInfo.top}, 'local');\n      var bottomY = scrollInfo.clientHeight - occludeToleranceBottom + scrollInfo.top;\n      var to = cm.coordsChar({left:0, top: bottomY}, 'local');\n      return {top: from.line, bottom: to.line};\n    }\n\n    function getMarkPos(cm, vim, markName) {\n      if (markName == '\\'' || markName == '`') {\n        return vimGlobalState.jumpList.find(cm, -1) || Pos(0, 0);\n      } else if (markName == '.') {\n        return getLastEditPos(cm);\n      }\n\n      var mark = vim.marks[markName];\n      return mark && mark.find();\n    }\n\n    function getLastEditPos(cm) {\n      var done = cm.doc.history.done;\n      for (var i = done.length; i--;) {\n        if (done[i].changes) {\n          return copyCursor(done[i].changes[0].to);\n        }\n      }\n    }\n\n    var ExCommandDispatcher = function() {\n      this.buildCommandMap_();\n    };\n    ExCommandDispatcher.prototype = {\n      processCommand: function(cm, input, opt_params) {\n        var that = this;\n        cm.operation(function () {\n          cm.curOp.isVimOp = true;\n          that._processCommand(cm, input, opt_params);\n        });\n      },\n      _processCommand: function(cm, input, opt_params) {\n        var vim = cm.state.vim;\n        var commandHistoryRegister = vimGlobalState.registerController.getRegister(':');\n        var previousCommand = commandHistoryRegister.toString();\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        var inputStream = new CodeMirror.StringStream(input);\n        // update \": with the latest command whether valid or invalid\n        commandHistoryRegister.setText(input);\n        var params = opt_params || {};\n        params.input = input;\n        try {\n          this.parseInput_(cm, inputStream, params);\n        } catch(e) {\n          showConfirm(cm, e.toString());\n          throw e;\n        }\n        var command;\n        var commandName;\n        if (!params.commandName) {\n          // If only a line range is defined, move to the line.\n          if (params.line !== undefined) {\n            commandName = 'move';\n          }\n        } else {\n          command = this.matchCommand_(params.commandName);\n          if (command) {\n            commandName = command.name;\n            if (command.excludeFromCommandHistory) {\n              commandHistoryRegister.setText(previousCommand);\n            }\n            this.parseCommandArgs_(inputStream, params, command);\n            if (command.type == 'exToKey') {\n              // Handle Ex to Key mapping.\n              for (var i = 0; i < command.toKeys.length; i++) {\n                CodeMirror.Vim.handleKey(cm, command.toKeys[i], 'mapping');\n              }\n              return;\n            } else if (command.type == 'exToEx') {\n              // Handle Ex to Ex mapping.\n              this.processCommand(cm, command.toInput);\n              return;\n            }\n          }\n        }\n        if (!commandName) {\n          showConfirm(cm, 'Not an editor command \":' + input + '\"');\n          return;\n        }\n        try {\n          exCommands[commandName](cm, params);\n          // Possibly asynchronous commands (e.g. substitute, which might have a\n          // user confirmation), are responsible for calling the callback when\n          // done. All others have it taken care of for them here.\n          if ((!command || !command.possiblyAsync) && params.callback) {\n            params.callback();\n          }\n        } catch(e) {\n          showConfirm(cm, e.toString());\n          throw e;\n        }\n      },\n      parseInput_: function(cm, inputStream, result) {\n        inputStream.eatWhile(':');\n        // Parse range.\n        if (inputStream.eat('%')) {\n          result.line = cm.firstLine();\n          result.lineEnd = cm.lastLine();\n        } else {\n          result.line = this.parseLineSpec_(cm, inputStream);\n          if (result.line !== undefined && inputStream.eat(',')) {\n            result.lineEnd = this.parseLineSpec_(cm, inputStream);\n          }\n        }\n\n        // Parse command name.\n        var commandMatch = inputStream.match(/^(\\w+|!!|@@|[!#&*<=>@~])/);\n        if (commandMatch) {\n          result.commandName = commandMatch[1];\n        } else {\n          result.commandName = inputStream.match(/.*/)[0];\n        }\n\n        return result;\n      },\n      parseLineSpec_: function(cm, inputStream) {\n        var numberMatch = inputStream.match(/^(\\d+)/);\n        if (numberMatch) {\n          // Absolute line number plus offset (N+M or N-M) is probably a typo,\n          // not something the user actually wanted. (NB: vim does allow this.)\n          return parseInt(numberMatch[1], 10) - 1;\n        }\n        switch (inputStream.next()) {\n          case '.':\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          case '$':\n            return this.parseLineSpecOffset_(inputStream, cm.lastLine());\n          case '\\'':\n            var markName = inputStream.next();\n            var markPos = getMarkPos(cm, cm.state.vim, markName);\n            if (!markPos) throw new Error('Mark not set');\n            return this.parseLineSpecOffset_(inputStream, markPos.line);\n          case '-':\n          case '+':\n            inputStream.backUp(1);\n            // Offset is relative to current line if not otherwise specified.\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          default:\n            inputStream.backUp(1);\n            return undefined;\n        }\n      },\n      parseLineSpecOffset_: function(inputStream, line) {\n        var offsetMatch = inputStream.match(/^([+-])?(\\d+)/);\n        if (offsetMatch) {\n          var offset = parseInt(offsetMatch[2], 10);\n          if (offsetMatch[1] == \"-\") {\n            line -= offset;\n          } else {\n            line += offset;\n          }\n        }\n        return line;\n      },\n      parseCommandArgs_: function(inputStream, params, command) {\n        if (inputStream.eol()) {\n          return;\n        }\n        params.argString = inputStream.match(/.*/)[0];\n        // Parse command-line arguments\n        var delim = command.argDelimiter || /\\s+/;\n        var args = trim(params.argString).split(delim);\n        if (args.length && args[0]) {\n          params.args = args;\n        }\n      },\n      matchCommand_: function(commandName) {\n        // Return the command in the command map that matches the shortest\n        // prefix of the passed in command name. The match is guaranteed to be\n        // unambiguous if the defaultExCommandMap's shortNames are set up\n        // correctly. (see @code{defaultExCommandMap}).\n        for (var i = commandName.length; i > 0; i--) {\n          var prefix = commandName.substring(0, i);\n          if (this.commandMap_[prefix]) {\n            var command = this.commandMap_[prefix];\n            if (command.name.indexOf(commandName) === 0) {\n              return command;\n            }\n          }\n        }\n        return null;\n      },\n      buildCommandMap_: function() {\n        this.commandMap_ = {};\n        for (var i = 0; i < defaultExCommandMap.length; i++) {\n          var command = defaultExCommandMap[i];\n          var key = command.shortName || command.name;\n          this.commandMap_[key] = command;\n        }\n      },\n      map: function(lhs, rhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Ex to Ex mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToEx',\n              toInput: rhs.substring(1),\n              user: true\n            };\n          } else {\n            // Ex to key mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToKey',\n              toKeys: rhs,\n              user: true\n            };\n          }\n        } else {\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Key to Ex mapping.\n            var mapping = {\n              keys: lhs,\n              type: 'keyToEx',\n              exArgs: { input: rhs.substring(1) }\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          } else {\n            // Key to key mapping\n            var mapping = {\n              keys: lhs,\n              type: 'keyToKey',\n              toKeys: rhs\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          }\n        }\n      },\n      unmap: function(lhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          // Ex to Ex or Ex to key mapping\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (this.commandMap_[commandName] && this.commandMap_[commandName].user) {\n            delete this.commandMap_[commandName];\n            return;\n          }\n        } else {\n          // Key to Ex or key to key mapping\n          var keys = lhs;\n          for (var i = 0; i < defaultKeymap.length; i++) {\n            if (keys == defaultKeymap[i].keys\n                && defaultKeymap[i].context === ctx) {\n              defaultKeymap.splice(i, 1);\n              return;\n            }\n          }\n        }\n        throw Error('No such mapping.');\n      }\n    };\n\n    var exCommands = {\n      colorscheme: function(cm, params) {\n        if (!params.args || params.args.length < 1) {\n          showConfirm(cm, cm.getOption('theme'));\n          return;\n        }\n        cm.setOption('theme', params.args[0]);\n      },\n      map: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 2) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        exCommandDispatcher.map(mapArgs[0], mapArgs[1], ctx);\n      },\n      imap: function(cm, params) { this.map(cm, params, 'insert'); },\n      nmap: function(cm, params) { this.map(cm, params, 'normal'); },\n      vmap: function(cm, params) { this.map(cm, params, 'visual'); },\n      unmap: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'No such mapping: ' + params.input);\n          }\n          return;\n        }\n        exCommandDispatcher.unmap(mapArgs[0], ctx);\n      },\n      move: function(cm, params) {\n        commandDispatcher.processCommand(cm, cm.state.vim, {\n            type: 'motion',\n            motion: 'moveToLineOrEdgeOfDocument',\n            motionArgs: { forward: false, explicitRepeat: true,\n              linewise: true },\n            repeatOverride: params.line+1});\n      },\n      set: function(cm, params) {\n        var setArgs = params.args;\n        // Options passed through to the setOption/getOption calls. May be passed in by the\n        // local/global versions of the set command\n        var setCfg = params.setCfg || {};\n        if (!setArgs || setArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        var expr = setArgs[0].split('=');\n        var optionName = expr[0];\n        var value = expr[1];\n        var forceGet = false;\n\n        if (optionName.charAt(optionName.length - 1) == '?') {\n          // If post-fixed with ?, then the set is actually a get.\n          if (value) { throw Error('Trailing characters: ' + params.argString); }\n          optionName = optionName.substring(0, optionName.length - 1);\n          forceGet = true;\n        }\n        if (value === undefined && optionName.substring(0, 2) == 'no') {\n          // To set boolean options to false, the option name is prefixed with\n          // 'no'.\n          optionName = optionName.substring(2);\n          value = false;\n        }\n\n        var optionIsBoolean = options[optionName] && options[optionName].type == 'boolean';\n        if (optionIsBoolean && value == undefined) {\n          // Calling set with a boolean option sets it to true.\n          value = true;\n        }\n        // If no value is provided, then we assume this is a get.\n        if (!optionIsBoolean && value === undefined || forceGet) {\n          var oldValue = getOption(optionName, cm, setCfg);\n          if (oldValue instanceof Error) {\n            showConfirm(cm, oldValue.message);\n          } else if (oldValue === true || oldValue === false) {\n            showConfirm(cm, ' ' + (oldValue ? '' : 'no') + optionName);\n          } else {\n            showConfirm(cm, '  ' + optionName + '=' + oldValue);\n          }\n        } else {\n          var setOptionReturn = setOption(optionName, value, cm, setCfg);\n          if (setOptionReturn instanceof Error) {\n            showConfirm(cm, setOptionReturn.message);\n          }\n        }\n      },\n      setlocal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'local'};\n        this.set(cm, params);\n      },\n      setglobal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'global'};\n        this.set(cm, params);\n      },\n      registers: function(cm, params) {\n        var regArgs = params.args;\n        var registers = vimGlobalState.registerController.registers;\n        var regInfo = '----------Registers----------\\n\\n';\n        if (!regArgs) {\n          for (var registerName in registers) {\n            var text = registers[registerName].toString();\n            if (text.length) {\n              regInfo += '\"' + registerName + '    ' + text + '\\n'\n            }\n          }\n        } else {\n          var registerName;\n          regArgs = regArgs.join('');\n          for (var i = 0; i < regArgs.length; i++) {\n            registerName = regArgs.charAt(i);\n            if (!vimGlobalState.registerController.isValidRegister(registerName)) {\n              continue;\n            }\n            var register = registers[registerName] || new Register();\n            regInfo += '\"' + registerName + '    ' + register.toString() + '\\n'\n          }\n        }\n        showConfirm(cm, regInfo);\n      },\n      sort: function(cm, params) {\n        var reverse, ignoreCase, unique, number, pattern;\n        function parseArgs() {\n          if (params.argString) {\n            var args = new CodeMirror.StringStream(params.argString);\n            if (args.eat('!')) { reverse = true; }\n            if (args.eol()) { return; }\n            if (!args.eatSpace()) { return 'Invalid arguments'; }\n            var opts = args.match(/([dinuox]+)?\\s*(\\/.+\\/)?\\s*/);\n            if (!opts && !args.eol()) { return 'Invalid arguments'; }\n            if (opts[1]) {\n              ignoreCase = opts[1].indexOf('i') != -1;\n              unique = opts[1].indexOf('u') != -1;\n              var decimal = opts[1].indexOf('d') != -1 || opts[1].indexOf('n') != -1 && 1;\n              var hex = opts[1].indexOf('x') != -1 && 1;\n              var octal = opts[1].indexOf('o') != -1 && 1;\n              if (decimal + hex + octal > 1) { return 'Invalid arguments'; }\n              number = decimal && 'decimal' || hex && 'hex' || octal && 'octal';\n            }\n            if (opts[2]) {\n              pattern = new RegExp(opts[2].substr(1, opts[2].length - 2), ignoreCase ? 'i' : '');\n            }\n          }\n        }\n        var err = parseArgs();\n        if (err) {\n          showConfirm(cm, err + ': ' + params.argString);\n          return;\n        }\n        var lineStart = params.line || cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        if (lineStart == lineEnd) { return; }\n        var curStart = Pos(lineStart, 0);\n        var curEnd = Pos(lineEnd, lineLength(cm, lineEnd));\n        var text = cm.getRange(curStart, curEnd).split('\\n');\n        var numberRegex = pattern ? pattern :\n           (number == 'decimal') ? /(-?)([\\d]+)/ :\n           (number == 'hex') ? /(-?)(?:0x)?([0-9a-f]+)/i :\n           (number == 'octal') ? /([0-7]+)/ : null;\n        var radix = (number == 'decimal') ? 10 : (number == 'hex') ? 16 : (number == 'octal') ? 8 : null;\n        var numPart = [], textPart = [];\n        if (number || pattern) {\n          for (var i = 0; i < text.length; i++) {\n            var matchPart = pattern ? text[i].match(pattern) : null;\n            if (matchPart && matchPart[0] != '') {\n              numPart.push(matchPart);\n            } else if (!pattern && numberRegex.exec(text[i])) {\n              numPart.push(text[i]);\n            } else {\n              textPart.push(text[i]);\n            }\n          }\n        } else {\n          textPart = text;\n        }\n        function compareFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a = a.toLowerCase(); b = b.toLowerCase(); }\n          var anum = number && numberRegex.exec(a);\n          var bnum = number && numberRegex.exec(b);\n          if (!anum) { return a < b ? -1 : 1; }\n          anum = parseInt((anum[1] + anum[2]).toLowerCase(), radix);\n          bnum = parseInt((bnum[1] + bnum[2]).toLowerCase(), radix);\n          return anum - bnum;\n        }\n        function comparePatternFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a[0] = a[0].toLowerCase(); b[0] = b[0].toLowerCase(); }\n          return (a[0] < b[0]) ? -1 : 1;\n        }\n        numPart.sort(pattern ? comparePatternFn : compareFn);\n        if (pattern) {\n          for (var i = 0; i < numPart.length; i++) {\n            numPart[i] = numPart[i].input;\n          }\n        } else if (!number) { textPart.sort(compareFn); }\n        text = (!reverse) ? textPart.concat(numPart) : numPart.concat(textPart);\n        if (unique) { // Remove duplicate lines\n          var textOld = text;\n          var lastLine;\n          text = [];\n          for (var i = 0; i < textOld.length; i++) {\n            if (textOld[i] != lastLine) {\n              text.push(textOld[i]);\n            }\n            lastLine = textOld[i];\n          }\n        }\n        cm.replaceRange(text.join('\\n'), curStart, curEnd);\n      },\n      vglobal: function(cm, params) {\n        // global inspects params.commandName\n        this.global(cm, params);\n      },\n      global: function(cm, params) {\n        // a global command is of the form\n        // :[range]g/pattern/[cmd]\n        // argString holds the string /pattern/[cmd]\n        var argString = params.argString;\n        if (!argString) {\n          showConfirm(cm, 'Regular Expression missing from global');\n          return;\n        }\n        var inverted = params.commandName[0] === 'v';\n        // range is specified here\n        var lineStart = (params.line !== undefined) ? params.line : cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        // get the tokens from argString\n        var tokens = splitBySlash(argString);\n        var regexPart = argString, cmd;\n        if (tokens.length) {\n          regexPart = tokens[0];\n          cmd = tokens.slice(1, tokens.length).join('/');\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise\n          // use the regex part as the new query.\n          try {\n           updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n             true /** smartCase */);\n          } catch (e) {\n           showConfirm(cm, 'Invalid regex: ' + regexPart);\n           return;\n          }\n        }\n        // now that we have the regexPart, search for regex matches in the\n        // specified range of lines\n        var query = getSearchState(cm).getQuery();\n        var matchedLines = [];\n        for (var i = lineStart; i <= lineEnd; i++) {\n          var line = cm.getLineHandle(i);\n          var matched = query.test(line.text);\n          if (matched !== inverted) {\n            matchedLines.push(cmd ? line : line.text);\n          }\n        }\n        // if there is no [cmd], just display the list of matched lines\n        if (!cmd) {\n          showConfirm(cm, matchedLines.join('\\n'));\n          return;\n        }\n        var index = 0;\n        var nextCommand = function() {\n          if (index < matchedLines.length) {\n            var line = matchedLines[index++];\n            var lineNum = cm.getLineNumber(line);\n            if (lineNum == null) {\n              nextCommand();\n              return;\n            }\n            var command = (lineNum + 1) + cmd;\n            exCommandDispatcher.processCommand(cm, command, {\n              callback: nextCommand\n            });\n          }\n        };\n        nextCommand();\n      },\n      substitute: function(cm, params) {\n        if (!cm.getSearchCursor) {\n          throw new Error('Search feature not available. Requires searchcursor.js or ' +\n              'any other getSearchCursor implementation.');\n        }\n        var argString = params.argString;\n        var tokens = argString ? splitBySeparator(argString, argString[0]) : [];\n        var regexPart, replacePart = '', trailing, flagsPart, count;\n        var confirm = false; // Whether to confirm each replace.\n        var global = false; // True to replace all instances on a line, false to replace only 1.\n        if (tokens.length) {\n          regexPart = tokens[0];\n          if (getOption('pcre') && regexPart !== '') {\n              regexPart = new RegExp(regexPart).source; //normalize not escaped characters\n          }\n          replacePart = tokens[1];\n          // If the pattern ends with $ (line boundary assertion), change $ to \\n.\n          // Caveat: this workaround cannot match on the last line of the document.\n          if (/(^|[^\\\\])(\\\\\\\\)*\\$$/.test(regexPart)) {\n            regexPart = regexPart.slice(0, -1) + '\\\\n';\n            replacePart = (replacePart || '') + '\\n';\n          }\n          if (replacePart !== undefined) {\n            if (getOption('pcre')) {\n              replacePart = unescapeRegexReplace(replacePart.replace(/([^\\\\])&/g,\"$1$$&\"));\n            } else {\n              replacePart = translateRegexReplace(replacePart);\n            }\n            vimGlobalState.lastSubstituteReplacePart = replacePart;\n          }\n          trailing = tokens[2] ? tokens[2].split(' ') : [];\n        } else {\n          // either the argString is empty or its of the form ' hello/world'\n          // actually splitBySlash returns a list of tokens\n          // only if the string starts with a '/'\n          if (argString && argString.length) {\n            showConfirm(cm, 'Substitutions should be of the form ' +\n                ':s/pattern/replace/');\n            return;\n          }\n        }\n        // After the 3rd slash, we can have flags followed by a space followed\n        // by count.\n        if (trailing) {\n          flagsPart = trailing[0];\n          count = parseInt(trailing[1]);\n          if (flagsPart) {\n            if (flagsPart.indexOf('c') != -1) {\n              confirm = true;\n            }\n            if (flagsPart.indexOf('g') != -1) {\n              global = true;\n            }\n            if (getOption('pcre')) {\n               regexPart = regexPart + '/' + flagsPart;\n            } else {\n               regexPart = regexPart.replace(/\\//g, \"\\\\/\") + '/' + flagsPart;\n            }\n          }\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise use\n          // the regex part as the new query.\n          try {\n            updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n              true /** smartCase */);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + regexPart);\n            return;\n          }\n        }\n        replacePart = replacePart || vimGlobalState.lastSubstituteReplacePart;\n        if (replacePart === undefined) {\n          showConfirm(cm, 'No previous substitute regular expression');\n          return;\n        }\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        var lineStart = (params.line !== undefined) ? params.line : cm.getCursor().line;\n        var lineEnd = params.lineEnd || lineStart;\n        if (lineStart == cm.firstLine() && lineEnd == cm.lastLine()) {\n          lineEnd = Infinity;\n        }\n        if (count) {\n          lineStart = lineEnd;\n          lineEnd = lineStart + count - 1;\n        }\n        var startPos = clipCursorToContent(cm, Pos(lineStart, 0));\n        var cursor = cm.getSearchCursor(query, startPos);\n        doReplace(cm, confirm, global, lineStart, lineEnd, cursor, query, replacePart, params.callback);\n      },\n      redo: CodeMirror.commands.redo,\n      undo: CodeMirror.commands.undo,\n      write: function(cm) {\n        if (CodeMirror.commands.save) {\n          // If a save command is defined, call it.\n          CodeMirror.commands.save(cm);\n        } else if (cm.save) {\n          // Saves to text area if no save command is defined and cm.save() is available.\n          cm.save();\n        }\n      },\n      nohlsearch: function(cm) {\n        clearSearchHighlight(cm);\n      },\n      yank: function (cm) {\n        var cur = copyCursor(cm.getCursor());\n        var line = cur.line;\n        var lineText = cm.getLine(line);\n        vimGlobalState.registerController.pushText(\n          '0', 'yank', lineText, true, true);\n      },\n      delmarks: function(cm, params) {\n        if (!params.argString || !trim(params.argString)) {\n          showConfirm(cm, 'Argument required');\n          return;\n        }\n\n        var state = cm.state.vim;\n        var stream = new CodeMirror.StringStream(trim(params.argString));\n        while (!stream.eol()) {\n          stream.eatSpace();\n\n          // Record the streams position at the beginning of the loop for use\n          // in error messages.\n          var count = stream.pos;\n\n          if (!stream.match(/[a-zA-Z]/, false)) {\n            showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n            return;\n          }\n\n          var sym = stream.next();\n          // Check if this symbol is part of a range\n          if (stream.match('-', true)) {\n            // This symbol is part of a range.\n\n            // The range must terminate at an alphabetic character.\n            if (!stream.match(/[a-zA-Z]/, false)) {\n              showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n              return;\n            }\n\n            var startMark = sym;\n            var finishMark = stream.next();\n            // The range must terminate at an alphabetic character which\n            // shares the same case as the start of the range.\n            if (isLowerCase(startMark) && isLowerCase(finishMark) ||\n                isUpperCase(startMark) && isUpperCase(finishMark)) {\n              var start = startMark.charCodeAt(0);\n              var finish = finishMark.charCodeAt(0);\n              if (start >= finish) {\n                showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n                return;\n              }\n\n              // Because marks are always ASCII values, and we have\n              // determined that they are the same case, we can use\n              // their char codes to iterate through the defined range.\n              for (var j = 0; j <= finish - start; j++) {\n                var mark = String.fromCharCode(start + j);\n                delete state.marks[mark];\n              }\n            } else {\n              showConfirm(cm, 'Invalid argument: ' + startMark + '-');\n              return;\n            }\n          } else {\n            // This symbol is a valid mark, and is not part of a range.\n            delete state.marks[sym];\n          }\n        }\n      }\n    };\n\n    var exCommandDispatcher = new ExCommandDispatcher();\n\n    /**\n    * @param {CodeMirror} cm CodeMirror instance we are in.\n    * @param {boolean} confirm Whether to confirm each replace.\n    * @param {Cursor} lineStart Line to start replacing from.\n    * @param {Cursor} lineEnd Line to stop replacing at.\n    * @param {RegExp} query Query for performing matches with.\n    * @param {string} replaceWith Text to replace matches with. May contain $1,\n    *     $2, etc for replacing captured groups using JavaScript replace.\n    * @param {function()} callback A callback for when the replace is done.\n    */\n    function doReplace(cm, confirm, global, lineStart, lineEnd, searchCursor, query,\n        replaceWith, callback) {\n      // Set up all the functions.\n      cm.state.vim.exMode = true;\n      var done = false;\n      var lastPos, modifiedLineNumber, joined;\n      function replaceAll() {\n        cm.operation(function() {\n          while (!done) {\n            replace();\n            next();\n          }\n          stop();\n        });\n      }\n      function replace() {\n        var text = cm.getRange(searchCursor.from(), searchCursor.to());\n        var newText = text.replace(query, replaceWith);\n        var unmodifiedLineNumber = searchCursor.to().line;\n        searchCursor.replace(newText);\n        modifiedLineNumber = searchCursor.to().line;\n        lineEnd += modifiedLineNumber - unmodifiedLineNumber;\n        joined = modifiedLineNumber < unmodifiedLineNumber;\n      }\n      function next() {\n        // The below only loops to skip over multiple occurrences on the same\n        // line when 'global' is not true.\n        while(searchCursor.findNext() &&\n              isInRange(searchCursor.from(), lineStart, lineEnd)) {\n          if (!global && searchCursor.from().line == modifiedLineNumber && !joined) {\n            continue;\n          }\n          cm.scrollIntoView(searchCursor.from(), 30);\n          cm.setSelection(searchCursor.from(), searchCursor.to());\n          lastPos = searchCursor.from();\n          done = false;\n          return;\n        }\n        done = true;\n      }\n      function stop(close) {\n        if (close) { close(); }\n        cm.focus();\n        if (lastPos) {\n          cm.setCursor(lastPos);\n          var vim = cm.state.vim;\n          vim.exMode = false;\n          vim.lastHPos = vim.lastHSPos = lastPos.ch;\n        }\n        if (callback) { callback(); }\n      }\n      function onPromptKeyDown(e, _value, close) {\n        // Swallow all keys.\n        CodeMirror.e_stop(e);\n        var keyName = CodeMirror.keyName(e);\n        switch (keyName) {\n          case 'Y':\n            replace(); next(); break;\n          case 'N':\n            next(); break;\n          case 'A':\n            // replaceAll contains a call to close of its own. We don't want it\n            // to fire too early or multiple times.\n            var savedCallback = callback;\n            callback = undefined;\n            cm.operation(replaceAll);\n            callback = savedCallback;\n            break;\n          case 'L':\n            replace();\n            // fall through and exit.\n          case 'Q':\n          case 'Esc':\n          case 'Ctrl-C':\n          case 'Ctrl-[':\n            stop(close);\n            break;\n        }\n        if (done) { stop(close); }\n        return true;\n      }\n\n      // Actually do replace.\n      next();\n      if (done) {\n        showConfirm(cm, 'No matches for ' + query.source);\n        return;\n      }\n      if (!confirm) {\n        replaceAll();\n        if (callback) { callback(); }\n        return;\n      }\n      showPrompt(cm, {\n        prefix: dom('span', 'replace with ', dom('strong', replaceWith), ' (y/n/a/q/l)'),\n        onKeyDown: onPromptKeyDown\n      });\n    }\n\n    CodeMirror.keyMap.vim = {\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function exitInsertMode(cm) {\n      var vim = cm.state.vim;\n      var macroModeState = vimGlobalState.macroModeState;\n      var insertModeChangeRegister = vimGlobalState.registerController.getRegister('.');\n      var isPlaying = macroModeState.isPlaying;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      if (!isPlaying) {\n        cm.off('change', onChange);\n        CodeMirror.off(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n      }\n      if (!isPlaying && vim.insertModeRepeat > 1) {\n        // Perform insert mode repeat for commands like 3,a and 3,o.\n        repeatLastEdit(cm, vim, vim.insertModeRepeat - 1,\n            true /** repeatForInsert */);\n        vim.lastEditInputState.repeatOverride = vim.insertModeRepeat;\n      }\n      delete vim.insertModeRepeat;\n      vim.insertMode = false;\n      cm.setCursor(cm.getCursor().line, cm.getCursor().ch-1);\n      cm.setOption('keyMap', 'vim');\n      cm.setOption('disableInput', true);\n      cm.toggleOverwrite(false); // exit replace mode if we were in it.\n      // update the \". register before exiting insert mode\n      insertModeChangeRegister.setText(lastChange.changes.join(''));\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      if (macroModeState.isRecording) {\n        logInsertModeChange(macroModeState);\n      }\n    }\n\n    function _mapCommand(command) {\n      defaultKeymap.unshift(command);\n    }\n\n    function mapCommand(keys, type, name, args, extra) {\n      var command = {keys: keys, type: type};\n      command[type] = name;\n      command[type + \"Args\"] = args;\n      for (var key in extra)\n        command[key] = extra[key];\n      _mapCommand(command);\n    }\n\n    // The timeout in milliseconds for the two-character ESC keymap should be\n    // adjusted according to your typing speed to prevent false positives.\n    defineOption('insertModeEscKeysTimeout', 200, 'number');\n\n    CodeMirror.keyMap['vim-insert'] = {\n      // TODO: override navigation keys so that Esc will cancel automatic\n      // indentation from o, O, i_<CR>\n      fallthrough: ['default'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    CodeMirror.keyMap['vim-replace'] = {\n      'Backspace': 'goCharLeft',\n      fallthrough: ['vim-insert'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function executeMacroRegister(cm, vim, macroModeState, registerName) {\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (registerName == ':') {\n        // Read-only register containing last Ex command.\n        if (register.keyBuffer[0]) {\n          exCommandDispatcher.processCommand(cm, register.keyBuffer[0]);\n        }\n        macroModeState.isPlaying = false;\n        return;\n      }\n      var keyBuffer = register.keyBuffer;\n      var imc = 0;\n      macroModeState.isPlaying = true;\n      macroModeState.replaySearchQueries = register.searchQueries.slice(0);\n      for (var i = 0; i < keyBuffer.length; i++) {\n        var text = keyBuffer[i];\n        var match, key;\n        while (text) {\n          // Pull off one command key, which is either a single character\n          // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n          match = (/<\\w+-.+?>|<\\w+>|./).exec(text);\n          key = match[0];\n          text = text.substring(match.index + key.length);\n          CodeMirror.Vim.handleKey(cm, key, 'macro');\n          if (vim.insertMode) {\n            var changes = register.insertModeChanges[imc++].changes;\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes =\n                changes;\n            repeatInsertModeChanges(cm, changes, 1);\n            exitInsertMode(cm);\n          }\n        }\n      }\n      macroModeState.isPlaying = false;\n    }\n\n    function logKey(macroModeState, key) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register) {\n        register.pushText(key);\n      }\n    }\n\n    function logInsertModeChange(macroModeState) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushInsertModeChanges) {\n        register.pushInsertModeChanges(macroModeState.lastInsertModeChanges);\n      }\n    }\n\n    function logSearchQuery(macroModeState, query) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushSearchQuery) {\n        register.pushSearchQuery(query);\n      }\n    }\n\n    /**\n     * Listens for changes made in insert mode.\n     * Should only be active in insert mode.\n     */\n    function onChange(cm, changeObj) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      if (!macroModeState.isPlaying) {\n        while(changeObj) {\n          lastChange.expectCursorActivityForChange = true;\n          if (lastChange.ignoreCount > 1) {\n            lastChange.ignoreCount--;\n          } else if (changeObj.origin == '+input' || changeObj.origin == 'paste'\n              || changeObj.origin === undefined /* only in testing */) {\n            var selectionCount = cm.listSelections().length;\n            if (selectionCount > 1)\n              lastChange.ignoreCount = selectionCount;\n            var text = changeObj.text.join('\\n');\n            if (lastChange.maybeReset) {\n              lastChange.changes = [];\n              lastChange.maybeReset = false;\n            }\n            if (text) {\n              if (cm.state.overwrite && !/\\n/.test(text)) {\n                lastChange.changes.push([text]);\n              } else {\n                lastChange.changes.push(text);\n              }\n            }\n          }\n          // Change objects may be chained with next.\n          changeObj = changeObj.next;\n        }\n      }\n    }\n\n    /**\n    * Listens for any kind of cursor activity on CodeMirror.\n    */\n    function onCursorActivity(cm) {\n      var vim = cm.state.vim;\n      if (vim.insertMode) {\n        // Tracking cursor activity in insert mode (for macro support).\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        var lastChange = macroModeState.lastInsertModeChanges;\n        if (lastChange.expectCursorActivityForChange) {\n          lastChange.expectCursorActivityForChange = false;\n        } else {\n          // Cursor moved outside the context of an edit. Reset the change.\n          lastChange.maybeReset = true;\n        }\n      } else if (!cm.curOp.isVimOp) {\n        handleExternalSelection(cm, vim);\n      }\n      if (vim.visualMode) {\n        updateFakeCursor(cm);\n      }\n    }\n    /**\n     * Keeps track of a fake cursor to support visual mode cursor behavior.\n     */\n    function updateFakeCursor(cm) {\n      var className = 'cm-animate-fat-cursor';\n      var vim = cm.state.vim;\n      var from = clipCursorToContent(cm, copyCursor(vim.sel.head));\n      var to = offsetCursor(from, 0, 1);\n      clearFakeCursor(vim);\n      // In visual mode, the cursor may be positioned over EOL.\n      if (from.ch == cm.getLine(from.line).length) {\n        var widget = dom('span', { 'class': className }, '\\u00a0');\n        vim.fakeCursorBookmark = cm.setBookmark(from, {widget: widget});\n      } else {\n        vim.fakeCursor = cm.markText(from, to, {className: className});\n      }\n    }\n    function clearFakeCursor(vim) {\n      if (vim.fakeCursor) {\n        vim.fakeCursor.clear();\n        vim.fakeCursor = null;\n      }\n      if (vim.fakeCursorBookmark) {\n        vim.fakeCursorBookmark.clear();\n        vim.fakeCursorBookmark = null;\n      }\n    }\n    function handleExternalSelection(cm, vim) {\n      var anchor = cm.getCursor('anchor');\n      var head = cm.getCursor('head');\n      // Enter or exit visual mode to match mouse selection.\n      if (vim.visualMode && !cm.somethingSelected()) {\n        exitVisualMode(cm, false);\n      } else if (!vim.visualMode && !vim.insertMode && cm.somethingSelected()) {\n        vim.visualMode = true;\n        vim.visualLine = false;\n        CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\"});\n      }\n      if (vim.visualMode) {\n        // Bind CodeMirror selection model to vim selection model.\n        // Mouse selections are considered visual characterwise.\n        var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0;\n        var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0;\n        head = offsetCursor(head, 0, headOffset);\n        anchor = offsetCursor(anchor, 0, anchorOffset);\n        vim.sel = {\n          anchor: anchor,\n          head: head\n        };\n        updateMark(cm, vim, '<', cursorMin(head, anchor));\n        updateMark(cm, vim, '>', cursorMax(head, anchor));\n      } else if (!vim.insertMode) {\n        // Reset lastHPos if selection was modified by something outside of vim mode e.g. by mouse.\n        vim.lastHPos = cm.getCursor().ch;\n      }\n    }\n\n    /** Wrapper for special keys pressed in insert mode */\n    function InsertModeKey(keyName) {\n      this.keyName = keyName;\n    }\n\n    /**\n    * Handles raw key down events from the text area.\n    * - Should only be active in insert mode.\n    * - For recording deletes in insert mode.\n    */\n    function onKeyEventTargetKeyDown(e) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      var keyName = CodeMirror.keyName(e);\n      if (!keyName) { return; }\n      function onKeyFound() {\n        if (lastChange.maybeReset) {\n          lastChange.changes = [];\n          lastChange.maybeReset = false;\n        }\n        lastChange.changes.push(new InsertModeKey(keyName));\n        return true;\n      }\n      if (keyName.indexOf('Delete') != -1 || keyName.indexOf('Backspace') != -1) {\n        CodeMirror.lookupKey(keyName, 'vim-insert', onKeyFound);\n      }\n    }\n\n    /**\n     * Repeats the last edit, which includes exactly 1 command and at most 1\n     * insert. Operator and motion commands are read from lastEditInputState,\n     * while action commands are read from lastEditActionCommand.\n     *\n     * If repeatForInsert is true, then the function was called by\n     * exitInsertMode to repeat the insert mode changes the user just made. The\n     * corresponding enterInsertMode call was made with a count.\n     */\n    function repeatLastEdit(cm, vim, repeat, repeatForInsert) {\n      var macroModeState = vimGlobalState.macroModeState;\n      macroModeState.isPlaying = true;\n      var isAction = !!vim.lastEditActionCommand;\n      var cachedInputState = vim.inputState;\n      function repeatCommand() {\n        if (isAction) {\n          commandDispatcher.processAction(cm, vim, vim.lastEditActionCommand);\n        } else {\n          commandDispatcher.evalInput(cm, vim);\n        }\n      }\n      function repeatInsert(repeat) {\n        if (macroModeState.lastInsertModeChanges.changes.length > 0) {\n          // For some reason, repeat cw in desktop VIM does not repeat\n          // insert mode changes. Will conform to that behavior.\n          repeat = !vim.lastEditActionCommand ? 1 : repeat;\n          var changeObject = macroModeState.lastInsertModeChanges;\n          repeatInsertModeChanges(cm, changeObject.changes, repeat);\n        }\n      }\n      vim.inputState = vim.lastEditInputState;\n      if (isAction && vim.lastEditActionCommand.interlaceInsertRepeat) {\n        // o and O repeat have to be interlaced with insert repeats so that the\n        // insertions appear on separate lines instead of the last line.\n        for (var i = 0; i < repeat; i++) {\n          repeatCommand();\n          repeatInsert(1);\n        }\n      } else {\n        if (!repeatForInsert) {\n          // Hack to get the cursor to end up at the right place. If I is\n          // repeated in insert mode repeat, cursor will be 1 insert\n          // change set left of where it should be.\n          repeatCommand();\n        }\n        repeatInsert(repeat);\n      }\n      vim.inputState = cachedInputState;\n      if (vim.insertMode && !repeatForInsert) {\n        // Don't exit insert mode twice. If repeatForInsert is set, then we\n        // were called by an exitInsertMode call lower on the stack.\n        exitInsertMode(cm);\n      }\n      macroModeState.isPlaying = false;\n    }\n\n    function repeatInsertModeChanges(cm, changes, repeat) {\n      function keyHandler(binding) {\n        if (typeof binding == 'string') {\n          CodeMirror.commands[binding](cm);\n        } else {\n          binding(cm);\n        }\n        return true;\n      }\n      var head = cm.getCursor('head');\n      var visualBlock = vimGlobalState.macroModeState.lastInsertModeChanges.visualBlock;\n      if (visualBlock) {\n        // Set up block selection again for repeating the changes.\n        selectForInsert(cm, head, visualBlock + 1);\n        repeat = cm.listSelections().length;\n        cm.setCursor(head);\n      }\n      for (var i = 0; i < repeat; i++) {\n        if (visualBlock) {\n          cm.setCursor(offsetCursor(head, i, 0));\n        }\n        for (var j = 0; j < changes.length; j++) {\n          var change = changes[j];\n          if (change instanceof InsertModeKey) {\n            CodeMirror.lookupKey(change.keyName, 'vim-insert', keyHandler);\n          } else if (typeof change == \"string\") {\n            var cur = cm.getCursor();\n            cm.replaceRange(change, cur, cur);\n          } else {\n            var start = cm.getCursor();\n            var end = offsetCursor(start, 0, change[0].length);\n            cm.replaceRange(change[0], start, end);\n          }\n        }\n      }\n      if (visualBlock) {\n        cm.setCursor(offsetCursor(head, 0, 1));\n      }\n    }\n\n    resetVimGlobalState();\n    return vimApi;\n  };\n  // Initialize Vim and make it available as an API.\n  CodeMirror.Vim = Vim();\n});\n"],"sourceRoot":""}