(self["webpackChunk_jupyterlab_application_top"]=self["webpackChunk_jupyterlab_application_top"]||[]).push([[6607],{66607:(e,t,o)=>{"use strict";o.r(t);o.d(t,{default:()=>f});var n=o(25555);var l=o(89739);var i=o(32985);const a=!!navigator.platform.match(/Mac/i);class c{constructor({commands:e,cm:t,enabled:o,userKeybindings:n}){this._commands=e;this._cm=t;this.enabled=o;this.lastActiveCell=null;this.userKeybindings=n!==null&&n!==void 0?n:[]}onActiveCellChanged(e,t){this.modifyCell(t)}modifyCell(e){if(!e){return}this.lastActiveCell=e;const t=e.editor;if(this.enabled){t.setOption("keyMap","vim");const o=t.getOption("extraKeys")||{};o["Esc"]=this._cm.prototype.leaveInsertMode;if(!a){o["Ctrl-C"]=false}this._cm.prototype.save=()=>{this._commands.execute("docmanager:save")};t.setOption("extraKeys",o);const n=this._cm;const l=n.Vim;["normal","visual","insert"].forEach((e=>l.mapclear(e)));this.userKeybindings.forEach((({command:e,keys:t,context:o,mapfn:n,enabled:i})=>{if(i){if(n==="map"){l.map(e,t,o)}else{l.noremap(e,t,o)}}}));l.defineEx("quit","q",(e=>{this._commands.execute("notebook:enter-command-mode")}));this._cm.Vim.handleKey(t.editor,"<Esc>");const i=(t,o,n,l)=>{const a=o;let c=a.ch;const s=e;switch(l===null||l===void 0?void 0:l.lastMotion){case t.moveByLines:case t.moveByDisplayLines:case t.moveByScroll:case t.moveToColumn:case t.moveToEol:case i:c=l.lastHPos;break;default:l.lastHPos=c}const d=n.repeat+(n.repeatOffset||0);let r=n.forward?a.line+d:a.line-d;const m=t.firstLine();const u=t.lastLine();const C=t.findPosV(a,n.forward?d:-d,"line",l.lastHSPos);const v=n.forward?C.line>r:C.line<r;if(v){r=C.line;c=C.ch}if(r<m||r>u){if(s!==null&&s.model.type==="markdown"){if(!n.handleArrow){s.rendered=true}}if(n.forward){if(!n.handleArrow){this._commands.execute("notebook:move-cursor-down")}else{const e=t.getCursor();const o=t.doc.getLine(u).length;if(e.line!==u||e.ch!==o){t.setCursor({line:u,ch:o});this._commands.execute("notebook:move-cursor-down")}}}else{if(!n.handleArrow){this._commands.execute("notebook:move-cursor-up")}else{const e=t.getCursor();if(e.line!==0||e.ch!==0){t.setCursor({line:0,ch:0});this._commands.execute("notebook:move-cursor-up")}}}return}function f(e){if(!e){return 0}const t=e.search(/\S/);return t===-1?e.length:t}if(n.toFirstChar){c=f(t.getLine(r));l.lastHPos=c}l.lastHSPos=t.charCoords(this._cm.Pos(r,c),"div").left;return this._cm.Pos(r,c)};l.defineMotion("moveByLinesOrCell",i);l.mapCommand("<Up>","motion","moveByLinesOrCell",{forward:false,linewise:true,handleArrow:true},{context:"normal"});l.mapCommand("<Down>","motion","moveByLinesOrCell",{forward:true,linewise:true,handleArrow:true},{context:"normal"});l.mapCommand("k","motion","moveByLinesOrCell",{forward:false,linewise:true},{context:"normal"});l.mapCommand("j","motion","moveByLinesOrCell",{forward:true,linewise:true},{context:"normal"});l.defineAction("moveCellDown",((e,t)=>{this._commands.execute("notebook:move-cell-down")}));l.defineAction("moveCellUp",((e,t)=>{this._commands.execute("notebook:move-cell-up")}));l.mapCommand("<C-e>","action","moveCellDown",{},{extra:"normal"});l.mapCommand("<C-y>","action","moveCellUp",{},{extra:"normal"});l.defineAction("splitCell",((e,t)=>{this._commands.execute("notebook:split-cell-at-cursor")}));l.mapCommand("-","action","splitCell",{},{extra:"normal"})}else if(t.getOption("keyMap")==="vim"){t.setOption("keyMap","default")}}}var s=o(45187);function d(e,t,o){const{commands:l,shell:i}=e;function a(e){const o=t.currentWidget;const n=e["activate"]!==false;if(n&&o){i.activateById(o.id)}return o}function c(){return t.currentWidget!==null&&t.currentWidget===e.shell.currentWidget}const d=[l.addCommand("vim:run-select-next-edit",{label:"Run Cell and Edit Next Cell",execute:e=>{const t=a(e);if(t){const{context:e,content:o}=t;n.NotebookActions.runAndAdvance(o,e.sessionContext);t.content.mode="edit"}},isEnabled:c}),l.addCommand("vim:run-cell-and-edit",{label:"Run Cell and Edit Cell",execute:e=>{const t=a(e);if(t){const{context:e,content:o}=t;n.NotebookActions.run(o,e.sessionContext);t.content.mode="edit"}},isEnabled:c}),l.addCommand("vim:cut-cell-and-edit",{label:"Cut Cell(s) and Edit Cell",execute:e=>{const t=a(e);if(t){const{content:e}=t;n.NotebookActions.cut(e);e.mode="edit"}},isEnabled:c}),l.addCommand("vim:copy-cell-and-edit",{label:"Copy Cell(s) and Edit Cell",execute:e=>{const t=a(e);if(t){const{content:e}=t;n.NotebookActions.copy(e);e.mode="edit"}},isEnabled:c}),l.addCommand("vim:paste-cell-and-edit",{label:"Paste Cell(s) and Edit Cell",execute:e=>{const t=a(e);if(t){const{content:e}=t;n.NotebookActions.paste(e,"below");e.mode="edit"}},isEnabled:c}),l.addCommand("vim:merge-and-edit",{label:"Merge and Edit Cell",execute:e=>{const t=a(e);if(t){const{content:e}=t;n.NotebookActions.mergeCells(e);t.content.mode="edit"}},isEnabled:c}),l.addCommand("vim:enter-insert-mode",{label:"Enter Insert Mode",execute:e=>{const t=a(e);if(t){const{content:e}=t;if(e.activeCell!==null){const n=e.activeCell.editor;t.content.mode="edit";o.Vim.handleKey(n.editor,"i")}}},isEnabled:c}),l.addCommand("vim:leave-insert-mode",{label:"Leave Insert Mode",execute:e=>{const t=a(e);if(t){const{content:e}=t;if(e.activeCell!==null){const t=e.activeCell.editor;o.Vim.handleKey(t.editor,"<Esc>")}}},isEnabled:c}),l.addCommand("vim:leave-current-mode",{label:'Move Insert to Normal to Jupyter Command Mode"',execute:e=>{const t=a(e);if(t){const{content:e}=t;if(e.activeCell!==null){const t=e.activeCell.editor;if(t.editor.state.vim.insertMode||t.editor.state.vim.visualMode){o.Vim.handleKey(t.editor,"<Esc>")}else{l.execute("notebook:enter-command-mode")}}}},isEnabled:c}),l.addCommand("vim:select-below-execute-markdown",{label:"Execute Markdown and Select Cell Below",execute:e=>{const t=a(e);if(t){const{content:e}=t;if(e.activeCell!==null&&e.activeCell.model.type==="markdown"){t.content.activeCell.rendered=true}return n.NotebookActions.selectBelow(t.content)}},isEnabled:c}),l.addCommand("vim:select-above-execute-markdown",{label:"Execute Markdown and Select Cell Below",execute:e=>{const t=a(e);if(t){const{content:e}=t;if(e.activeCell!==null&&e.activeCell.model.type==="markdown"){t.content.activeCell.rendered=true}return n.NotebookActions.selectAbove(t.content)}},isEnabled:c}),l.addCommand("vim:select-first-cell",{label:"Select First Cell",execute:e=>{const t=a(e);if(t){const{content:e}=t;e.activeCellIndex=0;e.deselectAll();if(e.activeCell!==null){s.ElementExt.scrollIntoViewIfNeeded(e.node,e.activeCell.node)}}},isEnabled:c}),l.addCommand("vim:select-last-cell",{label:"Select Last Cell",execute:e=>{const t=a(e);if(t){const{content:e}=t;e.activeCellIndex=t.content.widgets.length-1;e.deselectAll();if(e.activeCell!==null){s.ElementExt.scrollIntoViewIfNeeded(e.node,e.activeCell.node)}}},isEnabled:c}),l.addCommand("vim:center-cell",{label:"Center Cell",execute:e=>{const t=a(e);if(t&&t.content.activeCell!==null){const e=t.content.activeCell.inputArea.node.getBoundingClientRect();t.content.scrollToPosition(e.bottom,0)}},isEnabled:c})];return d}const r="@axlair/jupyterlab_vim";const m="jupyterlab-vim:toggle";let u=false;const C={id:r,autoStart:true,activate:v,requires:[n.INotebookTracker,l.ICodeMirror,i.ISettingRegistry]};async function v(e,t,o,n){e.commands.addCommand(m,{label:"Enable Notebook Vim mode",execute:()=>{if(n){void n.set(`${r}:plugin`,"enabled",!u)}},isToggled:()=>u});const l=(await n.get(`${r}:plugin`,"extraKeybindings")).composite;const i=o.CodeMirror;let a=null;let s=null;let C=false;a=new c({commands:e.commands,cm:i,enabled:u,userKeybindings:l});t.activeCellChanged.connect(a.onActiveCellChanged,a);d(e,t,i);async function v(l){const i=(await n.get(`${r}:plugin`,"extraKeybindings")).composite;u=l.get("enabled").composite===true;e.commands.notifyCommandChanged(m);if(a){a.enabled=u;a.userKeybindings=i}if(u){s===null||s===void 0?void 0:s.dispose();if(!C){C=true;await e.restored;await o.ensureVimKeymap()}}else{s=e.commands.addKeyBinding({command:"notebook:enter-command-mode",keys:["Escape"],selector:".jp-Notebook.jp-mod-editMode"})}t.forEach((e=>{e.node.dataset.jpVimMode=`${u}`}));a===null||a===void 0?void 0:a.modifyCell(a.lastActiveCell);t.widgetAdded.connect(((e,t)=>{t.node.dataset.jpVimMode=`${u}`}))}n.load(`${r}:plugin`).then((e=>{v(e);e.changed.connect(v)}),(e=>{console.error(`Could not load settings, so did not active ${r}: ${e}`)}));return Promise.resolve()}const f=C}}]);
//# sourceMappingURL=6607.117b9fae6fbeec23f3f3.js.map?v=117b9fae6fbeec23f3f3